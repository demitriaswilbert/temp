[@file: .gitignore]
.pio
.vscode/.browse.c_cpp.db*
.vscode/c_cpp_properties.json
.vscode/launch.json
.vscode/ipch

[@file: file.c]
/*
  Keyboard.h

  Copyright (c) 2015, Arduino LLC
  Original code (pre-library): Copyright (c) 2011, Peter Barrett

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#pragma once
#include <stdint.h>

typedef union {
    struct {
            uint8_t numlock:1;
            uint8_t capslock:1;
            uint8_t scrolllock:1;
            uint8_t compose:1;
            uint8_t kana:1;
            uint8_t reserved:3;
    };
    uint8_t leds;
} arduino_usb_hid_keyboard_event_data_t;

// Power Control
#define CONSUMER_CONTROL_POWER                             0x0030
#define CONSUMER_CONTROL_RESET                             0x0031
#define CONSUMER_CONTROL_SLEEP                             0x0032

// Screen Brightness
#define CONSUMER_CONTROL_BRIGHTNESS_INCREMENT              0x006F
#define CONSUMER_CONTROL_BRIGHTNESS_DECREMENT              0x0070

// These HID usages operate only on mobile systems (battery powered) and
// require Windows 8 (build 8302 or greater).
#define CONSUMER_CONTROL_WIRELESS_RADIO_CONTROLS           0x000C
#define CONSUMER_CONTROL_WIRELESS_RADIO_BUTTONS            0x00C6
#define CONSUMER_CONTROL_WIRELESS_RADIO_LED                0x00C7
#define CONSUMER_CONTROL_WIRELESS_RADIO_SLIDER_SWITCH      0x00C8

// Media Control
#define CONSUMER_CONTROL_PLAY_PAUSE                        0x00CD
#define CONSUMER_CONTROL_SCAN_NEXT                         0x00B5
#define CONSUMER_CONTROL_SCAN_PREVIOUS                     0x00B6
#define CONSUMER_CONTROL_STOP                              0x00B7
#define CONSUMER_CONTROL_VOLUME                            0x00E0
#define CONSUMER_CONTROL_MUTE                              0x00E2
#define CONSUMER_CONTROL_BASS                              0x00E3
#define CONSUMER_CONTROL_TREBLE                            0x00E4
#define CONSUMER_CONTROL_BASS_BOOST                        0x00E5
#define CONSUMER_CONTROL_VOLUME_INCREMENT                  0x00E9
#define CONSUMER_CONTROL_VOLUME_DECREMENT                  0x00EA
#define CONSUMER_CONTROL_BASS_INCREMENT                    0x0152
#define CONSUMER_CONTROL_BASS_DECREMENT                    0x0153
#define CONSUMER_CONTROL_TREBLE_INCREMENT                  0x0154
#define CONSUMER_CONTROL_TREBLE_DECREMENT                  0x0155

// Application Launcher
#define CONSUMER_CONTROL_CONFIGURATION                     0x0183
#define CONSUMER_CONTROL_EMAIL_READER                      0x018A
#define CONSUMER_CONTROL_CALCULATOR                        0x0192
#define CONSUMER_CONTROL_LOCAL_BROWSER                     0x0194

// Browser/Explorer Specific
#define CONSUMER_CONTROL_SEARCH                            0x0221
#define CONSUMER_CONTROL_HOME                              0x0223
#define CONSUMER_CONTROL_BACK                              0x0224
#define CONSUMER_CONTROL_FORWARD                           0x0225
#define CONSUMER_CONTROL_BR_STOP                           0x0226
#define CONSUMER_CONTROL_REFRESH                           0x0227
#define CONSUMER_CONTROL_BOOKMARKS                         0x022A

// Mouse Horizontal scroll
#define CONSUMER_CONTROL_PAN                               0x0238

#define CC_BIT_0 CONSUMER_CONTROL_SCAN_NEXT
#define CC_BIT_1 CONSUMER_CONTROL_SCAN_PREVIOUS
#define CC_BIT_2 CONSUMER_CONTROL_STOP
#define CC_BIT_3 CONSUMER_CONTROL_PLAY_PAUSE
#define CC_BIT_4 CONSUMER_CONTROL_MUTE
#define CC_BIT_5 CONSUMER_CONTROL_VOLUME_INCREMENT
#define CC_BIT_6 CONSUMER_CONTROL_VOLUME_DECREMENT
#define CC_BIT_7 CONSUMER_CONTROL_HOME
#define CC_BIT_8 CONSUMER_CONTROL_LOCAL_BROWSER
#define CC_BIT_9 CONSUMER_CONTROL_CALCULATOR
#define CC_BIT_A CONSUMER_CONTROL_BRIGHTNESS_DECREMENT
#define CC_BIT_B CONSUMER_CONTROL_BRIGHTNESS_INCREMENT
#define CC_BIT_C CONSUMER_CONTROL_BR_STOP
#define CC_BIT_D CONSUMER_CONTROL_BACK
#define CC_BIT_E CONSUMER_CONTROL_CONFIGURATION
#define CC_BIT_F CONSUMER_CONTROL_EMAIL_READER

#define M_KEY_TYPE_MASK        ((uint32_t)0xffff0000UL)
#define M_KEY_TARGET_MASK      ((uint32_t)0xC0000000UL)

#define M_KEY_TARGET_KB       ((uint32_t)0x40000000UL)
#define M_KEY_TARGET_CC       ((uint32_t)0x80000000UL)

#define M_KEY_TYPE_MODIF      (M_KEY_TARGET_KB | (uint32_t)0x01000000UL)
#define M_KEY_TYPE_NONPRINT   (M_KEY_TARGET_KB | (uint32_t)0x02000000UL)
#define M_KEY_TYPE_KEYPAD     (M_KEY_TARGET_KB | (uint32_t)0x04000000UL)
#define SHIFT               (M_KEY_TARGET_KB | (uint32_t)0x08000000UL)

#define M_KEY_LEFT_CTRL       (M_KEY_TYPE_MODIF | (uint32_t)0x01UL)
#define M_KEY_LEFT_SHIFT      (M_KEY_TYPE_MODIF | (uint32_t)0x02UL)
#define M_KEY_LEFT_ALT        (M_KEY_TYPE_MODIF | (uint32_t)0x04UL)
#define M_KEY_LEFT_GUI        (M_KEY_TYPE_MODIF | (uint32_t)0x08UL)
#define M_KEY_RIGHT_CTRL      (M_KEY_TYPE_MODIF | (uint32_t)0x10UL)
#define M_KEY_RIGHT_SHIFT     (M_KEY_TYPE_MODIF | (uint32_t)0x20UL)
#define M_KEY_RIGHT_ALT       (M_KEY_TYPE_MODIF | (uint32_t)0x40UL)
#define M_KEY_RIGHT_GUI       (M_KEY_TYPE_MODIF | (uint32_t)0x80UL)

#define M_KEY_UP_ARROW        (M_KEY_TYPE_NONPRINT | (uint32_t)0x0052UL)
#define M_KEY_DOWN_ARROW      (M_KEY_TYPE_NONPRINT | (uint32_t)0x0051UL)
#define M_KEY_LEFT_ARROW      (M_KEY_TYPE_NONPRINT | (uint32_t)0x0050UL)
#define M_KEY_RIGHT_ARROW     (M_KEY_TYPE_NONPRINT | (uint32_t)0x004fUL)
#define M_KEY_BACKSPACE       (M_KEY_TYPE_NONPRINT | (uint32_t)0x002aUL)
#define M_KEY_TAB             (M_KEY_TYPE_NONPRINT | (uint32_t)0x002bUL)
#define M_KEY_RETURN          (M_KEY_TYPE_NONPRINT | (uint32_t)0x0028UL)
#define M_KEY_ESC             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0029UL)
#define M_KEY_INSERT          (M_KEY_TYPE_NONPRINT | (uint32_t)0x0049UL)
#define M_KEY_PRTSC           (M_KEY_TYPE_NONPRINT | (uint32_t)0x0046UL)
#define M_KEY_DELETE          (M_KEY_TYPE_NONPRINT | (uint32_t)0x004cUL)
#define M_KEY_PAGE_UP         (M_KEY_TYPE_NONPRINT | (uint32_t)0x004bUL)
#define M_KEY_PAGE_DOWN       (M_KEY_TYPE_NONPRINT | (uint32_t)0x004eUL)
#define M_KEY_HOME            (M_KEY_TYPE_NONPRINT | (uint32_t)0x004aUL)
#define M_KEY_END             (M_KEY_TYPE_NONPRINT | (uint32_t)0x004dUL)
#define M_KEY_CAPS_LOCK       (M_KEY_TYPE_NONPRINT | (uint32_t)0x0039UL)
#define M_KEY_NUM_LOCK        (M_KEY_TYPE_NONPRINT | (uint32_t)0x0053UL)

#define M_KEY_F1              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003aUL)
#define M_KEY_F2              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003bUL)
#define M_KEY_F3              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003cUL)
#define M_KEY_F4              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003dUL)
#define M_KEY_F5              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003eUL)
#define M_KEY_F6              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003fUL)
#define M_KEY_F7              (M_KEY_TYPE_NONPRINT | (uint32_t)0x0040UL)
#define M_KEY_F8              (M_KEY_TYPE_NONPRINT | (uint32_t)0x0041UL)
#define M_KEY_F9              (M_KEY_TYPE_NONPRINT | (uint32_t)0x0042UL)
#define M_KEY_F10             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0043UL)
#define M_KEY_F11             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0044UL)
#define M_KEY_F12             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0045UL)
#define M_KEY_PRTSC           (M_KEY_TYPE_NONPRINT | (uint32_t)0x0046UL)
#define M_KEY_F13             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0068UL)
#define M_KEY_F14             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0069UL)
#define M_KEY_F15             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006aUL)
#define M_KEY_F16             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006bUL)
#define M_KEY_F17             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006cUL)
#define M_KEY_F18             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006dUL)
#define M_KEY_F19             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006eUL)
#define M_KEY_F20             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006fUL)
#define M_KEY_F21             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0070UL)
#define M_KEY_F22             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0071UL)
#define M_KEY_F23             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0072UL)
#define M_KEY_F24             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0073UL)

#define M_KEY_NUM_0           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0062UL)
#define M_KEY_NUM_1           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0059UL)
#define M_KEY_NUM_2           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005aUL)
#define M_KEY_NUM_3           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005bUL)
#define M_KEY_NUM_4           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005cUL)
#define M_KEY_NUM_5           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005dUL)
#define M_KEY_NUM_6           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005eUL)
#define M_KEY_NUM_7           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005fUL)
#define M_KEY_NUM_8           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0060UL)
#define M_KEY_NUM_9           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0061UL)
#define M_KEY_NUM_SLASH       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0054UL)
#define M_KEY_NUM_ASTERISK    (M_KEY_TYPE_KEYPAD | (uint32_t)0x0055UL)
#define M_KEY_NUM_MINUS       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0056UL)
#define M_KEY_NUM_PLUS        (M_KEY_TYPE_KEYPAD | (uint32_t)0x0057UL)
#define M_KEY_NUM_ENTER       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0058UL)
#define M_KEY_NUM_PERIOD      (M_KEY_TYPE_KEYPAD | (uint32_t)0x0063UL)
#define M_KEY_NUM_EQUAL       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0067UL)


typedef uint32_t MediaKeyReport;

#define M_KEY_MEDIA_NEXT              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x0U))
#define M_KEY_MEDIA_PREV              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x1U))
#define M_KEY_MEDIA_STOP              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x2U))
#define M_KEY_MEDIA_PAUSE             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x3U))
#define M_KEY_MEDIA_MUTE              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x4U))
#define M_KEY_MEDIA_VOLUP             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x5U))
#define M_KEY_MEDIA_VOLDN             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x6U))
#define M_KEY_MEDIA_WWW_HOME          (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x7U))

#define M_KEY_FILE_EXPLORER           (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x8U))
#define M_KEY_MEDIA_CALC              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x9U))
#define M_KEY_MEDIA_BRIGHTNESS_D      (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xAU))
#define M_KEY_MEDIA_BRIGHTNESS_I      (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xBU))
#define M_KEY_MEDIA_WWW_STOP          (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xCU))
#define M_KEY_MEDIA_WWW_BACK          (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xDU))
#define M_KEY_CONSUMER_CTL            (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xEU))
#define M_KEY_MEDIA_EMAIL             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xFU))

#define STR_LEFT_CTRL "\x80"
#define STR_LEFT_SHIFT "\x81"
#define STR_LEFT_ALT "\x82"
#define STR_LEFT_GUI "\x83"
#define STR_RIGHT_CTRL "\x84"
#define STR_RIGHT_SHIFT "\x85"
#define STR_RIGHT_ALT "\x86"
#define STR_RIGHT_GUI "\x87"
#define STR_UP_ARROW "\x88"
#define STR_DOWN_ARROW "\x89"
#define STR_LEFT_ARROW "\x8a"
#define STR_RIGHT_ARROW "\x8b"
#define STR_BACKSPACE "\x8c"
#define STR_TAB "\x8d"
#define STR_RETURN "\x8e"
#define STR_ESC "\x8f"
#define STR_INSERT "\x90"
#define STR_PRTSC "\x91"
#define STR_DELETE "\x92"
#define STR_PAGE_UP "\x93"
#define STR_PAGE_DOWN "\x94"
#define STR_HOME "\x95"
#define STR_END "\x96"
#define STR_CAPS_LOCK "\x97"
#define STR_NUM_LOCK "\x98"
#define STR_F1 "\x99"
#define STR_F2 "\x9a"
#define STR_F3 "\x9b"
#define STR_F4 "\x9c"
#define STR_F5 "\x9d"
#define STR_F6 "\x9e"
#define STR_F7 "\x9f"
#define STR_F8 "\xa0"
#define STR_F9 "\xa1"
#define STR_F10 "\xa2"
#define STR_F11 "\xa3"
#define STR_F12 "\xa4"
#define STR_F13 "\xa5"
#define STR_F14 "\xa6"
#define STR_F15 "\xa7"
#define STR_F16 "\xa8"
#define STR_F17 "\xa9"
#define STR_F18 "\xaa"
#define STR_F19 "\xab"
#define STR_F20 "\xac"
#define STR_F21 "\xad"
#define STR_F22 "\xae"
#define STR_F23 "\xaf"
#define STR_F24 "\xb0"
#define STR_NUM_0 "\xb1"
#define STR_NUM_1 "\xb2"
#define STR_NUM_2 "\xb3"
#define STR_NUM_3 "\xb4"
#define STR_NUM_4 "\xb5"
#define STR_NUM_5 "\xb6"
#define STR_NUM_6 "\xb7"
#define STR_NUM_7 "\xb8"
#define STR_NUM_8 "\xb9"
#define STR_NUM_9 "\xba"
#define STR_NUM_SLASH "\xbb"
#define STR_NUM_ASTERISK "\xbc"
#define STR_NUM_MINUS "\xbd"
#define STR_NUM_PLUS "\xbe"
#define STR_NUM_ENTER "\xbf"
#define STR_NUM_PERIOD "\xc0"
#define STR_NUM_EQUAL "\xc1"
#define STR_MEDIA_NEXT "\xc2"
#define STR_MEDIA_PREV "\xc3"
#define STR_MEDIA_STOP "\xc4"
#define STR_MEDIA_PAUSE "\xc5"
#define STR_MEDIA_MUTE "\xc6"
#define STR_MEDIA_VOLUP "\xc7"
#define STR_MEDIA_VOLDN "\xc8"
#define STR_MEDIA_WWW_HOME "\xc9"
#define STR_FILE_EXPLORER "\xca"
#define STR_MEDIA_CALC "\xcb"
#define STR_MEDIA_BRIGHTNESS_D "\xcc"
#define STR_MEDIA_BRIGHTNESS_I "\xcd"
#define STR_MEDIA_WWW_STOP "\xce"
#define STR_MEDIA_WWW_BACK "\xcf"
#define STR_CONSUMER_CTL "\xd0"
#define STR_MEDIA_EMAIL "\xd1"

#define LED_NUMLOCK     0x01
#define LED_CAPSLOCK    0x02
#define LED_SCROLLLOCK  0x04
#define LED_COMPOSE     0x08
#define LED_KANA        0x10

//  Low level key report: up to 6 keys and shift, ctrl etc at once
typedef struct
{
  uint8_t modifiers;
  uint8_t reserved;
  uint8_t keys[62];
} KeyReport;

const uint32_t _asciimap[] =
{
    0x00U, // NUL
    0x00U, // SOH
    0x00U, // STX
    0x00U, // ETX
    0x00U, // EOT
    0x00U, // ENQ
    0x00U, // ACK
    0x00U, // BEL
    0x2aU, // BS    Backspace
    0x2bU, // TAB   Tab
    0x28U, // LF    Enter
    0x00U, // VT
    0x00U, // FF
    0x00U, // CR
    0x00U, // SO
    0x00U, // SI
    0x00U, // DEL
    0x00U, // DC1
    0x00U, // DC2
    0x00U, // DC3
    0x00U, // DC4
    0x00U, // NAK
    0x00U, // SYN
    0x00U, // ETB
    0x00U, // CAN
    0x00U, // EM
    0x00U, // SUB
    0x00U, // ESC
    0x00U, // FS
    0x00U, // GS
    0x00U, // RS
    0x00U, // US
    0x2cU,         //  ' '
    0x1eU | SHIFT, // !
    0x34U | SHIFT, // "
    0x20U | SHIFT, // #
    0x21U | SHIFT, // $
    0x22U | SHIFT, // %
    0x24U | SHIFT, // &
    0x34U,         // '
    0x26U | SHIFT, // (
    0x27U | SHIFT, // )
    0x25U | SHIFT, // *
    0x2eU | SHIFT, // +
    0x36U,         // ,
    0x2dU,         // -
    0x37U,         // .
    0x38U,         // /
    0x27U,         // 0
    0x1eU,         // 1
    0x1fU,         // 2
    0x20U,         // 3
    0x21U,         // 4
    0x22U,         // 5
    0x23U,         // 6
    0x24U,         // 7
    0x25U,         // 8
    0x26U,         // 9
    0x33U | SHIFT, // :
    0x33U,         // ;
    0x36U | SHIFT, // <
    0x2eU,         // =
    0x37U | SHIFT, // >
    0x38U | SHIFT, // ?
    0x1fU | SHIFT, // @
    0x04U | SHIFT, // A
    0x05U | SHIFT, // B
    0x06U | SHIFT, // C
    0x07U | SHIFT, // D
    0x08U | SHIFT, // E
    0x09U | SHIFT, // F
    0x0aU | SHIFT, // G
    0x0bU | SHIFT, // H
    0x0cU | SHIFT, // I
    0x0dU | SHIFT, // J
    0x0eU | SHIFT, // K
    0x0fU | SHIFT, // L
    0x10U | SHIFT, // M
    0x11U | SHIFT, // N
    0x12U | SHIFT, // O
    0x13U | SHIFT, // P
    0x14U | SHIFT, // Q
    0x15U | SHIFT, // R
    0x16U | SHIFT, // S
    0x17U | SHIFT, // T
    0x18U | SHIFT, // U
    0x19U | SHIFT, // V
    0x1aU | SHIFT, // W
    0x1bU | SHIFT, // X
    0x1cU | SHIFT, // Y
    0x1dU | SHIFT, // Z
    0x2fU,         // [
    0x31U,         // bslash
    0x30U,         // ]
    0x23U | SHIFT, // ^
    0x2dU | SHIFT, // _
    0x35U,         // `
    0x04U,         // a
    0x05U,         // b
    0x06U,         // c
    0x07U,         // d
    0x08U,         // e
    0x09U,         // f
    0x0aU,         // g
    0x0bU,         // h
    0x0cU,         // i
    0x0dU,         // j
    0x0eU,         // k
    0x0fU,         // l
    0x10U,         // m
    0x11U,         // n
    0x12U,         // o
    0x13U,         // p
    0x14U,         // q
    0x15U,         // r
    0x16U,         // s
    0x17U,         // t
    0x18U,         // u
    0x19U,         // v
    0x1aU,         // w
    0x1bU,         // x
    0x1cU,         // y
    0x1dU,         // z
    0x2fU | SHIFT, // {
    0x31U | SHIFT, // |
    0x30U | SHIFT, // }
    0x35U | SHIFT, // ~
    0x00U,         // DEL
    // MODIFIER
    M_KEY_LEFT_CTRL,
    M_KEY_LEFT_SHIFT,
    M_KEY_LEFT_ALT, 
    M_KEY_LEFT_GUI, 
    M_KEY_RIGHT_CTRL, 
    M_KEY_RIGHT_SHIFT, 
    M_KEY_RIGHT_ALT, 
    M_KEY_RIGHT_GUI, 
    // NONPRINT
    M_KEY_UP_ARROW,
    M_KEY_DOWN_ARROW,
    M_KEY_LEFT_ARROW,
    M_KEY_RIGHT_ARROW,
    M_KEY_BACKSPACE,
    M_KEY_TAB,
    M_KEY_RETURN,
    M_KEY_ESC,
    M_KEY_INSERT,
    M_KEY_PRTSC,
    M_KEY_DELETE,
    M_KEY_PAGE_UP,
    M_KEY_PAGE_DOWN,
    M_KEY_HOME,
    M_KEY_END,
    M_KEY_CAPS_LOCK,
    M_KEY_NUM_LOCK,

    // F Keys
    M_KEY_F1, 
    M_KEY_F2, 
    M_KEY_F3, 
    M_KEY_F4, 
    M_KEY_F5, 
    M_KEY_F6, 
    M_KEY_F7, 
    M_KEY_F8, 
    M_KEY_F9, 
    M_KEY_F10, 
    M_KEY_F11, 
    M_KEY_F12, 
    M_KEY_F13, 
    M_KEY_F14, 
    M_KEY_F15, 
    M_KEY_F16, 
    M_KEY_F17, 
    M_KEY_F18, 
    M_KEY_F19, 
    M_KEY_F20, 
    M_KEY_F21, 
    M_KEY_F22, 
    M_KEY_F23, 
    M_KEY_F24, 

    // KEYPAD
    M_KEY_NUM_0,
    M_KEY_NUM_1,
    M_KEY_NUM_2,
    M_KEY_NUM_3,
    M_KEY_NUM_4,
    M_KEY_NUM_5,
    M_KEY_NUM_6,
    M_KEY_NUM_7,
    M_KEY_NUM_8,
    M_KEY_NUM_9,
    M_KEY_NUM_SLASH,
    M_KEY_NUM_ASTERISK,
    M_KEY_NUM_MINUS,
    M_KEY_NUM_PLUS,
    M_KEY_NUM_ENTER,
    M_KEY_NUM_PERIOD,
    M_KEY_NUM_EQUAL,

    // // MEDIA 1
    // M_KEY_MEDIA_NEXT,
    // M_KEY_MEDIA_PREV, 
    // M_KEY_MEDIA_STOP, 
    // M_KEY_MEDIA_PAUSE, 
    // M_KEY_MEDIA_MUTE, 
    // M_KEY_MEDIA_VOLUP, 
    // M_KEY_MEDIA_VOLDN, 
    // M_KEY_MEDIA_WWW_HOME, 
    
    // // MEDIA 2
    // M_KEY_FILE_EXPLORER, 
    // M_KEY_MEDIA_CALC, 
    // M_KEY_MEDIA_BRIGHTNESS_D, 
    // M_KEY_MEDIA_BRIGHTNESS_I, 
    // M_KEY_MEDIA_WWW_STOP, 
    // M_KEY_MEDIA_WWW_BACK, 
    // M_KEY_CONSUMER_CTL, 
    // M_KEY_MEDIA_EMAIL, 
};

#include <stdio.h>

int main() {
    // char ch[] = STR_F5 STR_F6 STR_F7 STR_F10 STR_F11 STR_F12 "aezakmi" "hesoyam" "cvwkxam" "uzumymw" "vkypqcf" "worshipme" "helloladies" "toodamnhot" "fullclip" STR_ESC;
    char ch[] = \
    "KB ram 0" STR_ESC\
    "KB ram test" STR_ESC\
    "KB ram 1" STR_ESC\
    "KB ram test" STR_ESC\
    "KB ram 2" STR_ESC\
    "KB ram test" STR_ESC\
    "KB ram 3" STR_ESC\
    "KB ram test" STR_ESC\
    "KB ram 4" STR_ESC\
    "KB ram test" STR_ESC\
    "KB ram 5" STR_ESC\
    "KB ram test" STR_ESC\
    "KB ram 6" STR_ESC\
    "KB ram test" STR_ESC\
    "KB ram 7" STR_ESC\
    "KB ram test" STR_ESC;
    FILE* fp = fopen("new.txt", "wb");
    fwrite(ch, sizeof(ch), 1, fp);
}
[@file: file.py]
a = 480
frqs = [
    720,
    664,
    508,
    454
]
res = []
for _ in frqs: res.append([])
for i in range(18, 19):
    for j in range(12, 36):
        tmp = a*i/j
        for k in range(len(frqs)):
            if tmp >= round(frqs[k]) and tmp <= (round(frqs[k]) + 1):
                res[k].append((tmp, i, j))

sd = [
("(7UL << 29UL) | (0UL << 8UL)", "49.5 MHz"),
("(6UL << 29UL) | (0UL << 8UL)", "56.57143 MHz"),
("(5UL << 29UL) | (0UL << 8UL)", "66.0 MHz"),
("(7UL << 29UL) | (3UL << 8UL)", "66.0 MHz"),
("(6UL << 29UL) | (3UL << 8UL)", "75.428574 MHz"),
("(4UL << 29UL) | (0UL << 8UL)", "79.199997 MHz"),
("(7UL << 29UL) | (2UL << 8UL)", "83.077499 MHz"),
("(5UL << 29UL) | (3UL << 8UL)", "88.0 MHz"),
("(7UL << 29UL) | (1UL << 8UL)", "90.0 MHz"),
("(6UL << 29UL) | (2UL << 8UL)", "94.945717 MHz"),
("(3UL << 29UL) | (0UL << 8UL)", "99.0 MHz"),
("(6UL << 29UL) | (1UL << 8UL)", "102.85714 MHz"),
("(4UL << 29UL) | (3UL << 8UL)", "105.599998 MHz"),
("(5UL << 29UL) | (2UL << 8UL)", "110.769997 MHz"),
("(5UL << 29UL) | (1UL << 8UL)", "120.0 MHz"),
("(2UL << 29UL) | (0UL << 8UL)", "132.0 MHz"),
("(3UL << 29UL) | (3UL << 8UL)", "132.0 MHz"),
("(4UL << 29UL) | (2UL << 8UL)", "132.923996 MHz"),
("(4UL << 29UL) | (1UL << 8UL)", "144.0 MHz"),
("(3UL << 29UL) | (2UL << 8UL)", "166.154999 MHz"),
("(2UL << 29UL) | (3UL << 8UL)", "176.0 MHz"),
("(3UL << 29UL) | (1UL << 8UL)", "180.0 MHz (MAX for ESP-PSRAM64H)"),
("(1UL << 29UL) | (0UL << 8UL)", "198.0 MHz"),
("(2UL << 29UL) | (2UL << 8UL)", "221.539993 MHz"),
("(2UL << 29UL) | (1UL << 8UL)", "240.0 MHz"),
("(1UL << 29UL) | (3UL << 8UL)", "264.0 MHz"),
("(1UL << 29UL) | (2UL << 8UL)", "332.309998 MHz"),
("(1UL << 29UL) | (1UL << 8UL)", "360.0 MHz"),
("(0UL << 29UL) | (0UL << 8UL)", "396.0 MHz"),
("(0UL << 29UL) | (3UL << 8UL)", "528.0 MHz"),
("(0UL << 29UL) | (2UL << 8UL)", "664.619995 MHz"),
("(0UL << 29UL) | (1UL << 8UL)", "720.0 MHz")
]

for i in range(len(sd)):
    print(sd[i][0], f"// {i}. {sd[i][1]}")
[@file: file1.txt]
(7UL << 29UL) | (0UL << 8UL) // 0. 49.5 MHz
(6UL << 29UL) | (0UL << 8UL) // 1. 56.57143 MHz
(5UL << 29UL) | (0UL << 8UL) // 2. 66.0 MHz
(7UL << 29UL) | (3UL << 8UL) // 3. 66.0 MHz
(6UL << 29UL) | (3UL << 8UL) // 4. 75.428574 MHz
(4UL << 29UL) | (0UL << 8UL) // 5. 79.199997 MHz
(7UL << 29UL) | (2UL << 8UL) // 6. 83.077499 MHz
(5UL << 29UL) | (3UL << 8UL) // 7. 88.0 MHz
(7UL << 29UL) | (1UL << 8UL) // 8. 90.0 MHz
(6UL << 29UL) | (2UL << 8UL) // 9. 94.945717 MHz
(3UL << 29UL) | (0UL << 8UL) // 10. 99.0 MHz
(6UL << 29UL) | (1UL << 8UL) // 11. 102.85714 MHz
(4UL << 29UL) | (3UL << 8UL) // 12. 105.599998 MHz
(5UL << 29UL) | (2UL << 8UL) // 13. 110.769997 MHz
(5UL << 29UL) | (1UL << 8UL) // 14. 120.0 MHz
(2UL << 29UL) | (0UL << 8UL) // 15. 132.0 MHz
(3UL << 29UL) | (3UL << 8UL) // 16. 132.0 MHz
(4UL << 29UL) | (2UL << 8UL) // 17. 132.923996 MHz
(4UL << 29UL) | (1UL << 8UL) // 18. 144.0 MHz
(3UL << 29UL) | (2UL << 8UL) // 19. 166.154999 MHz
(2UL << 29UL) | (3UL << 8UL) // 20. 176.0 MHz
(3UL << 29UL) | (1UL << 8UL) // 21. 180.0 MHz (MAX for ESP-PSRAM64H)
(1UL << 29UL) | (0UL << 8UL) // 22. 198.0 MHz
(2UL << 29UL) | (2UL << 8UL) // 23. 221.539993 MHz
(2UL << 29UL) | (1UL << 8UL) // 24. 240.0 MHz
(1UL << 29UL) | (3UL << 8UL) // 25. 264.0 MHz
(1UL << 29UL) | (2UL << 8UL) // 26. 332.309998 MHz
(1UL << 29UL) | (1UL << 8UL) // 27. 360.0 MHz
(0UL << 29UL) | (0UL << 8UL) // 28. 396.0 MHz
(0UL << 29UL) | (3UL << 8UL) // 29. 528.0 MHz
(0UL << 29UL) | (2UL << 8UL) // 30. 664.619995 MHz
(0UL << 29UL) | (1UL << 8UL) // 31. 720.0 MHz

KB ram 0:     (30.8  MHz),    per_bytes: 60.976564, MB/s: 9.839846
KB ram 1:     (33.9  MHz),    per_bytes: 56.189805, MB/s: 10.678094
KB ram 2:     (35.2  MHz),    per_bytes: 54.088964, MB/s: 11.092836
KB ram 3:     (36.0  MHz),    per_bytes: 52.985105, MB/s: 11.323937
KB ram 4:     (38.7  MHz),    per_bytes: 49.185309, MB/s: 12.198764
KB ram 5:     (41.1  MHz),    per_bytes: 46.392587, MB/s: 12.933101
KB ram 6:     (41.1  MHz),    per_bytes: 46.392558, MB/s: 12.933109
KB ram 7:     (45.2  MHz),    per_bytes: 42.419322, MB/s: 14.144498
KB ram 0:     (49.5  MHz),    per_bytes: 39.623991, MB/s: 15.142341
KB ram 1:     (56.6  MHz),    per_bytes: 34.643385, MB/s: 17.319324
KB ram 2:     (66.0  MHz),    per_bytes: 30.009388, MB/s: 19.993743
KB ram 3:     (66.0  MHz),    per_bytes: 29.973628, MB/s: 20.017597
KB ram 4:     (75.4  MHz),    per_bytes: 26.348697, MB/s: 22.771524
KB ram 5:     (79.2  MHz),    per_bytes: 25.339239, MB/s: 23.678690
KB ram 6:     (83.1  MHz),    per_bytes: 24.286850, MB/s: 24.704727
KB ram 7:     (88.0  MHz),    per_bytes: 22.944839, MB/s: 26.149671
KB ram 8:     (90.0  MHz),    per_bytes: 22.438235, MB/s: 26.740071
KB ram 9:     (94.9  MHz),    per_bytes: 21.422368, MB/s: 28.008109
KB ram 10:    (99.0  MHz),    per_bytes: 20.747738, MB/s: 28.918815
KB ram 11:    (102.9 MHz),    per_bytes: 19.989192, MB/s: 30.016221
KB ram 12:    (105.6 MHz),    per_bytes: 19.605323, MB/s: 30.603934
KB ram 13:    (110.8 MHz),    per_bytes: 18.717328, MB/s: 32.055858
KB ram 14:    (120.0 MHz),    per_bytes: 17.439951, MB/s: 34.403766
KB ram 15:    (132.0 MHz),    per_bytes: 15.980623, MB/s: 37.545470
KB ram 16:    (132.0 MHz),    per_bytes: 15.991285, MB/s: 37.520437
KB ram 17:    (132.9 MHz),    per_bytes: 15.818480, MB/s: 37.930321
KB ram 18:    (144.0 MHz),    per_bytes: 14.504858, MB/s: 41.365451
KB ram 19:    (166.2 MHz),    per_bytes: 12.592710, MB/s: 47.646616
KB ram 20:    (176.0 MHz),    per_bytes: 11.848444, MB/s: 50.639563
KB ram 21:    (180.0 MHz),    per_bytes: 11.531907, MB/s: 52.029558
KB ram 22:    (198.0 MHz),    per_bytes: 10.701723, MB/s: 56.065738
KB ram 23:    (221.5 MHz),    per_bytes: 9.762527 , MB/s: 61.459500
KB ram 24:    (240.0 MHz),    per_bytes: 8.925637 , MB/s: 67.222091
KB ram 25:    (264.0 MHz),    per_bytes: 8.352914 , MB/s: 71.831217
KB ram 26:    (332.3 MHz),    per_bytes: 6.858916 , MB/s: 87.477382
KB ram 27:    (360.0 MHz),    per_bytes: 5.950275 , MB/s: 100.835669
KB ram 28:    (396.0 MHz),    per_bytes: 5.663282 , MB/s: 105.945626
KB ram 29:    (528.0 MHz),    per_bytes: 4.753071 , MB/s: 126.234180
KB ram 30:    (664.6 MHz),    per_bytes: 4.187002 , MB/s: 143.300618
KB ram 31:    (720.0 MHz),    per_bytes: 4.062057 , MB/s: 147.708397

[@file: new.txt]

[@file: platformio.ini]
; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:teensy41]
platform = teensy
board = teensy41
framework = arduino
build_flags = 
    -O3
    -D USB_SERIAL_HID

[@file: .git/config]
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/demitriaswilbert/Teensy-4.1-Keyboard.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
[user]
	name = demitriaswilbert
	email = demitriaswilbert@gmail.com

[@file: .git/description]
Unnamed repository; edit this file 'description' to name the repository.

[@file: .git/HEAD]
ref: refs/heads/main

[@file: .git/packed-refs]
# pack-refs with: peeled fully-peeled sorted 
5c3b00cca926713215dd39ed484a3d21d018029b refs/remotes/origin/main

[@file: .git/hooks/applypatch-msg.sample]
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

[@file: .git/hooks/commit-msg.sample]
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

[@file: .git/hooks/fsmonitor-watchman.sample]
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

[@file: .git/hooks/post-update.sample]
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

[@file: .git/hooks/pre-applypatch.sample]
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

[@file: .git/hooks/pre-commit.sample]
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

[@file: .git/hooks/pre-merge-commit.sample]
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

[@file: .git/hooks/pre-push.sample]
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

[@file: .git/hooks/pre-rebase.sample]
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

[@file: .git/hooks/pre-receive.sample]
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

[@file: .git/hooks/prepare-commit-msg.sample]
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

[@file: .git/hooks/push-to-checkout.sample]
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

[@file: .git/hooks/update.sample]
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

[@file: .git/info/exclude]
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

[@file: .git/logs/HEAD]
0000000000000000000000000000000000000000 5c3b00cca926713215dd39ed484a3d21d018029b unknown <User@DESKTOP-CKPK1SH.(none)> 1704212642 +0700	clone: from https://github.com/demitriaswilbert/Teensy-4.1-Keyboard.git

[@file: .git/logs/refs/heads/main]
0000000000000000000000000000000000000000 5c3b00cca926713215dd39ed484a3d21d018029b unknown <User@DESKTOP-CKPK1SH.(none)> 1704212642 +0700	clone: from https://github.com/demitriaswilbert/Teensy-4.1-Keyboard.git

[@file: .git/logs/refs/remotes/origin/HEAD]
0000000000000000000000000000000000000000 5c3b00cca926713215dd39ed484a3d21d018029b unknown <User@DESKTOP-CKPK1SH.(none)> 1704212642 +0700	clone: from https://github.com/demitriaswilbert/Teensy-4.1-Keyboard.git

[@file: .git/refs/heads/main]
5c3b00cca926713215dd39ed484a3d21d018029b

[@file: .git/refs/remotes/origin/HEAD]
ref: refs/remotes/origin/main

[@file: .pio/build/project.checksum]
f852fafbf0101f7379c5fdb54281d8226c47c4e1
[@file: .pio/build/teensy41/firmware.hex]
:0200000460009A
:100000004643464200000156000000000103030081
:1000100000000000000000000000000000000000E0
:1000200000000000000000000000000000000000D0
:1000300000000000000000000000000000000000C0
:1000400000000000010408000000000000000000A3
:100050000000800000000000000000000000000020
:100060000000000000000000000000000000000090
:100070000000000000000000000000000000000080
:10008000EB04180A063204260000000000000000FD
:10009000050404240000000000000000000000002F
:1000A0000000000000000000000000000000000050
:1000B0000604000000000000000000000000000036
:1000C0000000000000000000000000000000000030
:1000D00020041808000000000000000000000000DC
:1000E0000000000000000000000000000000000010
:1000F0000000000000000000000000000000000000
:10010000D8041808000000000000000000000000F3
:100110000204180804200000000000000000000095
:1001200000000000000000000000000000000000CF
:10013000600400000000000000000000000000005B
:1001400000000000000000000000000000000000AF
:10015000000000000000000000000000000000009F
:10016000000000000000000000000000000000008F
:10017000000000000000000000000000000000007F
:10018000000000000000000000000000000000006F
:10019000000000000000000000000000000000005F
:1001A000000000000000000000000000000000004F
:1001B000000000000000000000000000000000003F
:1001C000000100000010000001000000000000001D
:1001D000000001000000000000000000000000001E
:1001E000000000000000000000000000000000000F
:1001F00000000000000000000000000000000000FF
:10020000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
:10021000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
:10022000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDE
:10023000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE
:10024000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBE
:10025000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAE
:10026000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9E
:10027000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8E
:10028000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7E
:10029000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6E
:1002A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5E
:1002B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E
:1002C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3E
:1002D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2E
:1002E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1E
:1002F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0E
:10030000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
:10031000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED
:10032000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
:10033000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
:10034000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBD
:10035000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAD
:10036000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9D
:10037000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8D
:10038000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7D
:10039000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6D
:1003A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D
:1003B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4D
:1003C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3D
:1003D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2D
:1003E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1D
:1003F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0D
:10040000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
:10041000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
:10042000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
:10043000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
:10044000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
:10045000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAC
:10046000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9C
:10047000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C
:10048000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7C
:10049000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C
:1004A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5C
:1004B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4C
:1004C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C
:1004D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2C
:1004E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1C
:1004F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0C
:10050000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
:10051000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEB
:10052000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDB
:10053000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCB
:10054000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
:10055000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
:10056000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9B
:10057000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8B
:10058000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7B
:10059000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6B
:1005A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5B
:1005B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4B
:1005C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3B
:1005D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2B
:1005E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1B
:1005F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0B
:10060000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
:10061000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA
:10062000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA
:10063000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA
:10064000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA
:10065000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
:10066000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A
:10067000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A
:10068000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A
:10069000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A
:1006A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A
:1006B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A
:1006C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A
:1006D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A
:1006E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A
:1006F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A
:10070000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9
:10071000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9
:10072000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9
:10073000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9
:10074000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9
:10075000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9
:10076000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99
:10077000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89
:10078000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79
:10079000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69
:1007A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59
:1007B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49
:1007C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39
:1007D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29
:1007E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF19
:1007F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09
:10080000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
:10081000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
:10082000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
:10083000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC8
:10084000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB8
:10085000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8
:10086000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
:10087000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF88
:10088000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF78
:10089000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF68
:1008A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF58
:1008B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF48
:1008C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF38
:1008D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF28
:1008E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF18
:1008F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF08
:10090000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7
:10091000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
:10092000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7
:10093000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7
:10094000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB7
:10095000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA7
:10096000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF97
:10097000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87
:10098000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF77
:10099000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF67
:1009A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF57
:1009B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF47
:1009C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF37
:1009D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27
:1009E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF17
:1009F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF07
:100A0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6
:100A1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE6
:100A2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6
:100A3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC6
:100A4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB6
:100A5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA6
:100A6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF96
:100A7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF86
:100A8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF76
:100A9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF66
:100AA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF56
:100AB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF46
:100AC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF36
:100AD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF26
:100AE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16
:100AF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF06
:100B0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5
:100B1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5
:100B2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD5
:100B3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC5
:100B4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB5
:100B5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA5
:100B6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF95
:100B7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF85
:100B8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF75
:100B9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF65
:100BA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF55
:100BB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF45
:100BC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF35
:100BD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF25
:100BE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF15
:100BF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF05
:100C0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4
:100C1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
:100C2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
:100C3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4
:100C4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB4
:100C5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA4
:100C6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF94
:100C7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF84
:100C8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF74
:100C9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF64
:100CA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF54
:100CB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF44
:100CC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF34
:100CD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF24
:100CE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF14
:100CF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF04
:100D0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3
:100D1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE3
:100D2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD3
:100D3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3
:100D4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3
:100D5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3
:100D6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93
:100D7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83
:100D8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF73
:100D9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF63
:100DA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF53
:100DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43
:100DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33
:100DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF23
:100DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF13
:100DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03
:100E0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2
:100E1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE2
:100E2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD2
:100E3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC2
:100E4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB2
:100E5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA2
:100E6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF92
:100E7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF82
:100E8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF72
:100E9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF62
:100EA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF52
:100EB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF42
:100EC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF32
:100ED000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF22
:100EE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF12
:100EF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02
:100F0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
:100F1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
:100F2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1
:100F3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1
:100F4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB1
:100F5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA1
:100F6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF91
:100F7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81
:100F8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71
:100F9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF61
:100FA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF51
:100FB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF41
:100FC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF31
:100FD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF21
:100FE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF11
:100FF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
:10100000D10020432914006000000000000000000F
:10101000201000600010006000640160000000000B
:10102000000000600070010000000000FFFFFFFFF3
:10103000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
:10104000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB0
:10105000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
:10106000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90
:10107000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
:10108000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF70
:10109000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF60
:1010A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF50
:1010B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF40
:1010C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30
:1010D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF20
:1010E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10
:1010F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
:10110000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF
:10111000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF
:10112000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF
:10113000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBF
:10114000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAF
:10115000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9F
:10116000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8F
:10117000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7F
:10118000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6F
:10119000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
:1011A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4F
:1011B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F
:1011C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2F
:1011D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1F
:1011E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
:1011F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
:10120000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
:10121000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDE
:10122000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE
:10123000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBE
:10124000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAE
:10125000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9E
:10126000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8E
:10127000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7E
:10128000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6E
:10129000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5E
:1012A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E
:1012B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3E
:1012C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2E
:1012D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1E
:1012E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0E
:1012F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
:10130000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED
:10131000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
:10132000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
:10133000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBD
:10134000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAD
:10135000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9D
:10136000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8D
:10137000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7D
:10138000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6D
:10139000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D
:1013A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4D
:1013B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3D
:1013C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2D
:1013D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1D
:1013E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0D
:1013F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
:10140000884207D0904205D251F8043B40F8043B93
:101410008242F9D8704700BF884204D2002340F8C6
:10142000043B8142FBD87047664B4FF42A01664A61
:1014300066482DE9F0475A641864654A99639546F1
:10144000BFF34F8FBFF36F8F00F0EAFE614B0820B0
:10145000614A6249C3F854016148FFF7D1FF614A0C
:1014600061496248FFF7CCFF61496248FFF7D4FF4A
:10147000614C62494FF470000023614A086044F8EF
:1014800023200133B02BFAD15E4B80215E4A03F852
:10149000011B9342FBD14F4D4FF080385B494FF019
:1014A000FF325B4B0026DFF8A4A1DFF8A4911C609B
:1014B000C5F80481C5F800A1C5F8F480C5F8F0901E
:1014C0000B68544F43F4E0230B60FB693D4923F064
:1014D0007F0343F04003FB617B6A23F07F0343F00B
:1014E00040037B628A66CA660A674A6700F09EFE0E
:1014F000494A4A4B6320A2630321E363484A494BAC
:10150000106000F160401E6042F8041C00F6A170FB
:101510004549464AC3F8082D0B68454A43F0807395
:101520000B601368434943F00103136003680B60C9
:1015300001F0CCF8C5F804813F48C5F800A1C5F812
:10154000F480C5F8F09001F057FAF96E3B4A41F487
:1015500040513B4BF9661660C2F80861C2F8186149
:10156000C2F82861C2F838619A6BD20708D442F6F3
:101570001562344959651A659A6B42F001029A6303
:101580002F4A314C936843F00113936000F0C0FE82
:1015900001F0FCF901F040FA01F0CAF800F042FE57
:1015A0002368132BFCD901F051F92368B3F5967F1A
:1015B000FBD300F039FE01F05FFA01F069FA30BFA9
:1015C000FDE700BF00C00A40BFAAAAAA070020008A
:1015D0000080062000800D40080E0100BC2E006037
:1015E00000000000C0260020C83C01600000002070
:1015F00060360020C02600200024002088ED00E096
:1016000001A0000000E400E0A0E400E024ED00E020
:1016100008ED00E000C00F40ADB90000B1B9000016
:1016200014E000E018E000E0FCED00E00000202005
:10163000001000E0783500200046C3230040084039
:1016400000400D400000C0567C3500201B101820C3
:101650000C0D1113437970B5044600F108059BB9D0
:1016600004F180062846314601F0EEF9002809DB36
:101670003146284601F0FCF9002803DB0123184617
:10168000637170BD002070BD284601F0E9F90023A8
:101690006371E5E7F0B50B460446002583B0C0F85A
:1016A000CC200121184684F8D030257101F0C8F90A
:1016B000012194F8D00001F0BBF9D4F8CC0001F07E
:1016C0009FF9D4F8CC209F218DF80550D37C8DF85C
:1016D00006508DF807508DF80410002B2BD072B6F1
:1016E000D37CDE0708D501F1E0215369E1310868B8
:1016F000034093620B60D37C9D0706D586499369AE
:1017000008680340D3620B60D37C580706D5834931
:10171000D3690868034013630B60D37C190706D5AF
:101720007F49136A0868034053630B60D37CDF066C
:1017300000F1CD8062B67B4D9368AB4200F0D7805C
:10174000794B95609B697948C3F30117C3F38261B4
:10175000774E50F827000131B0FBF1F1CB09A6FB21
:1017600003039B0A40F0AA80D3601268002107207F
:10177000012503261161566213641066156194F801
:10178000D00001F05DF90423D4F8CC000DEB030286
:10179000114601F061F9294694F8D00001F050F9A2
:1017A000D4F8CC20D37CE3B1DE0703D5614B916A3A
:1017B0001960D37C9D0703D55F4BD16A1960D37C38
:1017C000580703D55D4B116B1960D37C190703D5FE
:1017D0005B4B516B1960D37CDB0602D5926B594B86
:1017E0001A60594D00229DF805002B469DF80660B1
:1017F0009DF8077003E001321C33152A5BD019787D
:101800008142F8D15978B142F5D19978B942F2D1F3
:10181000C2EBC20215EB82057BD004F1080604F18D
:10182000800778220021304601F0E2F84C220021A6
:10183000384601F0DDF8AB88A8684FF4C8712A6912
:101840004FF0010EC4F89430C4F89830C4F8A830B2
:10185000C4F8AC302723C4F89C00C4F8BC30C4F8EA
:10186000A4103946C4F88040B2FBF0F3374A304642
:10187000C4F8A030364BC4F88420C4F88C30354A04
:10188000354BC4F88820C4F89030EB7884F8D13018
:10189000AB696A69C4F8D830C4F8D4202B7B84F8CB
:1018A00004E084F8D23001F0E3F8002821DB0120C5
:1018B000607103B0F0BD002003B0F0BDB1FBF3F1E7
:1018C000A94288BF0133022B08D800234CE72349E3
:1018D000536A0868034093630B602BE7023B580888
:1018E000010443EA002301F47F010B433CE7D36882
:1018F0003BE73946304601F0A7F8002805DB3946BA
:10190000304601F0B5F80028D1DA0020C4F8CC0048
:10191000D2E72846D0E700BF84E100E088E100E09C
:101920008CE100E080C3C90100C00F40B80A00206C
:10193000C7541E0100E100E004E100E008E100E01E
:101940000CE100E010E100E0BC2A0060454100002D
:10195000E947000069450000DD3A000090E100E041
:10196000F0B50B4604460025C0F8CC2085B01846DB
:1019700084F8D0300121257101F062F8012194F83A
:10198000D00001F055F8D4F8CC0001F039F864200B
:1019900001F06AF8D4F8CC20D37C002B29D072B6A1
:1019A000D37CDD0706D5B2495369086803409362CA
:1019B0000B60D37C980706D5AE499369086803404D
:1019C000D3620B60D37C590706D5AB49D36908684D
:1019D000034013630B60D37C1F0706D5A749136A26
:1019E0000868034053630B60D37CDE0600F1F88087
:1019F00062B6A34D9368AB4200F00D81A14B956098
:101A00009B69A148C3F30117C3F382619F4E50F84D
:101A100027000131B0FBF1F1CB09A6FB03039B0AC0
:101A200040F0D580D36012680021072501200326ED
:101A30001161566213641566106194F8D00000F0CD
:101A4000FFFF934A934932230D681068924A000CB5
:101A500003FB00F35B08A2FB0332120A0B685B1B5B
:101A60009A42FBD8D4F8CC609F2332685366D36D7A
:101A700013F4F81FFBD0536F0DF1030103AD0020E9
:101A80005066D36D13F4F81FFBD0536F01F8013F7C
:101A9000A942F5D194F8D030804A1B01D118D3580F
:101AA000CA68C3F88420F37CE3B1DD0703D57C4B1F
:101AB000B26A1A60F37C980703D57A4BF26A1A600F
:101AC000F37C590703D5784B326B1A60F37C1A0705
:101AD00003D5764B726B1A60F37CDB0602D5B26BD2
:101AE000734B1A609DF804007F2800F08980714DC7
:101AF00000229DF805602B469DF8067003E0013238
:101B00001C33152A60D019788142F8D15978B14236
:101B1000F5D19978B942F2D1C2EBC20215EB820538
:101B200000F0A38004F1080604F180077822002168
:101B3000304600F05DFF4C220021384600F058FF8F
:101B4000AB88A8684FF4C8712A694FF0010EC4F839
:101B50009430C4F89830C4F8A830C4F8AC302723C7
:101B6000C4F89C00C4F8BC30C4F8A4102221C4F806
:101B70008040B2FBF0F3504AC4F8A0304F4BC4F899
:101B80008420C4F888304E4A4E4BC4F88C20C4F8E8
:101B90009030EB784C4884F8D1306B69AA69C4F86E
:101BA000D430C4F8D82084F804E000F06DFF474832
:101BB00000F02AFF3946304600F05AFF00282CDB9F
:101BC0000120607105B0F0BD002005B0F0BDB1FB93
:101BD000F3F1A94288BF0133022B08D8002321E783
:101BE0003B49536A0868034093630B6000E7023B7C
:101BF0005808010443EA002301F47F010B4311E775
:101C00009DF80B209DF80C309DF80A008DF80520FA
:101C10008DF806306BE7D36805E729212D4800F0E1
:101C200033FF2A4800F0F0FE3946304600F00CFF42
:101C3000002817DB2B21284800F026FF234800F05E
:101C4000E3FE3946304600F013FF0028B8DA1C21C5
:101C5000224800F019FF1D4800F0D6FE0020C4F80D
:101C6000CC00B2E710211E48F3E72846ADE700BFDD
:101C700080E100E084E100E088E100E08CE100E048
:101C800080C3C90100C00F40B80A0020C7541E011C
:101C9000481B0020041000E011239708EC0B0020E3
:101CA00000E100E004E100E008E100E00CE100E018
:101CB00010E100E0BC2A0060E1490000494C00004E
:101CC0009D4C0000E13A0000001500209C1B002004
:101CD00090E100E024150020501500207C15002024
:101CE00088150020037903B1B4E41846704700BF9B
:101CF0002DE9F84F037913B90020BDE8F88FD0F82B
:101D0000A08005460E4601214FEAD800144608443B
:101D100000F0C6FE07460028EED0D5F8940000F08B
:101D2000AFFE8246002855D0B8F1000F05D02C49EF
:101D300000222C4BC1F800801A603A462A4905F16E
:101D4000080000F06DFE002823DB5EB3D5F8A0107C
:101D5000A1421ED94FF000084FF0010905F1800B98
:101D600004E00134A14214D9B04522D2E20804F0C3
:101D70000703BA5C09FA03F31340F2D15246214635
:101D8000584600F065FEE8B1D5F8A0100134A14234
:101D9000EAD8384600F050FE504600F04DFE0020D4
:101DA000BDE8F88FD5F8A060B4423146F1D2002EDC
:101DB000D0D1384600F040FE504600F03DFE2046AF
:101DC000BDE8F88FD5F88C302146584608F1010857
:101DD0009847D9E7384600F02FFE5046BDE8F88F07
:101DE000A42B0020A82B0020C93C00002DE9F84FAF
:101DF0000379002B3ED0437992468B460546002B53
:101E000053D1D5F8A0402C4ED5F89400A6FB04364B
:101E100000F036FE8046B6090CB3BAF1000F18BFC9
:101E2000BBF1000F05F180074FF0000414BF4FF025
:101E300001094FF00009B9F1000F04D0B4FBF6F32B
:101E400006FB1343FBB1012342462146384600F00E
:101E5000FFFD90B10134D5F8A030A342EBD8404645
:101E600000F0EAFDBAF1000F02D0BBF1000F11D172
:101E70002B79ABB90020BDE8F88FD5F88C3021461E
:101E800038469847E6E7DAF80030594650461B686E
:101E90009847D8E7504600F0B7FD2B79002BE9D0E2
:101EA0002846BDE8F84FFFF7D5BB083000F0D8FD55
:101EB00000236B71A5E700BF898888882DE9F04170
:101EC00082B00024874E054602AADFF834E20220E1
:101ED000854F42F8044D03232C714FF40001C6F8DE
:101EE00018E0F0610820C6F88072804FC6F884427E
:101EF00000F0D2FD22469DF804003B469DF80540C7
:101F00009DF8066004E001321C33152A00F0CC80F5
:101F100019788142F7D15978A142F4D19978B14228
:101F2000F1D1C2EBC20217EB820700F0BD8005F1D0
:101F3000080405F180067822002120464FF40008AD
:101F400000F056FD4C220021304600F051FDBB88C8
:101F5000B9684FF4C8703A694FF0020EC5F8943072
:101F60004FF48A6CC5F89830C5F8A830C5F8AC3085
:101F70002723C5F89C10C5F8BC30C5F8A400012083
:101F8000C5F88050B2FBF1F3594AC5F8A030594B5F
:101F9000C5F88420C5F88830574A584BC5F88C20BE
:101FA000C5F89030FB7885F8CC303B6979699A0A9E
:101FB0004C4BC5F8D010B9692871C5F8D4104FF44E
:101FC00020215A664E4A9A611A46C3F81CE0C3F8AB
:101FD000A0C2C3F8A080C3F8A410C3F8B00053692E
:101FE0004049D807FBD51B0701D508234B613D4B62
:101FF00001214448002259614FF4000EC3F8A002A9
:102000004FF42020C3F8A4221A46C3F8A0E0C3F876
:10201000A400C3F8B01053693249D807FBD51B0799
:1020200001D508234B6101222E4B5A6195F8CC2033
:10203000182A3DD034480021DFF8E4E042F20122C2
:10204000C3F890E2C3F894023048C3F89812C3F87A
:10205000B002C3F8B4222E4A387B0243C3F8C02230
:10206000C3F8C4121F4B40F206412A480022C3F8AD
:10207000A0123146C3F8D0022046C3F8D42200F0A3
:10208000F7FC002804DB0120687102B0BDE8F08194
:102090003146204600F0D8FC002805DB31462046BA
:1020A00000F0E6FC0028EEDA002002B0BDE8F08186
:1020B00015480021DFF86CE042F20122C3F890E2FB
:1020C000C3F894021448C3F89812C3F8B002C3F8D6
:1020D000B422124A387B0243C3F8C022C3F8C412A8
:1020E000C0E700BF00402A409F040124BC2A0060D2
:1020F000E53B0000A94D00005D4E0000E53A000000
:10210000F05AF05A3104020408320126340420083F
:1021100000042008050401243204180800041808EB
:102120006C0420086B0418084FF6FF732DE9F04784
:102130000B44334C0027334E1C40077137603CB1D1
:10214000314BB3F5F80F03D2C3F5F8039C4202D923
:102150000020BDE8F087DFF8BCA000F1080800F11E
:1021600080090546C4EB0A0A394678224046C6F87B
:1021700000A000F03DFC39464C224846240C00F0FB
:1021800037FC224EDFF890E08023214A4FF480375D
:10219000C5F8A0402724C5F884E04946C5F8886002
:1021A0004FF44876C5F88C200122DFF870E04046F5
:1021B000C5F880A0C5F89430C5F890E0C5F898300F
:1021C000C5F8A830C5F8AC30C5F89C70C5F8A46057
:1021D000C5F8BC402A7100F04BFC002803DB01204D
:1021E0006871BDE8F0874946404600F02DFC0028A4
:1021F000AEDB4946404600F03BFC0028EFDAA7E79B
:102200000000FFFF402B002000700100953C000003
:10221000B13C000000007C60793C0000E93A00001D
:10222000704700BF704700BF704700BFF0B5244A39
:102230000020244B4FF0100C234C1126DFF8C8E08F
:10224000122720600125C2F800C0C3F800E0166024
:10225000DFF8B8E01D4EC3F800E01D4917601E60AE
:1022600041F015011B4F1C4E17601E601B4F1C4E8A
:1022700017601E601B4F11601B4E1C491F601660CB
:102280001B4F19601B4E1C4917601E601B4F1160CD
:102290001B4E1C491F60166019602560BFF34F8FED
:1022A000BFF36F8FC3F8B001BFF34F8FBFF36F8FD2
:1022B00052F8883C43F4403342F8883CF0BD00BFFC
:1022C0009CED00E0A0ED00E094ED00E009001000BE
:1022D00060360020130020002100020714000020B7
:1022E00025000813090000101600202027000B13FA
:1022F0001700004033001013180000602F000B0778
:10230000190000702F000B133F0000102500080378
:10231000F0B58D4B18228D4E01208D4948F20C7E70
:102320008C4D4FF0FF378C4C83B0C3F85C12C3F870
:1023300060520025C3F86412C3F868424FF4005499
:10234000C3F86C628549C3F87062C3F87462C3F85D
:102350007862834EDA661A675A679A67DA67C3F853
:102360008020C3F88420C3F8882040F20562C1F8B9
:102370002C03C1F83003C1F83403C1F83803C1F8A5
:102380003C03C1F850032946B36976481840764BA0
:1023900003437648B361D6F8843043F00C03C6F8A3
:1023A00084300226036833430360036803EA0E0E99
:1023B0006F4B4EEA0303DFF8F0E103606D4B4760BB
:1023C000DEF808703B406C4F43F000538360C368F5
:1023D00023F07803C360036A1F40684B3B43664F9A
:1023E0000362036A1F40654B3B43654F436287624C
:1023F000C762DEF8B830634F23F03F0343F00103B8
:10240000C0F8B830DEF8BC30DFF884E123F03F03D9
:1024100043F00103C0F8BC30056104660767C0F8EB
:10242000802044664767C0F884200468564B24F037
:102430000204564A0460C0F818E0C66143F8041B61
:102440009342FBD1494B1A68194642F001021A60C7
:102450000B68464A13F00103FAD14D4E022540F2B3
:10246000F56440F2664040F299414A4F966142F26B
:102470000146D56140F23545C2F8004242F20124DE
:10248000C2F810020120C2F820121146C2F83072C0
:1024900007F15A47C2F8346207F51377C2F8405281
:1024A0003D4E3E4DC2F85072C2F85462C2F86052BE
:1024B000C2F86442C2F8A030C2F8A430C2F8B0003A
:1024C0004B692A4ADD07FBD5012300244FF48030F5
:1024D00011465361C2F8A040C2F8A400C2F8B0305F
:1024E0004B69224ADC07FBD5012300244FF400305E
:1024F00011465361C2F8A040C2F8A400C2F8B0303F
:102500004B691A4AD807FBD50123002424481146F9
:102510005361C2F8A040C2F8A400C2F8B0304B69C1
:10252000124ADB07FBD5D2F8003145F60D512120C8
:102530009BB250618B4239D01A4B00221A605A600C
:102540009A60DA6003B0F0BD00801F40F9700100AE
:10255000F9B00100F9100100F900010000841F40EA
:1025600000C00F40FFFCFF1F000300A000402A40F6
:102570001200FFFFFF37F70000FFF07C40000080F3
:10258000FF000F836300020000422A4000432A40FC
:10259000F05AF05A9F041830063201263806180AFD
:1025A000040003001436002000802A4000244FF469
:1025B000802001231146C2F8A040C2F8A400C2F84E
:1025C000B0304B693B4ADF07FBD501234FF40004D1
:1025D000002011465361C2F8A040C2F8A400C2F81E
:1025E000B0304B69334ADE07FBD501234FF40004BA
:1025F0004FF4803011465361C2F8A040C2F8A400E5
:10260000C2F8B0304B692B4ADD07FBD501234FF4EC
:1026100000044FF4003011465361C2F8A040C2F8E4
:10262000A400C2F8B0304B69224ADC07FBD5012375
:102630004FF40004204811465361C2F8A040C2F88C
:10264000A400C2F8B0304B691A4AD807FBD5D2F8BB
:10265000003145F60D5121209BB250618B4210D0C4
:10266000164B08224FF400041A7015490020154A31
:1026700001230090521A1448224400F0C9F903B013
:10268000F0BD4FF400044FF4802101231046C2F83E
:10269000A040C2F8A410C2F8B03043690549DB0776
:1026A000FBD50120054B10224FF0807448611A7051
:1026B000DBE700BF00402A4004000300AA350020E9
:1026C000000078700000007014360020F0B4174A43
:1026D00040274FF480314FF480564FF400554FF4AB
:1026E000404443F24200136913F0020F06D0946194
:1026F00051619061136913F0020FF8D113F4005F78
:1027000001D15561EFE713F4805F01D15661EAE72B
:10271000002BE8DA13F4803F01D09161E3E75B0618
:1027200001D45761DFE7F0BC704700BF00800D4067
:10273000394A03203949F3EE095A13689FED386A84
:1027400023F00103DFED376AF0B413600024106159
:10275000D1F8E030344FD8B2C3F30B211B0D334E08
:1027600007EE100A05EE101A07EE903A304BB8EE5D
:10277000C55A304DB8EEC77A3060F8EEE77A296076
:102780002D4937EE466A2D4E77EEC57A2C4877EE06
:10279000666A2C4D37EE657A26EE276AC7ED007A19
:1027A00066EEA76A176867EE277A83ED007AC6EEB1
:1027B000075A86EE876AC7EE876A35EE857AFCEEA1
:1027C000C77A36EE057A17EE903ABCEEC77A47EA3A
:1027D000035376EE857A136017EE103AD2F8107133
:1027E000FCEEE77A01EA0341394317EE903AC2F86A
:1027F0001011C3F30B03D2F810110B43C2F81031C0
:10280000136843F0020313603470C0F840510E4B5C
:102810000122F0BC1A60704780810D4000441F40C7
:102820000000AA420000B442703500206835002044
:102830006C350020643500200000FF0F40E400E00C
:1028400000240020C1A1000008E100E0304B40F668
:10285000617270B5C3F8202140F2044500F0E4F83D
:102860002C492D48D1F880202C4C42F003022C4BEF
:10287000C1F88020C0F86051226813401BB9D0F81D
:10288000A8319A071AD0244B4FF00041234A5163D4
:102890001A46D3F8401141F00201C3F84011D2F8B2
:1028A00040319B07FBD44FF400301E491B4B4FF0C7
:1028B0000042086019209A6300F0D6F81A4D0022F1
:1028C000164B4FF08041144C0A26996328461A6033
:1028D0001146C4F8A8614FF4806200F089F84FF403
:1028E000810640F243114FF48000104B104A2E60D5
:1028F0002864C4F85851C4F84811C3F804220D4A9A
:102900004FF4003101231160C4F8403170BD00BFA5
:1029100000800D4000C00F4000002E4000900D4090
:10292000001C1E008CE200E00000002000240020BB
:1029300035A400000CE100E008B50E4B1B6E9B07B0
:1029400000D4FBBE72B60C4B00200C4AC3F8400109
:1029500003F160430A49A3F55F2311649D46BFF369
:102960004F8F084A03F5E04307491268184619607B
:102970009368984700441F4000002E4000C00A4062
:10298000030020001C002000000012EB114B124934
:10299000D86E0A4640F4403030B4D86640F237650D
:1029A000D86EA02440F44070D8664D648C64936C5B
:1029B0001B06FCD4094B40F23760A0211A4658642C
:1029C0009964936C13F08003FBD1054A137030BCFB
:1029D000704700BF00C00F4000400C4000800C401A
:1029E000A9350020F8B500BFF8BC08BC9E4670476A
:1029F0005FF800F005CC00005FF800F041910000A6
:102A00005FF800F00DBB00005FF800F05D8E000085
:102A10005FF800F0A53600005FF800F0F99C0000B8
:102A20005FF800F0898B00005FF800F0B9AB0000A0
:102A30005FF800F08D9500005FF800F02DC50000F4
:102A40005FF800F0819500005FF800F0D97E00008B
:102A50005FF800F0053C00005FF800F03DBD0000AD
:102A60005FF800F0098100005FF800F005940000B5
:102A70005FF800F0B57F00005FF800F085C400004B
:102A80005FF800F01DC500005FF800F0D1B600004F
:102A90005FF800F0F99700005FF800F0ED3A0000F1
:102AA0005FF800F0FDC3000045000000411D00007C
:0C2AB000F1260000DD2D000025340000A0
:102ABC00EF401518000100000080000052000000DB
:102ACC0000002000B80B0000006A1800EF40161838
:102ADC0000010000008000005200000000004000D7
:102AEC00B80B0000006A1800EF4017180001000036
:102AFC0000000100D800000000008000B80B0000AE
:102B0C0080841E00EF401818000100000000010036
:102B1C00D800000000000001B80B000080841E00EB
:102B2C00EF4019200001000000000100DC00000053
:102B3C0000000002B80B000080841E00EF40202033
:102B4C000001000000000100DC0000000000000497
:102B5C00AC0D000080841E00EF402120000100001D
:102B6C0000000100DC00000000000008AC0D0000BB
:102B7C0080841E00EF701718000100000000010097
:102B8C00D800000000008000B80B000080841E00FC
:102B9C00EF7018180001000000000100D8000000C0
:102BAC0000000001B80B000080841E00EF7019209B
:102BBC000001000000000100DC0000000000000229
:102BCC00B80B000080841E00EF7020200001000074
:102BDC0000000100DC00000000000004AC0D00004F
:102BEC0080841E001F8401180001000000100000EA
:102BFC002000000000000800C4090000E09304005D
:102C0C00014014180001000000100000200000001A
:102C1C000000100088130000E0930400032EC2187B
:102C2C0040000000800000000000000000001000C8
:102C3C00FA000000B0040000C2240018400000009C
:102C4C00800000000000000000000200FA000000FC
:102C5C00B0040000C22401184000000080000000F5
:102C6C000000000000000200FA000000B0040000A8
:102C7C00AE83091840000000800000000000000036
:102C8C0000000200FA000000B0040000C226081880
:102C9C004000000080000000000000000000080060
:102CAC00FA000000B0040000602AC21840000000C6
:102CBC00800000000000000000000400FA0000008A
:102CCC00B0040000602AC218400000008000000020
:102CDC000000000000000400FA000000B004000036
:102CEC00047F481840000000800000000000000035
:102CFC0000000400FA000000B00400002A034400A5
:102D0C0065007700650020005500530042002D003F
:102D1C004800530020004B006500790062006F00F2
:102D2C006100720064000000180344006500770025
:102D3C0065002700730020004E00750074007300BE
:102D4C00040309040902AF00060100C032080B009D
:102D5C000202020100090400000102020100052424
:102D6C0000100105240101010424020605240600BB
:102D7C000107058203FF001009040100020A00008C
:102D8C000007050302000200070583020002000988
:102D9C000402000103010100092111010001223F7D
:102DAC00000705840340000109040300010300002F
:102DBC0000092111010001225400070586030800B7
:102DCC0001090404000103000000092111010001A4
:102DDC00225500070587030C0001090405000103B7
:102DEC0000000009211101000122280007058503BC
:102DFC00080004000902AF00060100C032080B00F5
:102E0C000202020100090400000102020100052473
:102E1C00001001052401010104240206052406000A
:102E2C000107058203FF000509040100020A0000E6
:102E3C0000070503020004000705830200040009D3
:102E4C000402000103010100092111010001223FCC
:102E5C00000705840340000109040300010300007E
:102E6C000009211101000122540007058603080006
:102E7C0001090404000103000000092111010001F3
:102E8C00225500070587030C000109040500010306
:102E9C00000000092111010001222800070585030B
:102EAC00080004000A060002EF02014001000100C4
:102EBC000000000000000000000000000000000006
:102ECC0000000000000000000000000000000000F6
:102EDC0010B5054C237833B9044B13B10448AFF348
:102EEC0000800123237010BDE82A002000000000A0
:102EFC00040E0100084B10B51BB108490848AFF38C
:102F0C0000800848036803B910BD074B002BFBD0A9
:102F1C00BDE81040184700BF00000000EC2A00205C
:102F2C00040E0100C02600200000000010B504466D
:102F3C00006803F02FFA204610BD00BF38B5436877
:102F4C008B4201D3012038BD0D4604460131006887
:102F5C0003F056FB0028F6D0A36884E82100002B70
:102F6C00F0D10370EEE700BFF8B50446154632B950
:102F7C00036803B11A700023A3602046F8BD0E4607
:102F8C001146FFF7DBFF074648B9206810B103F084
:102F9C0001FA2760002320466360A360F8BDA5609A
:102FAC00314620680DF0A2FCE7E700BF38B50023DE
:102FBC000446036043608360037341B10D460846C9
:102FCC000DF036FD024629462046FFF7CDFF204680
:102FDC0038BD00BF38B50C46054608460DF028FD37
:102FEC00214602462846BDE83840FFF7BDBF00BF6A
:102FFC00814210D038B5054600680C4608B103F084
:10300C00C9F9002320686168A26885E8070023607D
:10301C006360A36038BD704710B5044619B1FFF763
:10302C00D9FF204610BDA160204610BD2DE9F84304
:10303C000F46036804461546BB4281680AD85A18E5
:10304C00974207D2C3EB07094FF0010835B9204668
:10305C00BDE8F8834FF00008002DF8D04E1920463B
:10306C003146FFF76BFF0028F1D0B8F1000F0ED0FE
:10307C0023682A46A06803EB0901184409F01CFBDD
:10308C00236800229A55A6602046BDE8F883206884
:10309C003946A36818440DF029FCF4E710B582B04A
:1030AC000023044601228DF8041001A98DF8053087
:1030BC00FFF7BCFF204602B010BD00BF83688B42F7
:1030CC0003D9006808B108447047024B0022184627
:1030DC001A707047A83500209A42F8B504460E467F
:1030EC0002D911461A460B460021A1602173B06823
:1030FC002160824261600ED8834228BF03461D4680
:10310C0033685F5D59553368991806D02046FFF730
:10311C0061FF33685F552046F8BDA1605F55FAE743
:10312C0010B504468B68FFF7D7FF204610BD00BFD3
:10313C002DE9F04106680746EEB18468DCB13546EE
:10314C0000E04546287805F101080CF01BF9002831
:10315C00F7D1013C344401E028B1013C20780CF05B
:10316C0011F9AC42F8D2621CB542A2EB0502BA606E
:10317C0004D80023B3543846BDE8F08130462946C4
:10318C0009F09AFA3E68BA68F3E700BF006808B124
:10319C000CF088B8704700BF00780B78C01A7047E5
:1031AC002DE9F04F0746C3B008460D460DF040FC24
:1031BC0004460CF00BF980462246294609F07CFAAD
:1031CC00704B2146404601220CF0C6FC384640F6B6
:1031DC000A0200210CF06EFC0023A7F808383CB35F
:1031EC0044444246012508E011780123A7F8085809
:1031FC0087F806170132944212D0F8181946002BA2
:10320C00F2D090F805E75E1C107839448645F1D071
:10321C000132B3B29442A7F8083881F80607ECD112
:10322C0023F001039EB2731E35463446009304E02E
:10323C004FF0FF3325462646009340460CF0CEF85F
:10324C0007F2045307F204714FF48072A7F8086870
:10325C0023F8022F9942FBD15CB107F205710023D0
:10326C0011F8012F07EB4202A2F806350133A342F5
:10327C00F6D1711E0422002307F1FF3B89B2A7F897
:10328C00062807F2FF32A7F8003501F1010AA7F86A
:10329C0002350192A7F8043506B30BF10108D946A3
:1032AC0000240CF029FF08EB040E90FBF5F303FB54
:1032BC0015005FFA80FC64B19BF80130634557D070
:1032CC000BF1020303E013F8010B844550D09E452B
:1032DC00F9D1013409F801CFA245E2D10BF5807B7D
:1032EC00019B5B45D8D107F540718EB1701E02AAC7
:1032FC00C6F34F0380B29B1A013010449E1896FB04
:10330C00F5F405FB14640C5D02F8014B8242F5D117
:10331C00009B002B23DD00231A461C4602AD581CD3
:10332C00013207EB030EEE5C15F800C092B23D18AB
:10333C0066450ED99EF800830DF1080995F800A397
:10334C00012409F803C08EF800A309F8006085F881
:10335C000083009813469042E0DC002CD8D107F58E
:10336C0080604FF4807243B0BDE8F04F09F0A4B90F
:10337C000CF1010C9CFBF5F305FB13CC5FFA8CFCF8
:10338C0099E700BFE902000030B4B0F80648013CF0
:10339C0009D000231D46591C03F520728BB220F86E
:1033AC001250A342F7D330BC704700BF01EB40036F
:1033BC002DE9F043B3F80675FF2F5DD8B1F8002561
:1033CC00B1F806580132B1F80868013D92B2A1F883
:1033DC00002523D000200346864607E0A3B29D4279
:1033EC00184603F5207217D931F81220964203F1D2
:1033FC000104F3D1013001EB43038542A3F800E54E
:10340C00ECD9B3F802250132A3F80225A3B29D42F0
:10341C00184603F52072E7D8B1F800250F4401F5E2
:10342C00A065002097F800341A4401EB0024013009
:10343C0092FBF6F306FB13220328D2B2A25C1DD03A
:10344C0093B235F8022FEFE70024BCF800003444A7
:10345C00241A94FBF6F006FB104080B2ACF1020C7F
:10346C00AEF5807E05F58075CC4516D1084490F8F4
:10347C000034194491F80607BDE8F0830A44144D52
:10348C0006F1FF3801F2045C92F800036D1A1FFA82
:10349C0088F801F2012E01F2FE49002EDED01EF852
:1034AC00013C8342D0D008EB0E07734603E013F8BF
:1034BC00012B8242C9D09F4205EB0304F7D1ACF13A
:1034CC00020CAEF5807E05F58075CC45E5D1CDE7D7
:1034DC0000FEFFFF70B5044659B11646451820781A
:1034EC003146FFF763FF04F8010BA542F7D12846DC
:1034FC0070BD0546FBE700BF204A0A40B2F1824F7F
:10350C0010B427D09AB1B2F1004F30D0421C002336
:10351C0002E001333E2B25D012F8014F002CF8D1DC
:10352C0003440A46997010465DF8044B7047C9B2C3
:10353C00134CA2F5803254F821100A4041F080411E
:10354C0042F08042B2F1904FE0D1037843F0020395
:10355C000370DBE703780A461943017010465DF8E7
:10356C00044B704700225DF8044B10467047B0F8CE
:10357C0040300A461943A0F84010D4E70000FFFF82
:10358C00140600200B0601D4FFF7B6BF024B53F80C
:10359C002110FFF7B1BF00BF1406002010B5402268
:1035AC00002104460CF086FA0023A4F8403010BD2C
:1035BC000146402204200AF0C9BA00BF002070471F
:1035CC00012070474FF0FF30704700BFC3680BB14C
:1035DC00012070470069003018BF0120704700BF00
:1035EC000069003018BF0120704700BF43793BB120
:1035FC00D0F8A0200021D0F89C3003FB02F07047DB
:10360C0018460021704700BF43790BB91846704724
:10361C0000B58DB008306A4607F028FFC343DB0FB6
:10362C0018460DB05DF804FBC16808B5029B61B18A
:10363C002BB1012B03D0022B01D0002008BD8068D8
:10364C0007F096FFC043C00F08BD084608BD00BF79
:10365C0070B584B002460425002404AB80680E4685
:10366C0002F1180143F8044D6322009507F016FF90
:10367C00A84202D0204604B070BD03980028FAD0AE
:10368C00314608F06BFB012004B070BD70B584B0FE
:10369C0002460425002404AB80680E4602F1180192
:1036AC0043F8044D6D22009507F0F8FEA84202D0B5
:1036BC00204604B070BD03980028FAD0314608F0BB
:1036CC004DFB012004B070BD016911B1806808F098
:1036DC00A1B970472DE9F0410D69ACB00646C5B1F2
:1036EC000C4608E00CF098FF534918B102A80CF0F6
:1036FC0093FFD8B925693022002168460CF0DAF91D
:10370C0029466A46A06808F015F900284B4902A81A
:10371C00E8DC00234FF47A71494A30463371337335
:10372C003361B16032602CB0BDE8F081802204F1CD
:10373C0018010CA80DF052F90CA80DF079F90346FC
:10374C00002839D180220CA802A90DF047F99DF868
:10375C000050012D46D034200BF038FE07460028CF
:10376C00D7D001460CAAA06808F078F8002859DBDD
:10377C0098204FF0000809F039F8A3680546314C41
:10378C000CA9183080222F61AB60C5F80C8085E83D
:10379C0010010DF023F96B684FF47A71284A01334C
:1037AC00304686F8048086F80C8035616B60B16019
:1037BC0032602CB0BDE8F0812CAA024412F8811CB6
:1037CC002F2933D07D2831D801332F202CA9002567
:1037DC0002F8800C0CAA1944D018C3F1800201F82D
:1037EC00805CB1E754200BF0F1FD0746002890D027
:1037FC0001462B460CAAA06807F0A8FE002811DB96
:10380C0098204FF0000808F0F1FFA36805460D4C16
:10381C000CA91830EF608022AB60C5F8108085E8E9
:10382C001001B6E738460BF0D9FD72E70CAAD01898
:10383C00C3F1800288E700BF8810002084100020AC
:10384C00940A0020E009002010B500F118042F2183
:10385C0020460DF0ABF908B1013010BD204610BD6B
:10386C00C16810B5044639B1806807F079FEE0688C
:10387C000BF0B4FD0023E360216939B1A06808F0B6
:10388C0045F820690BF0AAFD0023236110BD00BF91
:10389C00C16839B1806808B507F012FF20EAE07002
:1038AC00C11708BD00200021704700BFC16839B1A5
:1038BC00806808B507F002FF20EAE070C11708BD68
:1038CC0000200021704700BFC16881B138B50446A3
:1038DC00806807F0F3FE051E07DBE168A06807F0BF
:1038EC00EFFE002801DB401B38BD002038BD002056
:1038FC00704700BFC16831B1806808B507F060FE41
:10390C00C043C00F08BD0846704700BFC16811B165
:10391C00806807F027BE704710B4C4683CB11346EA
:10392C0080680A4621465DF8044B07F01FBE20460E
:10393C005DF8044B704700BF10B5C46844B1134622
:10394C0080680A46214607F00FFE20EAE07010BDA1
:10395C00204610BD08B5437923B1083007F02EFB83
:10396C00C343DB0F184608BD19B1012903D0012050
:10397C00704710F099B910B414461A4621465DF8F8
:10398C00044B10F081B900BF006920B10368044AF0
:10399C005B69934202D14FF0FF307047184700BF6C
:1039AC0015070000437913B900200021704710B5AA
:1039BC000446083008F030F8002809DBD4F8A030B1
:1039CC00834205D3D4F89C3003FB00F0002110BDDA
:1039DC002368094ADB6993420AD1637933B1D4F87D
:1039EC00A000D4F89C3003FB00F0EFE70020EDE7DB
:1039FC002046BDE8104018473D070000006948B15B
:103A0C000368054A9B69934205D1C16811B180686E
:103A1C0007F0A8BD704718475D0A00008B79503B32
:103A2C001B061ED430B5044685B0084608F062FA71
:103A3C002368104A5B6B03909342A56815D1183428
:103A4C002F2120460DF0B2F868B1411C0422284603
:103A5C0003AB00926D2207F06DFDC043C00F05B0A3
:103A6C0030BD002070472146F0E7204698470146BC
:103A7C00ECE700BF990900008B79503B1B061ED464
:103A8C0030B5044685B0084608F034FA2368104A6D
:103A9C005B6B03909342A56815D118342F212046F7
:103AAC000DF084F868B1411C0422284603AB009247
:103ABC00632207F03FFDC043C00F05B030BD0020AE
:103ACC0070472146F0E7204698470146ECE700BFD7
:103ADC0099090000026810B51269084CA2420AD17B
:103AEC000346407900B910BD1846083007F066FA55
:103AFC00C043C00F10BDBDE810401047A50A000020
:103B0C00006970B170B404680A4DE468AC420DD120
:103B1C000E46C16839B113468068324670BC07F056
:103B2C0025BD00207047002070BC7047234670BC38
:103B3C00184700BF690A000000B5006983B08DF812
:103B4C00071060B103680D4ADB6893420ED1C1685F
:103B5C0041B1806801230DF1070207F007FD03B0A6
:103B6C005DF804FB084603B05DF804FB01220DF17F
:103B7C000701984703B05DF804FB00BF690A000019
:103B8C00006900B583B0C8B103680F4A9B689342C3
:103B9C000FD1C16891B1806801230DF1070207F0C4
:103BAC00E3FC20EAE07048B19DF8070003B05DF833
:103BBC0004FB01220DF107019847F4E74FF0FF30A9
:103BCC0003B05DF804FB00BF890A000070B50469FE
:103BDC009CB123680C4A1B69934210D1E16861B116
:103BEC00A06807F06BFD051E07DBE168A06807F015
:103BFC0067FD002801DB401B70BD002070BD204616
:103C0C00BDE87040184700BF190A0000F0B54579AF
:103C1C0085B015B9284605B0F0BD00F1080416466C
:103C2C00204607F065FA002815DB09F029F904276E
:103C3C0004AB31466D2243F8040D2046009707F083
:103C4C0079FC0028E6DA222105480AF099FC05489F
:103C5C0008F05CF8DEE70025284605B0F0BD00BF93
:103C6C008C1000209C1B0020F0B5457985B015B94F
:103C7C00284605B0F0BD00F108040E46204607F0BA
:103C8C002BFD002822DB09F0FBF804AF4FF0040EEB
:103C9C00632247F8040D31463B46CDF800E0204640
:103CAC0007F048FC002815DB04223B463146204631
:103CBC0000926D2207F03EFC0028D9DA2221094837
:103CCC000AF05EFC084808F021F8D1E700252846E8
:103CDC0005B0F0BD222105480AF052FC024808F05C
:103CEC0015F8E1E78C1000209C1B0020B010002080
:103CFC000B4BC16810B50446036039B1806807F0FE
:103D0C002FFCE0680BF06AFB0023E360216929B10A
:103D1C00A06807F0FBFD20690BF060FB204610BD8E
:103D2C00E00900200D4BC16810B50446036039B1A1
:103D3C00806807F015FCE0680BF050FB0023E36093
:103D4C00216929B1A06807F0E1FD20690BF046FB61
:103D5C002046982108F04EFD204610BDE0090020B9
:103D6C002DE9F0471F464B7990B00446002B46D006
:103D7C000D461646002F4FD1083504AA3146284669
:103D8C0007F074FB00283ADB9DF81080B8F1010FA6
:103D9C0000F09F8034200BF019FB814678B301466C
:103DAC003246284607F05AFD002825DB982008F0FB
:103DBC001DFD634B8046314618308022C8F80470D4
:103DCC00C8F80850C8F81090C8F80C70C8F8003043
:103DDC000CF004FED8F804304FF47A71594A0133D0
:103DEC002046C4F8108027712773C8F80430A160EE
:103DFC00226010B0BDE8F08748460BF0EFFA0023C4
:103E0C004FF47A714F4A2046237123732361A160CA
:103E1C00226010B0BDE8F08754200BF0D7FA804632
:103E2C000028ECD00835014640F2031332462846F0
:103E3C0007F08CFB0028E2DB00234FF0040A0DF1A5
:103E4C001009039309F01CF8CDF800A003AB049003
:103E5C0063223146284607F021FB504509D0CDF8A6
:103E6C0000A0632231464B46284607F063FB00282E
:103E7C005DDB04204B466D2231460090284607F04E
:103E8C0059FB00284BDB012F42D098204FF0000942
:103E9C0008F0ACFC2A4B0746314680221830BD6036
:103EAC00C7F80C80C7F8109087E808020CF096FD54
:103EBC007B684FF47A71234A0133204684F80490CE
:103ECC0084F80C9027617B60A160226010B0BDE883
:103EDC00F08754200BF07AFA814600288FD00146E7
:103EEC0043463246284607F031FB002884DB9820F5
:103EFC0008F07CFC8046124B31461830C8F8047030
:103F0C00C8F808508022C8F80C90C8F810705DE70B
:103F1C00022300224146284607F02AFBB5E722215E
:103F2C0009480AF02DFB094807F0F0FEABE7222107
:103F3C0007480AF025FB054807F0E8FE99E700BFA3
:103F4C00E0090020940A0020F81000209C1B00209F
:103F5C00D410002070B5254B0546046903601CB1D4
:103F6C006668013E66600EB1284670BD2368204A23
:103F7C00DB6A934234D1E16831B1A06807F0F0FA02
:103F8C00E0680BF02BFAE660216939B1A06807F004
:103F9C00BDFC20690BF022FA002323612C69002C54
:103FAC00E2D02368134A5B6893421CD1124BE16840
:103FBC00236039B1A06807F0D3FAE0680BF00EFA71
:103FCC000023E360216929B1A06807F09FFC2069F8
:103FDC000BF004FA2046982108F00CFC284670BD22
:103FEC0020469847DAE720469847BDE7940A002018
:103FFC00B1090000750E0000E009002070B5294BD6
:10400C000546046903601CB16668013E66602EB10A
:10401C002846142108F0EEFB284670BD2368224A7E
:10402C00DB6A934238D1E16831B1A06807F098FAA5
:10403C00E0680BF0D3F9E660216939B1A06807F0AC
:10404C0065FC20690BF0CAF9002323612C69002C54
:10405C00DED02368154A5B68934220D1144BE1688B
:10406C00236039B1A06807F07BFAE0680BF0B6F971
:10407C000023E360216929B1A06807F047FC20699F
:10408C000BF0ACF92046982108F0B4FB284614211B
:10409C0008F0B0FB284670BD20469847D6E720466E
:1040AC009847B5E7940A0020B1090000750E00008E
:1040BC00E009002013682DE9F04FDFF81C8397B05E
:1040CC001F68144605460E46474540F09C815279C0
:1040DC00002A00F0A98004F1080701460AAA384614
:1040EC0007F0C4F90028C0F254819DF82890B9F16A
:1040FC00010F00F0618234200BF068F98346002830
:10410C0000F0478101462A46384607F0A7FB0028F5
:10411C00C0F23C8198204FF0000A08F067FBA94BD5
:10412C0081468760802218302946C9F810B0C9F83A
:10413C000CA089E808040CF051FCD9F804304FF4B9
:10414C007A72A14F013348468DF818A08DF820A043
:10415C00CDF82490C9F8043007920597002800F098
:10416C009D810368994A1B6B934240F09381C3680D
:10417C00002B00F01C8296493046FEF74DFF099C3F
:10418C00002C4DD02368DFF854829B68434540F0E7
:10419C008F82E16811B30AAFA06801233A4607F099
:1041AC00E3F920EAE070C0B19DF828103046FEF724
:1041BC0075FF099C01233A46002C31D021688D688B
:1041CC00454540F02781E068014638B1A06807F00A
:1041DC00CBF920EAE0700028E6D1099C04B32368EF
:1041EC007C4FDB6ABB4240F00982E16839B1A068C0
:1041FC0007F0B6F9E0680BF0F1F80023E3602169F1
:10420C0039B1A06807F082FB20690BF0E7F80023B6
:10421C002361099C6568013D6560002D00F0FF80FD
:10422C00B06817B0BDE8F08F4FF47A71664F8DF817
:10423C0018208DF820200992079105971E68464595
:10424C0040F0B7806379002B00F0CA8054200BF04B
:10425C00BDF80746002800F0C3800834014640F240
:10426C0003132A46204607F071F90028C0F2B880E3
:10427C00002304260DF11008039308F001FE0096AC
:10428C0003AB049063222946204607F007F9B0429D
:10429C0009D00096632229464346204607F04AF986
:1042AC000028C0F21882042043466D222946009053
:1042BC00204607F03FF90028C0F26E8298204FF09C
:1042CC00000808F093FA3F4B064629468022183026
:1042DC00F7603546B460C6F810803B4F86E808019D
:1042EC000CF07CFB73684FF47A728DF82C800133E0
:1042FC008DF834800E9673600C920A976B68099C4B
:10430C0001336B60002C00F02C826368013B63600E
:10431C00002B00F0CB8009950A976B685C1E6C60D3
:10432C00002C00F00681099C002C67D02368274ADA
:10433C001B6B934240F06E81E368002B00F0C1814F
:10434C002368244FDB6ABB4240F02082E16839B11C
:10435C00A06807F005F9E0680BF040F80023E36073
:10436C00216939B1A06807F0D1FA20690BF036F851
:10437C0000232361099C6568013D6560002D00F0F8
:10438C00B7814FF0FF3017B0BDE8F08F58460BF0F7
:10439C0025F800230C4F4FF47A728DF818308DF8F5
:1043AC0020300993236805971E68079246453FF411
:1043BC0049AF2A46214602230AA8B0470E9DD5B123
:1043CC00014F9BE7E0090020940A00201D07000024
:1043DC0014140020B1090000B10E0000890A00007D
:1043EC0000234FF47A72874F8DF82C308DF83430CF
:1043FC000E930C920A97099C002C51D16FF001007E
:10440C0017B0BDE8F08F0246002305A82146B84737
:10441C000998A3E6204601223946A847C3E623683B
:10442C00DB6ABB4240F0A981E16831B1A06807F0BA
:10443C0097F8E0680AF0D2FFE560216939B1A0680D
:10444C0007F064FA20690AF0C9FF00232361099C74
:10445C00002C3FF4E5AE23686B4A5B68934240F056
:10446C0092816A4BE168236039B1A06807F078F853
:10447C00E0680AF0B3FF0023E360216929B1A0686A
:10448C0007F044FA20690AF0A9FF2046982108F0A9
:10449C00B1F9C5E6984700287FF46DAE2368CDE6E8
:1044AC006368013B6360002BA8D1564F2368584AC0
:1044BC00DB6A934240F05E81E16839B1A06807F095
:1044CC004FF8E0680AF08AFF0023E360216939B1F4
:1044DC00A06807F01BFA20690AF080FF0023236113
:1044EC00099C002C00F0F5802368474A5B689342D6
:1044FC0040F0ED80454BE168236039B1A06807F0CE
:10450C002FF8E0680AF06AFF0023E360216929B103
:10451C00A06807F0FBF920690AF060FF204698219B
:10452C0008F068F90E9D09950A97002D7FF4F5AEF9
:10453C0064E72B68364ADB6A934240F02181E968D4
:10454C00002900F01181A86807F00AF8E8680AF061
:10455C0045FF2969EC6039B1A86807F0D7F92869DB
:10456C000AF03CFF00232B610E9C002C3FF4DBAEC9
:10457C002368254A5B68934240F00B81234BE1682A
:10458C00236039B1A06806F0EBFFE0680AF026FF63
:10459C000023E360216929B1A06807F0B7F920690D
:1045AC000AF01CFF2046982108F024F9BBE60369A9
:1045BC00002B7FF4E0AD71E754200AF007FF83462F
:1045CC0000283FF4E6AE01464B462A46384606F034
:1045DC00BDFF0028FFF6DAAE98204FF0000A08F075
:1045EC0005F90A4B8146876080221830C9F80CB057
:1045FC002946C9F810A089E808049CE5204698478C
:10460C0007E600BF940A0020750E0000E0090020A8
:10461C00B109000020469847099C002840F0CA8048
:10462C000597002C3FF4EAAE6568013D6560002DEE
:10463C007FF4E4AE2368614ADB6A93423ED1E168C1
:10464C0031B1A06806F08CFFE0680AF0C7FEE560A7
:10465C00216939B1A06807F059F920690AF0BEFE4A
:10466C0000232361099C002C3FF4C8AE2368544AF4
:10467C005B68934237D1534BE168236039B1A06832
:10468C0006F06EFFE0680AF0A9FE0023E3602169E2
:10469C0029B1A06807F03AF920690AF09FFE20467C
:1046AC00982108F0A7F86FF0010017B0BDE8F08F63
:1046BC000AAF204601223946984774E520469847B0
:1046CC00D0E72369002B7FF43BAE0597ACE720467F
:1046DC0098470E9D27E722213B4809F051FF3B48A4
:1046EC0007F014FBDFE5204698476FF0010087E6E2
:1046FC002368DB6ABB4257D1E16831B1A06806F090
:10470C002FFFE0680AF06AFEE560216939B1A06804
:10471C0007F0FCF820690AF061FE00232361099C74
:10472C00002C3FF42EAE2368254A5B6893423ED1A1
:10473C00244BE168236039B1A06806F011FFE068F2
:10474C000AF04CFE0023E360216929B1A06807F050
:10475C00DDF820690AF042FE2046982108F04AF85C
:10476C000FE609950A97D9E5296900297FF4F4AE7B
:10477C000E9CFDE620469847B2E62046984766E632
:10478C0028469847F0E62046984749E52046984742
:10479C00F0E520469847C6E522210D4809F0F0FEC9
:1047AC000A4807F0B3FA89E520469847B7E7204650
:1047BC009847E6E5002C3FF4E4ADC1E5B1090000F3
:1047CC00750E0000E0090020D41000209C1B002076
:1047DC00F81000201368A7482DE9F04114461A6917
:1047EC008AB00D46824240F0108162794AB91E6847
:1047FC00A14B9E4240F00D814FF0FF300AB0BDE856
:10480C00F0819E4904F1080006F0D8FB22689A4B0F
:10481C0016689E4240F0FD806379002BECD054204A
:10482C000AF0D4FD07460028E6D00834014640F2D1
:10483C000313924A204606F089FE0028DCDB002395
:10484C0004260DF11008039308F01AFB009603AB35
:10485C00049063228949204606F020FEB04209D01C
:10486C000096632285494346204606F063FE0028E5
:10487C00C0F27C81042043466D2280490090204682
:10488C0006F058FE0028C0F2698198204FF000080D
:10489C0007F0ACFF7A4B0646802278491830B4609A
:1048AC003446F760C6F8108086E808010CF096F8DC
:1048BC007368744A4FF47A7101338DF818808DF84F
:1048CC0020807360236805921B6B6F4A0996934294
:1048DC00079140F0AD80E368002B00F0E38029687D
:1048EC006A48002918BF084627686949FE68AB6802
:1048FC008E4240F0AD80E168002900F01B81024639
:10490C00A06806F033FE099C002C3FD02368614A56
:10491C009B69934240F0A980E168002900F00E8168
:10492C00A06806F01FFE099D002D00F035812B6854
:10493C00594A5B6A934240F09380E968002900F081
:10494C000381A86806F0BAFE099D20EAE074EDB177
:10495C002B68524FDB6ABB427FD1E96839B1A8683A
:10496C0006F0FEFDE8680AF039FD0023EB602969CA
:10497C0039B1A86806F0CAFF28690AF02FFD002398
:10498C002B61099D6E68013E6E601EB120460AB017
:10499C00BDE8F0812B68DB6ABB4240F0D880E96847
:1049AC0031B1A86806F0DCFDE8680AF017FDEE608E
:1049BC00296939B1A86806F0A9FF28690AF00EFD2B
:1049CC0000232B61099D002DE0D02B68344A5B68D5
:1049DC00934240F0BF802A4BE9682B6039B1A8683C
:1049EC0006F0BEFDE8680AF0F9FC0023EB602969CB
:1049FC0029B1A86806F08AFF28690AF0EFFC28465E
:104A0C00982107F0F7FE2046C1E71C492046904745
:104A1C00FCE621460223194A05A8B047099C002C44
:104A2C003FF4EAAE2368184A1B6B93423FF453AF32
:104A3C0020469847002800F0A98029681348099C53
:104A4C00002918BF0846002C7FF44EAF20469EE785
:104A5C0001461A462046B04755E72846984790E746
:104A6C0028469847099D044671E720469847099DBA
:104A7C005AE700BFA50A0000B10E00001C1100206F
:104A8C00E0090020940A00201D07000014170020E4
:104A9C00690A00005D0A0000FD090000B109000070
:104AAC00750E00002369002B7FF419AF3B4B059367
:104ABC006568013D6560002D7FF49EAE2368384A21
:104ACC00DB6A93425AD1E16831B1A06806F048FD27
:104ADC00E0680AF083FCE560216939B1A06806F052
:104AEC0015FF20690AF07AFC00232361099C002C35
:104AFC003FF482AE23682B4A5B68934241D12A4B28
:104B0C00E168236039B1A06806F02AFDE0680AF07C
:104B1C0065FC0023E360216929B1A06806F0F6FE6C
:104B2C0020690AF05BFC2046982107F063FE4FF0E9
:104B3C00FF3063E6BB691D4A934296D1099D002D57
:104B4C007FF4F5AE2C4603E70C46099DFFE628469C
:104B5C00984737E728469847204618E722211448FB
:104B6C0009F00EFD134807F0D1F88EE62221124809
:104B7C0009F006FD0F4807F0C9F87BE62046984778
:104B8C00B4E7204698474FF0FF3037E6034B099CBB
:104B9C000593002C8CD12FE628462FE6940A002092
:104BAC00B1090000750E0000E00900205D0A00004C
:104BBC00F81000209C1B0020D410002070B50E466D
:104BCC000A4D01460524286030460FF069F850B9AB
:104BDC00642007F06FFB013C05D0296830460FF0CC
:104BEC005FF80028F4D0204670BD00BFE02B0020F9
:104BFC00044B002204491A7119605A71C3F88020C1
:104C0C00704700BF382C00203C0A00200000000038
:104C1C00F0B52DED028B87B0054601F045FBB7EEE4
:104C2C00C00A274B284627499A69274C8DED000B63
:104C3C0007F084F84FF4001001F04AFC4FF4001216
:104C4C005521276806460AF035FF23681F4ADB1BEF
:104C5C00146807EE903A1168B8EE678B4805C90ADC
:104C6C000AF04AF94FF4001241EC170B87EE084B8F
:104C7C0007EE904A28461649B8EE677B9FED0C5B11
:104C8C0088EE076B9FED0C7B28EE078B8DED028B6E
:104C9C0084EE057B8DED006B8DED047B07F04EF8FB
:104CAC00304607B0BDEC028BBDE8F04001F072BBA2
:104CBC000000000080842E41000000000000A03E97
:104CCC0000C00F4024110020041000E0481B0020FD
:104CDC004011002008292DE9F0430C468BB0054605
:104CEC0061D01B290BD02146AA48FEF7D7F92B68B7
:104CFC00214628461B6898470BB0BDE8F083A54EAB
:104D0C0007F004F83468002C00F076810822A249E0
:104D1C0020460BF0FBFE30B9B368082B00F0218164
:104D2C00002C00F0718109229C4920460BF0EEFE0C
:104D3C0000284DD1B3680A3B082B46D806AC092293
:104D4C0094492046964FFEF7EBF9964B069902A82C
:104D5C00954E002908BF1946FEF728F92046FEF7A4
:104D6C00E5F802A8FEF7E4F902A8FEF70FFAB8423C
:104D7C0003468E4928BF3B4686483360FEF74CF904
:104D8C00326828468A4906F0D9FF32682846894994
:104D9C007D2A38BF7D22B7FBF2F206F0CFFF02A8C6
:104DAC00FEF7C4F8A8E7844B1B78002B9BD07F49F7
:104DBC007848FEF731F92B68072280495B68284652
:104DCC009847284606F0A2FF96E7002C00F02481B5
:104DDC0008227B4920460BF099FE002864D1B36869
:104DEC00082B00F02281002C5ED1072275496D48FA
:104DFC000BF08CFE00285ED00622734969480BF03C
:104E0C0085FE002800F090800622704965480BF062
:104E1C007DFE002800F0958007226D4961480BF05B
:104E2C0075FE002840F07283B368072B00F09B815D
:104E3C00002C00F06B830B22664920460BF066FEBB
:104E4C00002840F00881B3680C3B052B00F2A681CA
:104E5C0006AC0B224F4920465F4EFEF761F9514BD1
:104E6C00069902A85D4F002908BF1946FEF79EF867
:104E7C002046FEF75BF802A8FEF75AF902A8FEF7E7
:104E8C0085F94A4930604348FEF7C6F830883988BE
:104E9C0008F092FF3B6832682846514906F04EFFF5
:104EAC0002A8FEF743F827E70722464920460BF0F5
:104EBC002DFE002832D1B368083B082B2BD806AC4A
:104ECC00072234492046FEF72BF9364B069902A8E7
:104EDC00002908BF1946FEF769F82046FEF726F8A8
:104EEC0002A8FEF725F902A8FEF750F93D4A034641
:104EFC009268904200D3531E3B4C2C4925482360AA
:104F0C00FEF78AF822682846384906F017FF02A8EF
:104F1C00FEF70CF8F0E6002C3FF46EAF06222A499F
:104F2C0020460BF0F3FD30B9B368062B00F010816E
:104F3C00002C3FF469AF0622244920460BF0E6FD15
:104F4C0030B9B368062B00F01E81002C3FF464AF1F
:104F5C0007221F4920460BF0D9FD00287FF46BAFC8
:104F6C0062E712490B48FEF757F8134A2E68284699
:104F7C0013781F4C83F001031E49002B13707368C8
:104F8C0006BF214617221A229847284606F0BEFE75
:104F9C00B2E600BF5435002080130020B41100206D
:104FAC0040420F0014170020342C00201414002051
:104FBC00C0110020D4110020E8220020AC110020E8
:104FCC008C130020EC1100209813002004120020F8
:104FDC00A01300200C120020442B0020482B002092
:104FEC00181200208035002090350020F41100208C
:104FFC0094110020781100200822AC49AC480BF029
:10500C0085FD00283FF488AE0922AA49A8480BF078
:10501C007DFD00283FF48EAE0822A749A4480BF072
:10502C0075FD00287FF4E1AED9E6A44CA449A5484F
:10503C00FDF7F2FF2268A449284606F07FFE22689D
:10504C00A24B28467D2AA24938BF7D22B3FBF2F23F
:10505C0006F074FE50E60B229E4920460BF056FDDE
:10506C0038B9B3680C3B052B40F25E81002C00F084
:10507C00A0800722984920460BF048FD30B9B7684C
:10508C00072F00F07681002C00F09B8007229349BB
:10509C0020460BF03BFD30B9B368072B00F0C18103
:1050AC00002C00F096800B228D4920460BF02EFD33
:1050BC0030B9B3680B2B00F0D281002C00F091803A
:1050CC000C22884920460BF021FD30B9B3680C2B1B
:1050DC0000F0CD81002C00F08C8007228249204604
:1050EC000BF014FD002840F06081B368083B012BE5
:1050FC0000F2588106AC072272492046FEF710F8E0
:10510C006B4B069902A8002908BF1946FDF74EFF04
:10511C002046FDF70BFF02A8FEF70AF8684969481C
:10512C00FDF77AFF02A8FEF731F880B201F072F8B1
:10513C0001F0BAF8B7EEC00A6C4B28466C499A6974
:10514C008DED000B06F0FAFD02A8FDF7EFFED3E59E
:10515C005B495C48FDF760FF664B284666491A6858
:10516C0006F0ECFDC8E5654C55495648FDF754FF73
:10517C004F4E216828462B68A268002908BF31468B
:10518C005B689847B8E54E494E48FDF745FF5B4BC9
:10519C0028465B499A6806F0D1FDADE5002C7FF4FA
:1051AC005AAF0B224B4942480BF0B0FC00283FF49D
:1051BC0058AF072248493E480BF0A8FC00283FF4A2
:1051CC005EAF072245493A480BF0A0FC00283FF49B
:1051DC0063AF0B22424936480BF098FC00283FF491
:1051EC0068AF0C223F4932480BF090FC00283FF48A
:1051FC006DAF07223C492E480BF088FC00283FF489
:10520C0074AF06223F492A480BF080FC002800F0BE
:10521C00D28010223C4926480BF078FC18B9B368B0
:10522C00102B00F0D98022480A2238490BF06EFC72
:10523C00044618B9B3680A2B00F03281DFF8E48019
:10524C0098F80070002F7FF457ADB368002B3FF433
:10525C0053AD2A4C01231B49204688F80030FDF73A
:10526C00C7FE244BA268284629491F6088F80070A5
:10527C0006F064FD2246274928460D4F06F05EFDD8
:10528C00226828462449002A08BF3A4606F056FDF3
:10529C000C4A2249284606F051FD3268284620491E
:1052AC00002A08BF3A4606F049FD25E58013002088
:1052BC0014170020B41100208C130020342C002073
:1052CC001414002054350020C011002040420F005F
:1052DC00D4110020A813002028120020B4130020A1
:1052EC0064120020BC1300207012002000C00F407C
:1052FC002411002090350020F4110020803500206E
:10530C0010130020CC1300206C1300208C120020F2
:10531C00301300204413002098120020C0120020EB
:10532C00E8120020B635002006AC0B227C49204642
:10533C007C4EFDF7F5FE7C4B069902A87B4F0029AD
:10534C0008BF1946FDF732FE2046FDF7EFFD02A817
:10535C00FDF7EEFE02A8FDF719FF754930607048A5
:10536C00FDF75AFE3188388808F026FD33683A6814
:10537C0092E56F496A48FDF74FFE2B683A466D4936
:10538C005B6828469847284606F0C0FC6A4A6B4979
:10539C006B48FEF78FFE021E5CDB2846694906F05F
:1053AC00CDFCA9E4002C3FF42CAF06226649204624
:1053BC000BF0ACFB28B9B368062B60D0002C3FF483
:1053CC0028AF1022614920460BF0A0FB08B1204603
:1053DC002AE7B368102BFAD155495148FDF71CFE4A
:1053EC005B4F5C4806F0BCFB0AF07CFE5A4A3B68FB
:1053FC00D2F8008063B1594C002604F206712046A5
:10540C00FDF7CEFE01363B6804F60A04B342F4D82D
:10541C00514B284652491A68C8EB020206F08EFC22
:10542C006AE42B6806224F4928465B689847284651
:10543C0006F06CFC3E493A48FDF7EEFD3E4A3F490A
:10544C003F48FFF7C7F9021E04DB2846464906F021
:10545C0075FC51E42846454906F070FC4CE434498F
:10546C002F48FDF7D9FD2846FFF7D2FB44E430491D
:10547C002B48FDF7D1FD284600F0EAFE3CE42C4910
:10548C002748FDF7C9FD00F00FFFB7EEC00A384BF7
:10549C00284638499A698DED000B06F04FFC2BE439
:1054AC002B4F23491E48FDF7B7FD3B6853B32B4EDA
:1054BC00B04640460134FDF767FF3B6808F60A0822
:1054CC00A342F6D8244AD2F800908BB14FF00008D2
:1054DC001A4C00211948FDF7F1FD3246A16808F17C
:1054EC000108FDF7F7FF3B6806F60A064345F0D8BE
:1054FC00194B28461A491A68C9EB020206F01EFC21
:10550C00FFF7FABB144BD3F80090F1E70B221A49C2
:10551C0005480BF0FBFA00287FF443AE93E400BF80
:10552C0054350020482B002014170020442B002059
:10553C001414002020130020382C0020803500206B
:10554C001C11002030120020CC1300206C13002002
:10555C00AC220020042B0020041000E0182D0020A9
:10556C00781200202813002054120020441200202E
:10557C0000C00F40241100200C12002010B504466E
:10558C0007E0236820465B699847C1B22046FFF7C5
:10559C00A1FB236820461B6998470028F1D110BD58
:1055AC002DE9F0410C4FDFF840800C4E39460C4D84
:1055BC0040460C4CFDF7FAFC32462946404609F0B1
:1055CC0061F939462046FDF7F1FC32462946204662
:1055DC00BDE8F04109F056B914140020401B00201E
:1055EC007D00000080350020543500204FF08443AE
:1055FC009B68C3F34042C3F38150C3F3C06142EADA
:10560C004000C3F3006230B4C3F30045C3F38064BD
:10561C00C3F3406345EA400044EA400041EA4000DD
:10562C0042EA400030BC43EA400070470A4940F26D
:10563C00FF330A4A0878116810F0020F08BF0023E4
:10564C008B4208D0B4BF01F1FF334B1C0D2019461F
:10565C00136007F011BA7047AB3500204C2B0020BB
:10566C0010B5044606F024FB204610BDF8B51120F9
:10567C0040F2EE2600F0CEFD494D00F0BDFD0022BB
:10568C004FF4F0604FF4876108F0D6FB4548464A6A
:10569C000468464F13783BB12B78DB0704D50368BD
:1056AC0039685B1A0E2B07D8036811781B1B00296D
:1056BC0066D0B3F5FA6FEDD94FF47A70102406F07A
:1056CC00F9FD0221052006F0B9FE0221042006F0A6
:1056DC00B5FE01210D2006F0B1FEE0B2013403212C
:1056EC0006F0ACFE182CF8D131494FF4F000FFF75E
:1056FC0065FA00284FD02E4A2E492F48FEF7DAFCC7
:10570C00021E40DB2D492E4806F018FB2D4A02F1F3
:10571C000C0102F1400052F8043F03EB8303824278
:10572C004FEA430341F8043FF5D1274806F0A4F9AA
:10573C00254806F015FA0AF0D5FC24492448FDF753
:10574C002FFD02210E2006F079FE02210F2006F01B
:10575C0075FE0A2007F084FB1E4B9FED1F0A0D20DF
:10576C00D3ED007AF8EE677A87EE800A07F0E8F955
:10577C0045F6BF5219491A48BDE8F84006F038BA48
:10578C00B34287D998E701320D480CBF1549164929
:10579C0006F0D4FABAE71549094806F0CFFAAAE799
:1057AC00B83500207C350020B93500202C3600207F
:1057BC00382C0020803500201C11002030120020D5
:1057CC009C1B0020AC1B0020042B00202414002068
:1057DC00182D0020441B002000C07F447D270000B2
:1057EC00B4220020EC13002018140020D413002045
:1057FC00994B9A481B682DE9F04F994C87B003934D
:10580C00FFF7BCFE216811F0010300F0EE81954A10
:10581C004FF08443906891689A6800F480789C6893
:10582C0001F04009130304F4802440F1DA808E4B1C
:10583C008E4D1A784AB18E492A680868121A642A61
:10584C0003D900202A6818700A60002C00F0978099
:10585C00884B1A7852B188492A680868834C121A06
:10586C00642A03D92068002208601A70834B1A78C6
:10587C00B9F1000F00F02881B8F1000F00F0AD81F4
:10588C00002A00F0C7817E4C2A6821687748521A9A
:10589C000A2A25D9006800216F4E7A4A20607A4F77
:1058AC00D6F8008012681970A7FB0237774B78483E
:1058BC001B68BF0C03FB07F7FDF770FE7448FDF780
:1058CC0077FE32461368C8EB03039F42FAD8DFF821
:1058DC00E8B1704BDBF800209B689A4200F04081E5
:1058EC00FFF784FE6C4980B25B4A0B8817688342D1
:1058FC006A4E2BD02A683368DFF870E1D21A142A6A
:10590C0025D900F00F02DFF8B4C108800C2A039BE4
:10591C00DEF80080A8BF0C22FF1ADFF8A4E15CF8C7
:10592C002200DFF868C17D2803460097024638BF85
:10593C007D23CCF80000C6F8008059494748BEFBCF
:10594C00F3F306F0FBF94548FFF762F933682A6870
:10595C004649D21AB2F57A7F02D90B68A3F57A734D
:10596C002968226833608B1A4049B3F57A7F02D9D3
:10597C000A68A2F57A72226007B0BDE8F08F3D4A42
:10598C001378002B7FF472AF3B492B680868374EB5
:10599C001B1A642B7FF66AAF336801264148DFF887
:1059AC0024B116700B6006F0DBF80AF09BFB2A4959
:1059BC00DBF800200E6862B13B4F07F206713846E7
:1059CC00FDF7EEFB0134DBF8003007F60A07A342C3
:1059DC00F3D8214B35491A682048921B06F0AEF9D2
:1059EC0044E7214A214D1778002F7FF42EAF204831
:1059FC002B6801685B1A642B7FF627AF01212E6898
:105A0C00DFF8C0B0117014490660DBF800200B6899
:105A1C000493BAB1244EDFF87CA030460137FDF771
:105A2C00B3FC234BDAF800003246DAF8081006F61D
:105A3C000A06002808BF1846FDF74CFDDBF80030BD
:105A4C00BB42EAD8044B1B491A68049B0348D21A80
:105A5C0006F074F9F9E600BF041000E09C1B00206E
:105A6C000C2B002000C00042A53500207C35002006
:105A7C00542B0020A6350020582B0020A4350020E4
:105A8C00502B0020481B002083DE1B43342C0020AD
:105A9C00602B002080350020E22200205C2B0020AF
:105AAC00A0140020042B0020182D002080140020AE
:105ABC00141700206414002090350020AC1B00202B
:105ACC0040420F00AC220020002A4DD0B8F1000F4C
:105ADC007FF4D9AEDFF8B0B1DBF80080614C2B68F5
:105AEC0022689B1AB3F5FA7FFFF4FAAE5E4BDFF82F
:105AFC0094A11B78002B00F083805C495C4F5D4EB9
:105B0C00D7F800800B685C4AA6FB03365B48136829
:105B1C00B60C0591049203FB06F6FDF73FFD5748C2
:105B2C00FDF746FD3846049A05990368C8EB030354
:105B3C009E42FAD8DBF800000026DAF808304A4F0B
:105B4C009842DFF844E13E7066D3B9F1000F7FF460
:105B5C00C7AEDAF80830DBF800209A427FF4C0AE0A
:105B6C000023CBF80030BBE6DFF81CB1CBF800907B
:105B7C00B8F1000F4ED13B4C2A682168404E521AA6
:105B8C000A2A7FF6ADAE3F4801213668826826604E
:105B9C00424519707FF6A4AE354E08EB010E334B1F
:105BAC004146344A37681B68CBF800E0A2FB033847
:105BBC00314B4FEA98481B6803FB08F8FDF77EFA57
:105BCC0001782E48FDF7DEFC2C48FDF7F1FC32463F
:105BDC001368DB1B9845FBD882E6DFF8ACB0DBF82A
:105BEC000080002A7FF47AAFC5E7244D1946402285
:105BFC002846A5F8403009F05DFF0123236006E636
:105C0C00DAF8083043453FF678AFB9F1000F7FF46E
:105C1C0067AE9EE7134C63E6154B00F1010C12685E
:105C2C001E680B6801461348CEF800C0A0FB0303A6
:105C3C0014480F4F9B0C02FB03F8FDF73FFA017859
:105C4C000E48FDF79FFC0D48FDF7B2FC3B689B1B13
:105C5C009845FBD80123044A1370B9F1000F7FF467
:105C6C003FAE76E7502B0020E9220020481B002095
:105C7C00041000E083DE1B43342C0020602B00203A
:105C8C007C3500208035002090350020024A0349E5
:105C9C00034808F0F7BD00BF401B0020B1270000EF
:105CAC00B422002010B50446006808B106F0A0FD2F
:105CBC00204610BD82B02DE9F041B2F101080E462C
:105CCC000546079354BFC44694464FEA6C0C614595
:105CDC005FDA0F467B1C05EBC70E580005EB031172
:105CEC00441E91ED007A05EBC403D3ED007AB4EEBB
:105CFC00E77AF1EE10FA01D40B46044664452746C8
:105D0C0093E803008EE80300E4DBD00705D4023AE5
:105D1C0048BF4246B4EB620F31D0B442DDED077A96
:105D2C00DDF820E023DD621E48BF22465210D10070
:105D3C00681890ED007AF4EEC77AF1EE10FA16DDE1
:105D4C006B1805EBC4079642144693E8030087E8EA
:105D5C0003000CDA511E48BF11464A10D1006818D6
:105D6C0090ED007AB4EEE77AF1EE10FAE8D4C3F8CD
:105D7C0004E0C3ED007ABDE8F04102B07047640066
:105D8C00013405EBC40292E8030083E803001346D8
:105D9C00C3E700EBC103D10701D43446B7E7DDED0F
:105DAC00077ADDF820E0E2E7884248D02DE9F0419F
:105DBC0000F10805A9422DED028B2CD08846074630
:105DCC00064696ED028AD7ED007AB4EEE78AF1EE3C
:105DDC0010FA24D455ED027AD5F804E0B4EEE78A33
:105DEC00F1EE10FA29D5334603F108021C4693E86C
:105DFC000300083B82E80300D3ED007AB4EEE78A97
:105E0C00F1EE10FAF0D484ED008AC4F804E0083501
:105E1C000836A845D5D1BDEC028BBDE8F081EA1B54
:105E2C006C68D30805D0C2F108003946284409F043
:105E3C00DDFD87ED008A7C60E9E72C46E3E77047DF
:105E4C002DE9F0479A460B1A84B0872B40F3CD808E
:105E5C0006461746002A00F099808E460C4600F143
:105E6C00080800F11009A41B96ED027A013F5EEDC3
:105E7C00026AE41048BF0134641006EBC403D3ED8E
:105E8C00007AB4EEE77AF1EE10FA59D5F4EEE67A30
:105E9C00F1EE10FA5ED4B4EEE67AF1EE10FA66D5B5
:105EAC0096ED007A7368F0EE477A1EE9030086E8F7
:105EBC0003004EF8043C0EED027AD6ED026A96ED24
:105ECC00007ACC4644467246B4EEE67A2546F1EEAC
:105EDC0010FA20DCB4EEE77AA2F10803F1EE10FA26
:105EEC001FD5A2F110031A46083BD2ED007AB4EE8E
:105EFC00E77AF1EE10FAF6D4944215D25CF8043C31
:105F0C0092E803000CE903005360C2ED006A52ED05
:105F1C00027A96ED007A08340CF1080CD4ED006A84
:105F2C00D2E71A469442E9D3534671463A46204684
:105F3C00FFF786FFA31B872B57DD47B3A64692E7D7
:105F4C00B4EEE67AF1EE10FA11D4F4EEE67AF1EE54
:105F5C0010FAA5D43468726893E8030086E803004D
:105F6C001C605A60D6ED026A5EED027AA7E7D6EDA8
:105F7C00007A7368F0EE676A98E80300C6ED027A5F
:105F8C00F36086E803005EED027A98E70D464FEA6F
:105F9C00E30A0DF10809AAF102084FEA680700E0CC
:105FAC00013F06EBC703524693E8030089E8030060
:105FBC00039C3946029B30460094FFF77BFE002F72
:105FCC00EED1083D95E80300AF1B89E8030096E885
:105FDC000300039CFA10029B85E803000094002147
:105FEC003046FFF767FE0F2FEBDC04B0BDE8F087FF
:105FFC0010B41A4B85B09FED1A6AD3F8001104AA9D
:10600C009FED185A02EB8000C1F30541D3F8F02044
:10601C0007EE901AD3F8F03002F03F02F8EEE76A80
:10602C00C3F3052307EE902A0F4AB8EEE77A07EE82
:10603C00903AC5EE265A0392F8EEE77AC6EE076A56
:10604C0086EE277ACDED005ACDED016A8DED027A00
:10605C0010ED040A05B05DF8044B704700800D404C
:10606C000000074600801446000004442DE9F0416E
:10607C0042680746D0F800800C46C8EB0203DB10E0
:10608C0005D05E00B3422CD96FF0070600E008265D
:10609C00304606F0ABFB7A680546D7F80080C8EBB3
:1060AC000202AB184FEAE20E03D094E8030083E837
:1060BC000300BEF1000F0DD103F10804B8F1000F7D
:1060CC0002D0404606F094FB2E443D607C60BE60DE
:1060DC00BDE8F0814146284603F1080409F086FC2E
:1060EC00EFE7B6F1005FCFD23546002ED7D01E01B8
:1060FC00CEE700BF2DE9F0433E4D83B04FF00008D2
:10610C002B686F466B604FEA08290024661C4046DA
:10611C00FFF76EFF6B6807EE906AA96849EA447452
:10612C0003F10802F8EEE77A8B42019480EE270A1D
:10613C008DED000A4FD01BB197E8030083E80300F4
:10614C006A60082E3446E1D108F10108B8F1040F59
:10615C00D9D195E8C000BE423AD0BC1B4FF0000329
:10616C0039463046E210B2FA82F2C2F11F025200F6
:10617C00FFF766FE872C33DD06F180053046294695
:10618C00FFF712FEAF4223D0783696ED027A55ED2A
:10619C00027AD5F804E0B4EEE77AF1EE10FA26D5DF
:1061AC00334603F108021C4693E80300083B82E8DF
:1061BC000300D3ED007AB4EEE77AF1EE10FAF0D4E6
:1061CC00083584ED007AC4F804E00836AF42DCD11F
:1061DC0003B0BDE8F08339460648FFF747FFB0E748
:1061EC0039463046FFF7E0FD03B0BDE8F0832C469E
:1061FC00E6E700BF042D002010B5FFF77BFF00235E
:10620C0001224FF4F0010248BDE8104000F0EAB959
:10621C000000007010B50446FFF76CFF094B0CCB67
:10622C009B1ADB109C420BD3013B98B2064902EB44
:10623C00C003064A88695B68024013438B6110BD3A
:10624C002046F3E7042D002000C00F40FFFCFF1F89
:10625C00F0B5134D85B00646FFF74CFF2B686A6806
:10626C00D21AD20819D0002403EBC40322460D49DC
:10627C00304693ED007A01345B68B7EEC77AC3F30E
:10628C0002275B0F8DED027B009705F057FD2B6805
:10629C006A68D21AB4EBE20FE6D305B0F0BD00BFCA
:1062AC00042D0020D014002010B5094CFFF722FF5C
:1062BC00A069C0F30120FFF79BFEA3695B0F0133BC
:1062CC0007EE903AF8EEE77A80EE270A10BD00BF91
:1062DC0000C00F4038B50C4C00234FF48070236085
:1062EC006360A36006F082FA4FF480720749206065
:1062FC008518A56006F0E0F920466560044A05495A
:10630C00BDE8384008F0BEBA042D0020FC04002083
:10631C00401B0020F52D000070B50C46054600F022
:10632C00DDF808B3FCB1A4F10C062846314600F0A8
:10633C00A7FAF0B1AB681BBB54F8083C0021E0187D
:10634C00E15041608160AB683BB154F80C2C0C30CF
:10635C0054F8083CD21A09F0ADFB002344F80C3C6D
:10636C007360B36070BD70BD08F0DEFF1623036070
:10637C0070BD074B214628461B68BDE87040184786
:10638C0054F80C2C0021204609F094FBD4E700BFF4
:10639C00B022002001460148FFF7BEBF00360020A6
:1063AC002DE9F04F054683B08846284600F096F854
:1063BC000446002800F08380B8F1000F6B6808BF1A
:1063CC004FF00108A3F10C0290451DD82C68002653
:1063DC0008F10C092746B34216D92146284600F08D
:1063EC004FFA40BB6B689E42F5D2A2462646314618
:1063FC00284600F045FAC4EB0A03834608B334463A
:10640C006B68F61BB342E8D8EB685BB14146284693
:10641C0098476B68984205D96860284600F072F876
:10642C000028C2D108F080FF00240C230360204612
:10643C0003B0BDE8F08F22686B6818321444E61B79
:10644C00C9E70C364B45A6EB0702B24605D26B6882
:10645C009A42CCD334461646BDE70C3BC4F80480B4
:10646C002046236000F084FAAB6807460190A060D8
:10647C00EBB904F10C0563680C33E61806F10C0853
:10648C00384600F053FA0190019846F8040B464543
:10649C0001D0019FF4E76368304622682C46FF2147
:1064AC00D21A09F007FB204603B0BDE8F08F04F1C7
:1064BC000C0059462268054609F0FCFADBE708F0A7
:1064CC0033FF16230360204603B0BDE8F08F00BFF6
:1064DC0001460148FFF764BF0036002003686BB12A
:1064EC00406860B1064BA3FB0023DB0803EB4303BE
:1064FC00B0EB830F0CBF012000207047184670478B
:10650C00ABAAAAAA08B503684268BBB17AB1104B12
:10651C00A3FB0213DB0803EB4303B2EB830303D0AF
:10652C00D21A4260F02A02D90123184608BD08F09D
:10653C00FBFE1C2200230260184608BD044BA3FB83
:10654C000213DB0803EB4303B2EB8303E8D1E9E767
:10655C00ABAAAAAA70B5044600283AD019B1B2FA6F
:10656C0082F56D09FDB1206808B1626832B908F096
:10657C00DBFE162300220360104670BD1849A1FBF8
:10658C000231C90801EB4101B2EB8101EFD1A368E3
:10659C000BB109F08FFA00230122236010466360CF
:1065AC00A360E36070BD1E46049B80E80600C360D8
:1065BC00FFF7A8FF02460028DED016B901221046CC
:1065CC0070BD94E80500A660294609F073FA012213
:1065DC00D2E708F0A9FE162322460360CCE700BFE1
:1065EC00ABAAAAAA00B583B0009313460A4601468B
:1065FC000248FFF7AFFF03B05DF804FB0036002044
:10660C000A4600230146014800F002B8003600207B
:10661C002DE9F04F85B00C46154683460193FFF7E4
:10662C005DFF002800F00E81002C00F01281002D7F
:10663C0000F0BD80A4F10C065846314600F020F95C
:10664C0000287AD054F8087C54F80C3CBD420093D6
:10665C0045D8DBF80820002A40F0C0800021E01962
:10666C00E15141608160DBF80830002B40F0B080D4
:10667C007F4BA3FB0523DB0803EB4302B5EB820F37
:10668C0000F09E80013303EB43039B0044F80C3C69
:10669C00304644F8085C04AE00F06AF954F8085C23
:1066AC00034644F8040C254446F8040D05F10C0788
:1066BC00184600F03BF903900346306845F8040B8C
:1066CC00BD42F5D154F80C2C284654F8083CFF2157
:1066DC00D21A09F0EFF9204605B0BDE8F08F009B07
:1066EC009D4230D8DBF80830002B6BD144F8085CA5
:1066FC00304600F03DF954F8085C04AE03462544DE
:10670C0044F8040C46F8040D05F10C07184600F08B
:10671C000DF903900346306845F8040BAF42F5D1F0
:10672C0054F80C2C384654F8083CFF21D21A09F0C6
:10673C00C1F9204605B0BDE8F08F4E4A21465846B7
:10674C00126890477EE74A4A009BDBF80080A2FB68
:10675C000332DBF80410D20802EB420206EB820A89
:10676C00C8EB0A00884214D205F10C0907E0494530
:10677C00C8EB0A0E38D2DBF804108E4509D251460C
:10678C00584600F07DF8C6EB0A010AF10C0A002805
:10679C00EDD0019B002B62D129465846FFF700FE35
:1067AC000546002861D03A46214605F085FF214672
:1067BC002C465846FFF7B0FD204605B0BDE8F08FDB
:1067CC002B4663E70023E219E351536093608DE796
:1067DC00009B0C30DA1B09F06DF949E75A1B0021BC
:1067EC00601909F067F939E7DBF80830A1F10C08FA
:1067FC00E3B9304644F8085C44F80C8C04AE00F065
:10680C00B7F854F8085C034644F8040C254446F8E1
:10681C00040D05F10C07184600F088F803900346A8
:10682C00306845F8040BAF42F5D179E7E319009ACB
:10683C00E05101465860D21B986003F10C0009F03E
:10684C0039F9D6E7064608F06FFD16233446036087
:10685C0041E729465846FFF7A3FD04463BE708F0FD
:10686C0063FD22230024036035E7019C33E700BF5E
:10687C00ABAAAAAAB022002000231B70FFDE00BF27
:10688C00B0B10368994211D34268134499420DD8B0
:10689C00086868B14B68984208D3234BA3FB0023CC
:1068AC00DB0803EB4303B0EB830F02D000207047EF
:1068BC0070472DE9F0410C4682B0084600F058F8BC
:1068CC00A36806460190984203D0002002B0BDE8B0
:1068DC00F08162680C3204EB0208474608F10C05A3
:1068EC00304600F023F80422064638460DEB020130
:1068FC001744019609F048F80028E6D1AF42EFD1D1
:10690C00236862689B1A0DD098F80C20FF2ADCD102
:10691C000B3308EB030203E015F8013FFF2BD4D136
:10692C009542F9D10120D1E7ABAAAAAA8102C0F302
:10693C000722C0F3074301F47F3151FA80F181EA59
:10694C0091110A4402EB822282EA9212134403EB65
:10695C00832383EA931303EB106000EB802080EA1F
:10696C00901000EBC00080EAD02000EBC0307047E4
:10697C0010B50446FFF7DAFF23681844FFF7D6FF7B
:10698C006368BDE810401844FFF7D0BF0020704783
:10699C0000207047002070470020704700042DE94C
:1069AC00F04300F470209CB2364D202620434FF06B
:1069BC00010805246E61B446DFF8D4E0C5F8B84090
:1069CC002E46C5F8A01005F5867545F8680C2E4CBA
:1069DC0045F85C8C2D4F0F2B16D971698806FAD5AA
:1069EC00103BD4F80090DEF80080103238680F2B82
:1069FC00296842F8109C42F80C8C42F8080C42F8BA
:106A0C00041CC6F814C0E8D8D81D53B3D6F8F0103F
:106A1C00C9B2B1EBD00FDED3032B30D918461446D4
:106A2C00194904380D680431032844F8045BF8D87C
:106A3C00191F174813F003034FEA91014FEA810421
:106A4C0001F10101204402EB8102016809D0012B04
:106A5C0011704FEA112004D0032B507001D1090C96
:106A6C0091707369074AD907FBD553691B0701D588
:106A7C0008235361034B01225A61BDE8F08321685E
:106A8C00E5E700BF00402A4000412A4008412A4067
:106A9C0004412A4038B5056802F500041846049BE9
:106AAC00D5F89C500246092005FB0141FFF776FF03
:106ABC00002038BD002A35D02DE9F04FC46983B0D1
:106ACC0054B390469B468A46074642694FF00009EC
:106ADC000021404608F0EEFF7A697C68434600923C
:106AEC0051464A463846A0477A6972B198F8003048
:106AFC00FF2B13D108F1010408EB020603E014F894
:106B0C00015BFF2D0AD1B442F9D1BBF1000F03D0C8
:106B1C009144FB694B45DBD8012000E0002003B019
:106B2C00BDE8F08F0020704710B5054C184623685F
:106B3C001344029A03EB014105F0BEFD002010BD89
:106B4C00402B002005480068104408B500EB0140BC
:106B5C00029A194605F0E4FC002008BD402B0020E9
:106B6C0008B5044B186800EB014005F04BFD002004
:106B7C0008BD00BF402B002030B498B10E4A0F4C1A
:106B8C00136824680133A142136008D8CC0801F0C3
:106B9C00070501230021025DAB4013430355084652
:106BAC0030BC7047044B1A6811B1044C186021605A
:106BBC00114630BC08467047A82B0020A42B00209F
:106BCC00F0B5D0F89C60C3B004460D463246FF21A8
:106BDC0002A808F06FFF94F8D130022205FB06F1F1
:106BEC00182B8DF8002000F0DB800A0E8DF80410B5
:106BFC000B0C090A8DF801208DF802308DF803106A
:106C0C00D4F8CC20D37C002B29D072B6D37CDD07F2
:106C1C0006D5684953690868034093620B60D37CBE
:106C2C00980706D56449936908680340D3620B60E2
:106C3C00D37C590706D56149D369086803401363AF
:106C4C000B60D37C1F0706D55D49136A08680340A7
:106C5C0053630B60D37CDE0600F1908062B6594D15
:106C6C009368AB4200F09A80574B95609B695748EC
:106C7C00C3F30117C3F38261554E50F8270001315D
:106C8C00B0FBF1F1CB09A6FB03039B0A6DD1D360DA
:106C9C001268002101200326072511615662136436
:106CAC001566106194F8D00005F0C2FB494A062322
:106CBC0012685366D36D13F4F81FFBD0012194F8BE
:106CCC00D000536F05F0B4FB43483221434B0568A9
:106CDC001B68434A1B0C01FB03F35B08A2FB03324A
:106CEC00120A03685B1B9A42FBD8002194F8D0006F
:106CFC0005F09EFB94F8D1306A466946DB10D4F857
:106D0C00CC00013307F072FFD4F89C30002202A9AA
:106D1C00D4F8CC0007F06AFF012194F8D00005F0FC
:106D2C0087FBD4F8CC20D37CE3B1DD0703D52D4B06
:106D3C00916A1960D37C9C0703D52B4BD16A1960DF
:106D4C00D37C580703D5294B116B1960D37C1907D9
:106D5C0003D5274B516B1960D37CDB0602D5926BA4
:106D6C00244B1A60002043B0F0BDB1FBF3F1A942F3
:106D7C0088BF0133022B08D8002388E71E49536AC9
:106D8C000868034093630B6068E7023B58080104F2
:106D9C0043EA002301F47F010B4378E7D36877E7DC
:106DAC000B0C8DF80310090A8DF801308DF80210C8
:106DBC0026E700BF80E100E084E100E088E100E02C
:106DCC008CE100E080C3C90100C00F40B80A00206C
:106DDC00C7541E014C1B0020041000E0481B00206F
:106DEC001123970800E100E004E100E008E100E075
:106DFC000CE100E010E100E090E100E0F0B5D0F82B
:106E0C00CC4083B0002C00F0D58090F8D140D0F865
:106E1C009C50182C05FB012200F0BE80140E13258B
:106E2C00110C8DF80420120A8DF800508DF80140D9
:106E3C008DF802108DF803200446089A184600219C
:106E4C001D4608F037FED4F8CC30DA7C002A2ED060
:106E5C0072B6DA7CD60706D558495A6908680240DA
:106E6C009A620A60DA7C900706D555499A690868D7
:106E7C000240DA620A60DA7C510706D55149DA69B8
:106E8C00086802401A630A60DA7C170706D54E4977
:106E9C001A6A086802405A630A60DA7CD60605D57D
:106EAC004A495A6A086802409A630A6062B6484EB8
:106EBC009A68B2427CD0474A9E6092694648C2F3B7
:106ECC00011EC2F38261454F50F82E000131B0FB18
:106EDC00F1F1CA09A7FB0202920A4BD1DA601B68D6
:106EEC00002101260327072019615F621A641866C6
:106EFC001E6194F8D00005F09BFA94F8D130D4F8C8
:106F0C00CC006A463B416946334407F06FFE089B50
:106F1C002A462946D4F8CC0007F068FE314694F88E
:106F2C00D00005F085FAD4F8CC20D37CFBB1DD077A
:106F3C0003D52B4B916A1960D37C9C0703D5294B45
:106F4C00D16A1960D37C580703D5274B116B196094
:106F5C00D37C190703D5254B516B1960D37CDB0609
:106F6C0005D5926B0020224B1A6003B0F0BD0020B7
:106F7C0003B0F0BDB1FBF2F1B14288BF0132022A7D
:106F8C0001D80022AAE7023A5008010442EA002282
:106F9C0001F47F010A43A1E70325140C110A8DF8B3
:106FAC0003208DF800508DF801408DF8021043E756
:106FBC00DA6894E76FF00400DAE700BF80E100E0E4
:106FCC0084E100E088E100E08CE100E090E100E089
:106FDC0080C3C90100C00F40B80A0020C7541E016D
:106FEC0000E100E004E100E008E100E00CE100E079
:106FFC0010E100E00068FFF701BF00BF2DE9F84F7A
:10700C0004460F46DFF8BCB105F0BAF9DFF8B8A1B9
:10701C000646DFF8B891604DD4F8CC20D37C002B19
:10702C0033D072B6D37CD90707D55C4B196853693A
:10703C000B405A4993620B60D37C980707D5584B89
:10704C00196893690B405649D3620B60D37C59077E
:10705C0007D5D9F80010D3690B401363C9F8003079
:10706C00D37C180707D5DAF80010136A0B4053636A
:10707C00CAF80030D37CD90606D5DBF80010536A69
:10708C000B409363CBF8003062B69368AB427AD076
:10709C00444B95609B694448C3F3011CC3F3826164
:1070AC00DFF82CE150F82C000131B0FBF1F1CB09E9
:1070BC00AEFB03039B0A07D0B1FBF3F1A94288BFD7
:1070CC000133022B56D80023D360126800214FF0F5
:1070DC00030C4FF0070E01201161C2F824C0136499
:1070EC00C2F860E0106194F8D00005F0A1F9D4F872
:1070FC00CC202E4B4FF4A0601268116E0B4043F065
:10710C000F0313665066136F9B07FCD411660121A5
:10711C0094F8D000D2F8748005F08AF9D4F8CC2019
:10712C00D37CE3B1D80703D5214B916A1960D37C8A
:10713C00990703D51F4BD16A1960D37C580703D527
:10714C001D4B116B1960D37C190703D51B4B516B6D
:10715C001960D37CDB0602D5926B194B1A6018F0C0
:10716C00010812D005F00CF9801B874210D307F0F0
:10717C008DFA51E7023B5808010443EA002301F45D
:10718C007F010B43A0E7D3689FE74046BDE8F88F2B
:10719C006FF00400BDE8F88F80C3C90180E100E006
:1071AC0084E100E000C00F40B80A002000F0FFFFAF
:1071BC0000E100E004E100E008E100E00CE100E0A7
:1071CC0010E100E090E100E08CE100E088E100E0FB
:1071DC00C7541E01F0B5D0F8CC6083B0002E00F07F
:1071EC00F58090F8D140D0F89C50182C05FB01226A
:1071FC0000F0DE80140E1225110C8DF80420120AFA
:10720C008DF800508DF801408DF802108DF8032098
:10721C00F27C002A2ED072B6F27CD70706D56D49C7
:10722C0072690C682240B2620A60F27C950706D53E
:10723C006949B2690C682240F2620A60F27C540718
:10724C0006D56649F2690C68224032630A60F27C0A
:10725C00110706D56249326A0C68224072630A60D3
:10726C00F27CD70605D55F49726A0C682240B2637E
:10727C000A6062B65C4DB268AA4200F0A5805B4A17
:10728C00B56092695A4CC2F3011EC2F38261594F28
:10729C0054F82E400131B4FBF1F1CA09A7FB0242AC
:1072AC00920A73D1F2600446002101201D46032787
:1072BC003368072619615F621A641E66186194F8B8
:1072CC00D00005F0B5F8D4F8CC3006221B685A660D
:1072DC00DA6D12F4F81FFBD0012194F8D0005B6F2B
:1072EC0005F0A6F84448FA23444A06681268444953
:1072FC00120C03FB02F25208A1FB0231090A0268CC
:10730C00921B9142FBD8002194F8D00005F090F824
:10731C0094F8D130D4F8CC006A46DB1069460133BE
:10732C0007F064FC089B00222946D4F8CC0007F037
:10733C005DFC012194F8D00005F07AF8D4F8CC204B
:10734C00D37CE3B1DE0703D52E4B916A1960D37C55
:10735C009D0703D52C4BD16A1960D37C580703D5F4
:10736C002A4B116B1960D37C190703D5284B516B31
:10737C001960D37CDB0602D5926B264B1A60D4F8CD
:10738C00D4102046FFF73AFE03B0F0BDB1FBF2F18A
:10739C00A94288BF0132022A01D8002282E7023AB0
:1073AC005408210442EA042201F47F010A4379E7DC
:1073BC000225140C110A8DF803208DF800508DF85D
:1073CC0001408DF8021023E7F2686CE76FF00400BF
:1073DC00DAE700BF80E100E084E100E088E100E052
:1073EC008CE100E090E100E080C3C90100C00F40D7
:1073FC00B80A0020C7541E01041000E0481B0020EE
:10740C001123970800E100E004E100E008E100E04E
:10741C000CE100E010E100E00068FFF7DBBE00BF0C
:10742C00D0F8CC30002B00F01281F0B5044683B0BC
:10743C00D0F894000D4607F0C9FF064660B102462D
:10744C000123294604F18000FFF734FB002840F0AB
:10745C00E180304607F0C2FF94F8D120D4F89C307C
:10746C0094F8D200182A03FB05F18DF8000000F007
:10747C00E5800A0E8DF804100B0C090A8DF801201A
:10748C008DF802308DF80310D4F8CC20D37C002B6F
:10749C0040F081806F4D9368AB4200F0B0806E4B32
:1074AC0095609B696D48C3F30117C3F382616C4E01
:1074BC0050F827000131B0FBF1F1CB09A6FB030317
:1074CC009B0A40F09E80D3601268002101200326A5
:1074DC0007251161566213641566106194F8D0008B
:1074EC0004F0A6FFD4F8CC20062312685366D36DA3
:1074FC0013F4F81FFBD0012194F8D000536F04F063
:10750C0097FF5848FA21584B05681B68574A1B0CC3
:10751C0001FB03F35B08A2FB0332120A03685B1B3B
:10752C009A42FBD8002194F8D00004F081FF94F823
:10753C00D1306A46D4F8CC00DB106946013307F031
:10754C0055FB012194F8D00004F072FFD4F8CC2044
:10755C00D37C33B9D4F8D8102046FFF74FFD03B0D5
:10756C00F0BDDE0703D5424B916A1960D37C9D07B1
:10757C0003D5404BD16A1960D37C580703D53E4BD9
:10758C00116B1960D37C190753D4DB06E2D5926BCF
:10759C003A4B1A60DEE772B6D37CDE0706D5384963
:1075AC0053690868034093620B60D37C9D0706D532
:1075BC003449936908680340D3620B60D37C580745
:1075CC0006D53149D3690868034013630B60D37C3B
:1075DC00190706D52D49136A0868034053630B60DD
:1075EC00D37CDF0605D52A49536A086803409363A8
:1075FC000B6062B6174D9368AB427FF450AFD36803
:10760C0062E7B1FBF3F1A94288BF0133022B07D823
:10761C00002358E7304607F0E1FE002003B0F0BD30
:10762C00023B5808010443EA002301F47F010B4399
:10763C0049E7184B516B1960D37CA6E70B0C8DF8FE
:10764C000310090A8DF801308DF802101CE76FF059
:10765C000400704780C3C90100C00F40B80A002065
:10766C00C7541E01041000E0481B0020112397088A
:10767C0000E100E004E100E008E100E010E100E0DE
:10768C0080E100E084E100E088E100E08CE100E0D2
:10769C0090E100E00CE100E00068FFF7C1BE00BF24
:1076AC00F0B5D0F8CC4083B0002C00F0D28090F82C
:1076BC00D1400325D0F89C60182C8DF8005006FBA7
:1076CC00012200F0BD80140E8DF80420110C120A5A
:1076DC008DF801408DF802108DF803200446089AAD
:1076EC00184600211D4608F0E5F9D4F8CC30DA7CB8
:1076FC00002A2ED072B6DA7CD60706D556495A69BE
:10770C00086802409A620A60DA7C900706D55349F1
:10771C009A6908680240DA620A60DA7C510706D579
:10772C004F49DA69086802401A630A60DA7C170765
:10773C0006D54C491A6A086802405A630A60DA7C1A
:10774C00D60605D548495A6A086802409A630A6009
:10775C0062B6464E9A68B24270D0454A9E609269B3
:10776C004448C2F3011EC2F38261434F50F82E000D
:10777C000131B0FBF1F1CA09A7FB0202920A4BD10D
:10778C00DA601B68002101260327072019615F625C
:10779C001A6418661E6194F8D00004F049FE94F83F
:1077AC00D130D4F8CC006A463B416946334407F0EB
:1077BC001DFA089B2A462946D4F8CC0007F016FA85
:1077CC00314694F8D00004F033FED4F8CC20D37CAE
:1077DC00FBB1DD0703D5294B916A1960D37C9C075B
:1077EC0003D5274BD16A1960D37C580703D5254B99
:1077FC00116B1960D37C190703D5234B516B19609E
:10780C00D37CDB0605D5926B0020204B1A6003B0AD
:10781C00F0BD002003B0F0BDB1FBF2F1B14288BF66
:10782C000132022A01D80022AAE7023A50080104C8
:10783C0042EA002201F47F010A43A1E7DA68A0E7DB
:10784C00110C8DF80320120A8DF801108DF802200E
:10785C0044E76FF00400DDE780E100E084E100E044
:10786C0088E100E08CE100E090E100E080C3C90118
:10787C0000C00F40B80A0020C7541E0100E100E010
:10788C0004E100E008E100E00CE100E010E100E0C0
:10789C000068FFF705BF00BFF0B5D0F8CC6083B02F
:1078AC00002E00F0018190F8D1400225D0F89C7098
:1078BC00182C8DF8005007FB012200F0EC80140E00
:1078CC008DF80420110C120A8DF801408DF802106D
:1078DC008DF80320F27C002A2ED072B6F27CD707EA
:1078EC0006D5734972690C682240B2620A60F27C58
:1078FC00950706D56F49B2690C682240F2620A609E
:10790C00F27C540706D56C49F2690C68224032634C
:10791C000A60F27C110706D56849326A0C6822406D
:10792C0072630A60F27CD70605D56549726A0C68E9
:10793C002240B2630A6062B6624DB268AA4200F09D
:10794C00A880614AB5609269604CC2F3011EC2F313
:10795C0082615F4F54F82E400131B4FBF1F1CA093A
:10796C00A7FB0242920A40F08280F260002104469A
:10797C00032701201D463368072619615F621A64CC
:10798C001E66186194F8D00004F052FD514E524915
:10799C003222524F086833681B0C02FB03F35B085E
:1079AC00A7FB03231B0A0A68121A9342FBD84C4B01
:1079BC0006221B685A66DA6D12F4F81FFBD00121FF
:1079CC0094F8D0005B6F04F033FD434832224349F6
:1079DC00076833681B0C02FB03F35B08A1FB033144
:1079EC00090A0268D21B9142FBD8002194F8D000FE
:1079FC0004F01EFD94F8D130D4F8CC006A46DB10AC
:107A0C006946013307F0F2F8089B00222946D4F8A6
:107A1C00CC0007F0EBF8012194F8D00004F008FD3D
:107A2C00D4F8CC20D37CFBB1DD0703D52D4B916A68
:107A3C001960D37C9C0703D52B4BD16A1960D37C7E
:107A4C00580703D5294B116B1960D37C190703D543
:107A5C00274B516B1960D37CDB0605D5926B00204C
:107A6C00244B1A6003B0F0BD002003B0F0BDB1FB95
:107A7C00F2F1A94288BF0132022A01D8002274E730
:107A8C00023A5408210442EA042201F47F010A4319
:107A9C006BE7F2686AE7110C8DF80320120A8DF877
:107AAC0001108DF8022015E76FF00400DDE700BF30
:107ABC0080E100E084E100E088E100E08CE100E09E
:107ACC0090E100E080C3C90100C00F40B80A00205B
:107ADC00C7541E01481B0020041000E01123970816
:107AEC004C1B002000E100E004E100E008E100E0B4
:107AFC000CE100E010E100E00068FFF7CDBE00BF34
:107B0C00D0F8CC30F3B170B50446D0F894000D46E3
:107B1C0007F05CFC064650B102460123294604F1ED
:107B2C008000FEF7C7FF40B9304607F057FC2946E6
:107B3C002046BDE87040FFF743B8304607F04EFCD6
:107B4C00002070BD6FF00400704700BF0068FFF7A5
:107B5C00D7BF00BF30B583B00D4604F011FC04460E
:107B6C0006E004F00DFC001B854210D306F08EFDE0
:107B7C000D2001230DF107024FF40001FEF70EFF5B
:107B8C009DF8070010F00100EBD103B030BD6FF091
:107B9C00040003B030BD00BFF0B52D4F83B00646D6
:107BAC004FF4000C4FF4202E01203C46089DC7F8E2
:107BBC00A0C0C7F8A4E0C7F8B0006069244F10F06B
:107BCC00010FFAD0000701D50820786120484FF04A
:107BDC00010E02F50002AFB2C0F814E0D6F89C40DA
:107BEC0047F4302704FB01210446C0F8A010C0F86C
:107BFC00A470C0F8B0E001E0520613D462691449D5
:107C0C0012F00100F8D0130701D508234B61104B7B
:107C1C00012230465A61D6F8D01003B0BDE8F040CE
:107C2C00FFF798BF082D4FF008020BD9083D1946F5
:107C3C00134408480093019304F03EFD4022009B3E
:107C4C006261DBE7002DD9D02A460546EFE700BF7D
:107C5C0000402A4080412A400068FFF79DBF00BFCA
:107C6C0070B50446D0F894000D4607F0AFFB60B138
:107C7C00064602460123294604F18000FEF71AFF4E
:107C8C0000283CD1304607F0A9FB1F4B4FF40006EF
:107C9C004FF4202001211A46C3F8A060C3F8A400B9
:107CAC00C3F8B01053691849D807FBD51E0723D465
:107CBC00154B01204FF4402658611A46D4F89C10FD
:107CCC0001FB05F101F50001C3F8A010C3F8A46095
:107CDC00C3F8B00053690C49D807FBD51B0701D575
:107CEC0008234B61084B012220465A61D4F8D4106A
:107CFC00BDE87040FFF72EBF08234B61D8E7304634
:107D0C0007F06CFB002070BD00402A400068FFF7B4
:107D1C00A7BF00BF826E436D10B4146A826DE31A64
:107D2C001944B1FBF4F304FB131191420BD2426ED4
:107D3C000123480901F01F0152F8204003FA01F118
:107D4C00214342F8201000205DF8044B704700BF1F
:107D5C0011F0805F0268174B30B4174C08BF2346F4
:107D6C0081EA02041C4215D042F30903013311D0FD
:107D7C00124D134B15400F4C2B430C409C4209D019
:107D8C000B0D03F4E064B4F5806F07D0002330BC16
:107D9C00184670470123184630BC7047C1F389213F
:107DAC00C2F389248C42F1D359B2002302EB812215
:107DBC000260F0E700FCFF7F00FC0F7000FC0F007E
:107DCC000000F04F10B4024641F309040020136880
:107DDC00B4F1FF3F08BF01315DF8044B0433C1F32C
:107DEC0009011944116070470246002013680133E1
:107DFC0013607047836E1A6B10B5044652B15A6B00
:107E0C006AB19B6B0BB1002010BD606E07F0E6FAF7
:107E1C00002010BDC06807F0E1FAA36EEFE7E0693F
:107E2C0007F0DCFAA36EECE70B6B70B5044682B07E
:107E3C008166002B48D08A6AC3604B6B002B35D00F
:107E4C00E361FF21E06807F035FE4FF0FF36A36ECB
:107E5C00FF212660E0699A6A07F02CFEA56E266168
:107E6C00AB6B002B3BD06366EB6B03B92723E3664C
:107E7C002B6CC3B123676B6C0BB940F2FE334FF024
:107E8C00FF3063670023206260621846A362E362DE
:107E9C00E3632364636423636363A363A364E364A2
:107EAC00236502B070BD6FF00043E3E7104601920A
:107EBC0007F08CFA019AE0610028C2D12046FFF746
:107ECC0099FF6FF00B00ECE78D6A0191284607F0E3
:107EDC007DFAE0600028F1D02A460199ADE7E86A06
:107EEC0007F074FA60660028BED1E7E72DE9F04F81
:107EFC00046885B0266A0E9F0F9DBE42DDF8448053
:107F0C0040F2A780E46905EB080EA64500F2A180BB
:107F1C00B8F1000F7AD09A461646013B8946834643
:107F2C000393B9F1000F04D0D9F800300E9A9A429D
:107F3C0035D03368C6460E9A9A4242D0DBF80040E0
:107F4C00C2456169B5FBF1F201FB125202D80AB9C4
:107F5C00414542D9039BAA1AA76A2B440E9872601A
:107F6C000B4430602046B3FBF1FE01FB1E315B1A63
:107F7C00E1698B4294BFC2EB030EC2EB010EF368B6
:107F8C000E99BE4528BFBE46CDF800E0C6F808E005
:107F9C006468A0470028C4D005B0BDE8F08FD9F8BC
:107FAC000410D9F808200A44AA42C2D9A94247D9D8
:107FBC00C5EB010E33680E9AC64528BFC6469A42D9
:107FCC00BCD17168B3680B44AB42B7D9A94221D973
:107FDC00491B8E4528BF8E46B0E7BEFBF1FC01FB6A
:107FEC001CEC2046109B2A46CCEB0E070E990097F2
:107FFC006468A0470028CFD1109BC7EB08083D440C
:10800C001A463A441092B8F1000F8AD1002005B0FC
:10801C00BDE8F08F5C1B691AF3687445109828BF93
:10802C0074461944224604F047FB109BC4EB080825
:10803C00254423441093B8F1000F7FF472AFE5E7A9
:10804C00541B691AD9F80C304445109828BF444683
:10805C00E7E76FF053009FE72DE9F04F1646C26B30
:10806C0089B00C694FEA125881468A469B4618F42F
:10807C00E0680794CD680ED0036C0968994267D00C
:10808C00476CDAF80400984218BFB84260D08F42AF
:10809C005ED04FF00008B30AC3F30903059309F14E
:1080AC00680304930BE0220D02F4E061B1F5806FDC
:1080BC00C8EB0B015BD0614031402DD01C4644F322
:1080CC0009076FF00302B7F1FF3F14BF2346631C8F
:1080DC00C3F3090303F10801D21A8D425ED3DAF817
:1080EC000000154407A9042300904A460291002180
:1080FC00039301950498FFF7F9FE30BB079B059A93
:10810C001BBA634023F000430793002ACBD1C8EB82
:10811C000B0161403140D1D101373FD0C4F3090686
:10812C00149F129B4A46BE42DAF8000003F1040386
:10813C0028BF3E4600901D44139B0498029333467F
:10814C0003960195FFF7D2FE68B309B0BDE8F08F36
:10815C00B30AC3F30901F9B1C2F38928CBF389211E
:10816C00164841452CBF80464FF0000894E7C4F3F5
:10817C008920C1F3892E86459DD3DFF848E010484D
:10818C0001EA0E0E4EEA0000A04207D052B208EBF4
:10819C008228C8EB0B01BCE788467DE76FF0010035
:1081AC0009B0BDE8F08F149B01469A1B139B9819DC
:1081BC0007F080FC04EB0800C7E700BF00FCFFFFE2
:1081CC000000104000FC0F0070B588B000230C2696
:1081DC00144605AD0E4A8DE868000E4BFFF73CFFC8
:1081EC00002803DA831C01D008B070BD02300BD01C
:1081FC002168059B65685940A068069A079B6A40F0
:10820C00216043406260A360002008B070BD00BFD5
:10821C000000F07F0C00F07F2DE9F04140F2FF34BC
:10822C0086B0A24234D01D46C36E9402002701339F
:10823C0005F1080200970646234301921E4A884620
:10824C00C3F3090ECDF808E0FFF706FF00281CDB8E
:10825C00000D4FF0080E04AA184B287041460192ED
:10826C00304600972343CDF808E0154AFFF7F4FE9B
:10827C0000280ADB030D40F20222934299B217D078
:10828C0040F2012399420CD0384606B0BDE8F0818B
:10829C000C4A02210020128819701A8106B0BDE820
:1082AC00F081C0F3090338466B6006B0BDE8F0817D
:1082BC00059B38466B60E8E700FC0F78080000204F
:1082CC0000FC0F70C81500202DE9F04F97B08946BF
:1082DC001D46DFF8F081229C9246BDF99810C4F33C
:1082EC00892304EA0808209E0A938B02219F0D9390
:1082FC00BDF890300B900E93BDF894300C910F9309
:10830C0045F309030AF1040BD9F80C20B3F1FF3F34
:10831C0014BF2B466B1CC3F3090303EB0B049442F1
:10832C004CD3002F40F3C580013F96E8120008366D
:10833C001391239B4B4013EA0800E1D10A9B002BBD
:10834C005ED1C1F30A53002BDAD040F201129342F2
:10835C0000F08A80B3F5817F75D1C1F30903002B3E
:10836C00CED04FF0000BCDF84090CDF844A008349F
:10837C0020965E46DDF83090AB46DDF8A0A0279D38
:10838C0004E01399C1F30902964266D2C1F3892124
:10839C00236814F808EC013601EB090054F8042C9E
:1083AC000EF5407E0C3443EA8021504641EA0E51D2
:1083BC00A8470028E5D017B0BDE8F08F13A8DDF86A
:1083CC002CE0D9F8003004210290704600937246DC
:1083DC000B460391019400216830FFF787FD0028BC
:1083EC00E9D1139B211DD9F80020A2461BBA159187
:1083FC00149214AC5D4045F000451395294698E75E
:10840C000DF14C0E2D4B06905246079349460590A4
:10841C002B46049003900290CDF820E00B988DE849
:10842C00C000FFF751FF0028C5DB7FF469AF13993B
:10843C000E9AC1F389239A423FF662AF0F9A9A4281
:10844C003FF67FAF5CE70D9B224628981944279B8B
:10845C00984700283FF454AFADE7DDF840905D46F7
:10846C00DDF844A0209E4BE7C1F30900C1F389233A
:10847C0028994FF000521B1A00F1010E0891279910
:10848C00049007910E490392029121460C9CCDF861
:10849C0014E0234400240B981BB22246019406934B
:1084AC004FF0FF330094FFF70FFF00283FF428AF85
:1084BC0081E7002017B0BDE8F08F00BFA14E00008F
:1084CC0000FC0F600000F07FF0B5134687B0026827
:1084DC000446D3F804E00826906E04AD1F6802F140
:1084EC001001C36902F16800039602958DE8804083
:1084FC00FFF7FCFC80B9049962688A420CD0A3682F
:10850C000598984218BF994214BF01230023824258
:10851C000CBF002003F0010007B0F0BD2DE9F04FB7
:10852C00846E97B01568246AA54280F06381556803
:10853C00AC4240F25F81059300238B46824600F1EA
:10854C006809A2F1040810AF1D4601241093119381
:10855C00049258F8046F00210423524601914846B6
:10856C000096661E03930297FFF7C0FC04F001020D
:10857C0016A9002818BF10F1540F04F1010401EBE7
:10858C00820240F0398110F1540306D052F8182CB5
:10859C003B689B1A002BC8BF3546032C07F1040718
:1085AC00D7D105F001034FF0FF310135049E08913E
:1085BC0016AC05F00101002208460A9156F823106A
:1085CC0004EB8303CBF8001056F820100BF10800D5
:1085DC0053F8183C09900220CBF804100790CBF804
:1085EC000830CBF80C200023AF49089A4FF0FF3528
:1085FC000B931E46049312AB4FF001080692042213
:10860C0003C983E803000999284603F019FA0D9071
:10861C0045F30904DAF86830DBF800000421B4F102
:10862C00FF3F14BF2C466C1C0EAFDB695246C4F3E3
:10863C000904039100900021043402974846264413
:10864C000196FFF753FC0446002840F01D810422DC
:10865C000EA90D9803F0F4F90E9F0D903FBA6F40E0
:10866C00002F0E97C0F2148147F30902DAF8683034
:10867C00B2F1FF3F14BF3A467A1CDB69C2F3090220
:10868C000432B118994200F2FA803D0D05F4E06015
:10869C00B0F5A06F7DD0042A00F0E78004240FAD64
:1086AC0013E00D9803F0CCF90E990D9041F30903EA
:1086BC00B3F1FF3F14BF0B464B1CC3F30903043348
:1086CC009C4262D2DAF86830DB69DBF800203019A2
:1086DC000021CDF80C80009252460190484602953C
:1086EC000134FFF703FC012229460028D9D010F1F0
:1086FC00540F40F081800E994FF000030D0D8BF854
:10870C00163005F4E060F8B9C1F38923049A9A4253
:10871C0001D801330493209B059A4B4013EA0204C1
:10872C0001D03D4674E7DBF80000331D14AA149009
:10873C0015932398229B98470028C0F29D805ED108
:10874C000E9B3D46069363E7B0F5806F62D0B0F5A3
:10875C00C06FE0D1DAF8683012ACDBF800004FF0F3
:10876C00080E311DDB69029405F00104019152469B
:10877C0000900021CDF80CE048460B94FFF7B6FBB7
:10878C0010F1540F1AD00E99C5E70D0D05F4E060E9
:10879C00B9E7DBF80020301D0FAD21460092042212
:1087AC0001904846039252460295FFF79FFB002822
:1087BC0040F0F3800F9A0D9B9A427DD04FF000034E
:1087CC008BF81630DBF80C30002B40F0B08016A87C
:1087DC000A9B00EB830353F8183CCBF80830079B3B
:1087EC009BE80600013BCBF80410CBF80020079364
:1087FC007FF4F9AE6FF0530017B0BDE8F08F0E9A0E
:10880C0006992A4B51400B40FBB94FF0FF333D46C4
:10881C000693FDE606986DB2254A264B0240049855
:10882C00134328448B4282B2049220D00698431CF6
:10883C003FF471AFC0F38923C1F389229342FFF453
:10884C006AAF00EB8523069365E702287FF469AFD6
:10885C00069BC2F38921C3F389238B42FFF461AFDA
:10886C0042F000433D460693D2E639464BE7069B61
:10887C0043F0004306934EE710F1540FBCD18BF834
:10888C001640DBF80C309FE710F1540F96D0B3E78D
:10889C002B0D03F4E063B3F5A06F3BD0DBF80C3089
:1088AC0000228BF816208FE7F004002000FCFF7FDD
:1088BC0000FC0F000000F04F0E9B0422069C0DA93B
:1088CC001B0DDAF82C00089487EAC37503F0B8F88E
:1088DC000E9BCAF82C004FF0FF3043F30901129A9B
:1088EC000D90814208BF0133BDF81010CBF8182051
:1088FC00C3F30903ABF81410139A04339DF82C102E
:10890C00CBF8105033448BF81710CBF81C20CBF855
:10891C000C307DE6DAF86820DBF80C309169B3FB9B
:10892C00F1F201FB1232002ABAD10122B9E7DAF8CE
:10893C003C301A0D12F4E06F1ED0DAF84040DBF830
:10894C0000108C4209D0DAF84420DBF80400824293
:10895C0018BF844201D091420ED1089AC3F38923E7
:10896C00C2F389229A4227D00898441C2ED09A42EE
:10897C0002D9A0F580630893219B4BB1089BC3F3EC
:10898C008923BBF81420934228BF1346219A1380E5
:10899C00089B002B06DB08982EE710F1540F3FF4D0
:1089AC000DAF29E7C3F38923BBF814209A4294BF77
:1089BC0000206FF001001FE7089B43F00043089371
:1089CC00C3F38923219A002ADBD1EDE740F2FF3370
:1089DC00F8E700BF2DE9F0470123002588B01446C5
:1089EC0006468846DFF86CA0DFF86C90D361956181
:1089FC00E2694FF0000E164B21460132304604F16D
:108A0C0018021BD0B76E3F6AB5EB570F05F1010585
:108A1C0019D2D8F8007005960697D8F80470CDF8DE
:108A2C0008A0079705AF8DE800420397FFF776FD86
:108A3C0008B1831C04D1A3690133D9D16FF00100B3
:108A4C0008B0BDE8F0876FF0530008B0BDE8F087C0
:108A5C00FF03F07F19560000080000202DE9F04FAD
:108A6C0000239046012287B082461C46C8F81C2081
:108A7C00894608F118021D461E464FF0FF3B059231
:108A8C00C8F81830D8F81CE04FF0FF33059A41466F
:108A9C009E4550461FD0DAF868703F6AB5EB570F09
:108AAC0005F1010520D2D9F80070A74218D0D9F8E9
:108ABC0004C0774518BFF44512D0A44510D00396D6
:108ACC0002960196CDF800B0FFF728FD28B9D8F82A
:108ADC001840631CD6D16FF0010007B0BDE8F08FD1
:108AEC00002007B0BDE8F08F6FF05300F5E700BF32
:108AFC0070B5002584B04FF0FF360C4601F12C0206
:108B0C00039508313346029501950096FFF706FD53
:108B1C0008B9A080A06204B070BD00BF2DE9F04F71
:108B2C000E468DB01168074606921A4607930591BA
:108B3C0013B140F2FF3313803A6A7B6ADFF8588135
:108B4C00B261F361059C5049204608F041F8044499
:108B5C0081464D49204607F027FF0128054675D070
:108B6C0002287BD063194FF0010A05939B4601E064
:108B7C000AF1010A4449584608F02AF80BEB00099F
:108B8C004149484607F010FF88B1022809EB000B59
:108B9C00EED102463D49484606F0F6FE0028E7D1E4
:108BAC00BAF1010AE6D109F102030593CAE7237869
:108BBC00002B33D0C8F30A53069A022B14605FD1F2
:108BCC00C8F3892840F2FF3398452BD106F11809D8
:108BDC000DF1240BDFF8C4A0DDF81C8003E048D1B4
:108BEC00F37D002B47D02F21204607F0A7FC00284F
:108BFC00CDF80CB04FF0F0430CBF41460021CDF83E
:108C0C0008A04A46019138460095314609970A94C6
:108C1C000B95FFF783FC0028E1DA804640460DB047
:108C2C00BDE8F08F08224FEA8828194B06F1180985
:108C3C0000903146029248EA0303CDF8049038467E
:108C4C00144AFFF709FA0028C2DAE8E7059B13F883
:108C5C0009302E2B86D16319059373E702460B4915
:108C6C00204606F091FE00287FF47CAF6319059333
:108C7C0068E7804666E76FF001000DB0BDE8F08F45
:108C8C006FF01300CBE700BFC81500208810002040
:108C9C000800002000FC0F7000FC2F00D9630000BE
:108CAC002DE9F04F934687B0826E1C46109F81468B
:108CBC00D3698A46013F119EA3F10808129DB7FBA8
:108CCC00F8F0002836D0013806F064F90230A7EB32
:108CDC008007B7FBF8F809F1680921462846B04728
:108CEC0028BBB8F1000F21D008F0010704AB0190AC
:108CFC005A46C7F10207029300945146BB004846FE
:108D0C000393FFF7F3F890B903467C1E03E0049934
:108D1C00B047012358B9A3422846F8DB06ABC7EB92
:108D2C00080803EB840454F8084CD6E7404607B017
:108D3C00BDE8F08F8046CEE72DE9F04F91B00546A7
:108D4C0089469246002108A82022059306F0B2FE1F
:108D5C000021012308268B460F930F9B013348D02B
:108D6C00AB6E1B6ABBEB530F80F0A7805046C84715
:108D7C0000284CD10F995046C847002847D14FF0D6
:108D8C00FF31039002900EAA01900B4600912846E9
:108D9C0008A9FFF7C3FB002839D1BDF834301BB349
:108DAC0004460DF118080746A202454B029608A985
:108DBC001343CDF8048000972846424AFFF74CF93C
:108DCC00002822DB000D40F20223984282B221D00F
:108DDC00B2F5007F02D1059B002B31D10134BDF8D7
:108DEC003430A4B2A342DFD80E990BF1010B4A1C0C
:108DFC00B3D1AC6A3CB14E465746A379012B30D067
:108E0C002468002CF9D1002001E0831CE6D011B0BD
:108E1C00BDE8F08F07980028E0D0069B2A46CDF8D5
:108E2C0008A000218DE801022846FFF739FF002831
:108E3C00EDD10134BDF83430A4B2A342B4D8D3E799
:108E4C0006995046C8470028E1D107995046C847B3
:108E5C000028DCD10134BDF83430A4B2A342A3D82D
:108E6C00C2E7236B03F48812B2F5803F14D003F4ED
:108E7C009013B3F5003FC3D1606B0028C0D0A36B37
:108E8C002A46029704F140018DE841002846FFF77D
:108E9C0007FF0028B4D0BAE7E06A0028E7D0A36A3D
:108EAC002A46029704F140018DE841002846FFF75D
:108EBC00F7FE0028ABD1236BD9E76FF05300A6E780
:108ECC000800002000FC0F702DE9F8430446894689
:108EDC000126E36DD4F85880206E08E00138656EE9
:108EEC00E165206655F82E703A4236D00B4603F0F9
:108EFC001F02434503F101014FEA531E4FF0010CD1
:108F0C0006FA02F2EAD1002854D0A16E4FF0000804
:108F1C00626D0D6A1344CA6AC4F85C80B3FBF5F148
:108F2C0005FB1133D50041468542636528BF0546D4
:108F3C00606EA56506F0BEFD012322461F49204642
:108F4C00FFF7FAFE0028C4D0A36EC4F858801B6A41
:108F5C00C4F85C802366BDE8F883626DA16E13448F
:108F6C00096AB3FBF1F201FB1233C9F80030E36D6F
:108F7C00A66D9E421BD0590903F01F0255F8211013
:108F8C000CFA02F20A4212D0216E013903E055F8B4
:108F9C00200002420BD001332166013903F01F027D
:108FAC00B3424FEA5310E3650CFA02F2EFD1002002
:108FBC00BDE8F8836FF01B00BDE8F883654E000038
:108FCC00F0B50C4685B004310546FFF77DFFD0B9EE
:108FDC0021462846FFF778FFA8B9D4F800E02646CA
:108FEC0004270190014646F8080F3B462A46029694
:108FFC0005F168000397CDF800E0FEF777FF20B18C
:10900C0010F1540F01D005B0F0BDAB6E5A6A002AB6
:10901C000BDDA3680132013B42F001021344B3FBA8
:10902C00F2F102FB11329B1AA36000234FF0FF32C6
:10903C00042118462261E160A261E261A382A3755A
:10904C00E37505B0F0BD00BF2DE9F04F87B0059278
:10905C00002B5DD0826E5C1E07468846D369A3F157
:10906C000809B4FBF9F000283BD0013805F092FF59
:10907C00109B0230B3FBF9F6A4EB8005B5FBF9F5B8
:10908C00A6BBB5424ED968370DF1140B4FF0040A4C
:10909C004FF0010902E02D1BB54243D9A81B95FAEC
:1090AC00A5F405990423B0FA80F0B4FA84F4009185
:1090BC004246C0F11F00CDF80CA0CDF808B000213D
:1090CC00844228BF044638464FEA840E09FA04F459
:1090DC00CDF804E0FEF70AFF0028DCD007B0BDE8AD
:1090EC00F08F109BB3FBF9F6E6B10546701E05F048
:1090FC0051FF109B0230A3EB8006B6FBF9F606FB82
:10910C001939304605F046FFA9EB80031093B8E7F8
:10911C004FF0FF32119918460A60129A136007B08B
:10912C00BDE8F08F059B0020119A1360129B1A4624
:10913C00109B136007B0BDE8F08F00BF2DE9F04F16
:10914C0087B0846E119E139DE4697719A74258D895
:10915C00002D52D0994615468846059028E0059C6E
:10916C006FF00107A46E2F60D4F814E0D4F828C077
:10917C000EF1FF3AEC68CA4401940AEB0604B4FB06
:10918C00FEFAB6FBFEFB0EFB1A4A0EFB1B6ECAEB7D
:10919C00040ACEEB0604E2456C6028BFE246C5F833
:1091AC0008A0CDF808A00094FEF756FF002825DB98
:1091BC002C684146109B0234134A0598CFD1D5F840
:1091CC0004E0AC687444A642C9D27645A4EB06040C
:1091DC00CEEB060CC3D3139BE9689C4212986144F6
:1091EC0028BF1C462246264403F066FA129B2344F1
:1091FC001293139B1B1B1393DAD1002007B0BDE80D
:10920C00F08F6FF05300F9E700FCF7FF2DE9F04FFA
:10921C0089B0149EDDF84CB056B30593924689463E
:10922C0000F16808002406AF06E0384606F0ACFBF7
:10923C00002821D1A6421BD9351B129B059940460B
:10924C00082D03EB04020297C4EB0A0328BF082580
:10925C008DE8060003954A460021FEF747FE0BEB0E
:10926C0004012A462C440028DFD009B0BDE8F08F59
:10927C00002009B0BDE8F08F03DB022009B0BDE887
:10928C00F08F0120F1E700BFF0B50446C1F30905EA
:10929C00104685B0A3682168AB42666828BF2B4690
:1092AC001A4690E888000846029200970196FFF74C
:1092BC00ADFF28B9A368AB4202D02CBF022001201D
:1092CC0005B0F0BD2DE9F0430C6885B0A51C012D4F
:1092DC003AD90E46D0F868E021469946DEF818C017
:1092EC009046B5680746F3687046654472686C1E14
:1092FC00B4FBFCF50CFB1545641B0094DEF8085020
:10930C00A847F0B9B9F1000F11D04FF0FF33F56851
:10931C0022460294C8F800304146746838463368D7
:10932C008DE83000FFF772FF00280ADB10D1BB6E0E
:10933C00FF21F0689A6A06F0BDFB4FF0FF33002066
:10934C00336005B0BDE8F083002005B0BDE8F083C4
:10935C006FF05300F5E700BF2DE9F04F83B0DDF857
:10936C003C800C9E0D9DDDF838A0B8F1000F39D073
:10937C000C468146816E00278DE80C0008E08A6956
:10938C002660A760B5FBF2F302FB1353EB1A636084
:10939C002368B342F3D160688542F0D38B6A00EB4B
:1093AC00030B5D45EBD2C5EB0B0BE368281A51465A
:1093BC00C345184428BFC3465A465D4403F07CF9A4
:1093CC006368A268CBEB0808EB1AD9F86810DA448A
:1093DC00934238BF13468A6A9342A36006D0B8F111
:1093EC00000F0CD1002003B0BDE8F08F9DE80C00FD
:1093FC0021464846FFF766FF0028F0D0F3E7D9F87E
:10940C006810C5E7F0B54E6885B017461D460C468A
:10941C00096802460023029703958DE8420000F18B
:10942C001001FFF799FF064640B92A463946E06815
:10943C0002F006FB6368E0601D446560304605B0D1
:10944C00F0BD00BF2DE9F04F42F309054C6889B01F
:10945C00B5F1FF3F14BF1546551C04F1040E4C69C1
:10946C00C5F30905AE44A6454ED8984622F00043F4
:10947C00144608AA1F46059304230E46BE468F6861
:10948C0081468EEA070E9EFA8EFE42F804EDFFF737
:10949C00B9FF58B9002C0CDB2B46424648463146E6
:1094AC00FFF7B0FF10B9059B0020B36009B0BDE811
:1094BC00F08F002DF7D04F4609F1680B04460DF1E3
:1094CC001B094FF0010A06E03846FFF79BFF002806
:1094DC00ECD1AC42E7D0D8F804102B1BD8F800E044
:1094EC003A466018CDF80CA00021CDF808900190F8
:1094FC005846CDF800E00134FEF7F8FC01234A464B
:10950C0031460028E0D0D1E76FF01B00CEE700BF5A
:10951C0010B413465DF8044B0A4603C8FFF792BF1C
:10952C002DE9F04F0E4689B005464FF0010901F1C7
:10953C00400B07A92846FFF7C7FC002850D1A86E9E
:10954C000799C368984700284DD1F76B002F51D06D
:10955C0005F1680304460DF11B0806F1080ABE4626
:10956C00059323E0B6F804E0CDF80C904FEA8E2E6C
:10957C00CDF8088001944EEA0C0CCDF800C0FFF732
:10958C00DDFD68BB0798012301942A46009005F184
:10959C001001CDF80C902846CDF808801C44FFF73C
:1095AC00DBFE00BBD6F83CE0A64523D9376BC4EBF9
:1095BC000E03DFF880C05A46FF0251462846D1D42C
:1095CC00B36B2A46CDF80C9059460093C4EB0E03AE
:1095DC00CDF8088001940598FEF788FC0028D1D0BE
:1095EC0009B0BDE8F08F10F1540FF9D14FF0FF33F3
:1095FC002B619EE7AB6EE9699A6AF06C03F05CF83C
:10960C00AB6E6869FF21AA692C697064B26434641A
:10961C009A6AE86906F04EFA4FF0FF33079A002079
:10962C002B61336BB26343F40033336309B0BDE891
:10963C00F08F00BF000010200A6B530304D5D30237
:10964C005CD522F480220A6312F400335AD02DE93F
:10965C00F0410D46D1F8348012F4801196B00446D6
:10966C003AD1542201A806F025FAA96AEA6A012324
:10967C004FF0FF360DF1440E0B910C920D93CDF87B
:10968C00388094E80F0026606F6B8EE80F00EB6A51
:10969C009F4239D237460CE000F050F800282ADB04
:1096AC002368013301D0119727606A6BEB6A9A42E9
:1096BC002AD201230DF1030201A9204600F032FA4F
:1096CC00061E4FF001030DF1030229462046E3DA92
:1096DC00304616B0BDE8F081EB6A434538BF4346CF
:1096EC0022F40032A96B0020EB6242F48032C5F800
:1096FC003480A9622A6316B0BDE8F0814FF0FF33C5
:10970C000B649EE71846704705F1400607E010F120
:10971C00540F204610D1FFF703FF0028EBD1012393
:10972C00314622462046FFF7CDFD29460346002848
:10973C00EDD16B6B2A6BD3E71846DCE72DE9F04FC4
:10974C0093B08A461746834605930B6B5E0300F174
:10975C0046811D05DAF8344006D5DAF82C209442FF
:10976C0002D21446CAF83420059ADBF87010224451
:10977C008A4200F2C28113F4003516D1DAF82C209B
:10978C00A24212D2CAF8342001230DF13F025146F5
:10979C0058468DF83F50FFF7D1FF002857DBDAF819
:1097AC003430A342F0D3DAF83030DC0265D4059AB9
:1097BC00002A47D00AF140093E460692980349D543
:1097CC00DBF86870DAF83C40FD69AC4200F01181BE
:1097DC00DAF838002D1B069B9D4228BF1D460DE074
:1097EC0010F1540F584640F0F080FFF799FE002816
:1097FC0040F0E280DAF83C40DAF8380001234946C0
:10980C0000905A460395584602960194FFF7A4FD22
:10981C00514603460028E3D1DAF83C302E44DBF8FD
:10982C0068102B44DAF83420096ACAF83C302A4410
:10983C00069BCAF834205B1BCBF860100693DAF851
:10984C003030BBD123F400230598CAF8303013B064
:10985C00BDE8F08FDA0240D5DBF868706FF00102DA
:10986C00DAF834401046CAF83820CAF83C4043F4C1
:10987C000033FD69CAF83030ACE7059ADAF83440A9
:10988C00DBF868501019DAF82C10AA6C8842AE6A12
:10989C0038BF0846002A40F0AA80E969C90840F29E
:1098AC00FE32B24228BF32468A4228BF0A46824262
:1098BC00BFF47DAF2B6A5146CAF83C405846CBF8F2
:1098CC006030FFF72DFEDAF83030002840F01081C0
:1098DC0023F48013CAF8303069E7DAF83430002BFF
:1098EC0040F08B80DBF868703B6ACDF820A0CBF899
:1098FC006030DAF83440DAF8383009940B93631E90
:10990C000C960A9310A95846FFF7DEFA002851D19D
:10991C00DBF868001099C3689847002840F08E80E7
:10992C00099B002B00F0F280DBF868700A9EFC6942
:10993C003046A4F10805B6FBF5F37BB1581E05F0D3
:10994C0029FB0230A6EB8008B8FBF5F808FB15657F
:10995C00404605F01FFB4346A5EB8000461CB44275
:10996C0074D0002E00F0CC800BF16808002511ACEF
:10997C00DDF82CA00DE0109F584601951D44039373
:10998C0002940097FFF7E8FC002857D1AE4200F094
:10999C00A18001235A460021029403934046731B75
:1099AC000195CDF800A0FEF7A1FA01235A464946CD
:1099BC000028E0D0DDF820A0DAF8303043F40023A2
:1099CC00CAF8303013B0BDE8F08FDAF83020184602
:1099DC0042F40022CAF8302013B0BDE8F08FFFF734
:1099EC002BFE00287FF433AFDAF83030B1E6D10823
:1099FC0055E7D9027FF578AF30E7591E0AF13800E8
:109A0C000AF13C04DAF82C30DAF8282000914946A7
:109A1C00019058460294FFF717FB0028CCD1DBF8D5
:109A2C006830FF21DAF84C009A6A06F043F84FF0E0
:109A3C00FF33DBF86870CAF8403055E710F1540F6B
:109A4C00B8D14FF0FF33089A13645BE7013312ACC3
:109A5C0000250BF1680893FAA3F60B9BB6FA86F671
:109A6C0044F8043D731C07969A460D9310980423F2
:109A7C00AF005A460393494601230090029458467E
:109A8C000197FFF769FC04235A46DDF844E00028EF
:109A9C00D4D10799A942014605F1010540460AD0E7
:109AAC000426029401970396CDF800E0FEF71EFA07
:109ABC0000287FF47FAFAA45D8D80D9BDDF820A0F5
:109ACC009C001098DBF868700C9ECAF83C40CAF8F1
:109ADC0038000AE0DDF820A00C9EDBF868701098C6
:109AEC002C46CAF83C50CAF83800DAF83030BEE6DA
:109AFC0043F40023CAF83030A9E66FF01A00A6E64A
:109B0C00B046DDF820A00C9E4546E8E7DDF820A025
:109B1C001C4610980C9ECAF83C30CAF83800DBF88A
:109B2C006870E2E72DE9F04F17460A6B87B00C46D8
:109B3C0096031D4680467DD4D4F834E0E26A9645FF
:109B4C0074D2CEEB0200A842034628BF2B460593E5
:109B5C00002B77D004F1380304F14009059E6FF017
:109B6C00010A04F13C0B049329E0D8F86830E06B4F
:109B7C00DB69984226D01D1AB54228BF354611F430
:109B8C00801133D0A1884A46DFF8C0E089020190E9
:109B9C000395404641EA0E0E029704F10801CDF8F8
:109BAC0000E0FFF7CBFA68BBD4F834E0761BE36B2C
:109BBC002F44AE442B44C4F834E0E36342D0216B11
:109BCC004A03D2D4CB0220D57046C4F838A0C4F8CE
:109BDC003CE0D8F8683041F48021DB6921631D1A20
:109BEC00B54228BF354611F48011CBD1A26B019040
:109BFC0008F1680000924A4603950297FEF776F941
:109C0C000028D1D007B0BDE8F08F049D4946E36A27
:109C1C004046A26ACDF808B00195CDF800E0FFF7F8
:109C2C0013FA0028EED1216BE06BD2E7002007B0CD
:109C3C00BDE8F08FFFF700FD00283FF47DAF07B0C3
:109C4C00BDE8F08F059807B0BDE8F08F000010203C
:109C5C00836E2DE9F04F4D680E4699698FB08046A2
:109C6C006B180733B3FBF1F201FB1239C9EB030993
:109C7C0000234D45089380F08C8000F16802069318
:109C8C00A9F108034FF0FF3A079209930DE07568AC
:109C9C002B1D0B9AC6F80CA0C2F3090582EAC474FA
:109CAC001D44B460A945756076D9043540F2FE3088
:109CBC000EAB4FF0040EC5EB090408F1100B059325
:109CCC004246844294BF2C192C18734600210798E5
:109CDC004C4503D2099FBC4228BF3C463768CDF89F
:109CEC000CE000970BAF01940297CDF82CA0FEF777
:109CFC00FDF810B110F1540F48D10B9B651B4D4969
:109D0C0004221CBAB3682943F068E443E40F04F559
:109D1C00A06541EA05514B400B9105991BBA41F8DE
:109D2C00083D0F4601F08CFE08220546002396E8FC
:109D3C0003000297F5600392424601915946009048
:109D4C0040460D95FFF708FB00BB069B002B9ED1F0
:109D5C007368F2680433089206939AE7002864D17A
:109D6C00069A40F2FE340599531AA34294BFC918BF
:109D7C0009190B469A4208D9A2F108049C4228BF43
:109D8C001C46231DA242059323D800200FB0BDE82A
:109D9C00F08F00F1100B06934FF0FF305946002363
:109DAC004246C8F800004046FFF78CFA0028EDD177
:109DBC00D8F86800036998470028E7D13469A145B1
:109DCC00E3D9069B08F1680BCDF81890B1469A467A
:109DDC000593059B1D1DAC4227D2089B013301D076
:109DEC00544522D02D1B4FF0FF370CAED9F8000094
:109DFC0001220021019403922B46424600900296C8
:109E0C005846FEF773F80134012231460028BDD1C3
:109E1C00384601F015FE012D074605F1FF359DD0A2
:109E2C005445E3D1089B9F42E0D06FF053000FB034
:109E3C00BDE8F08F00FC0F002DE9F04F856AA3B050
:109E4C0080460C46924699460E685DB93AE0E96840
:109E5C0062688A4218BF9A420BD0B14209D02D6871
:109E6C00002D2FD005F108039C42F8D0AB68B3420B
:109E7C00EDD1AB79012BF2D12B6BDA02EFD5D8F8FF
:109E8C006810EA6A8B6A9A42E9D90A6A40466B6B97
:109E9C002946EB63C8F86020FFF742FB20B18646E9
:109EAC00704623B0BDE8F08F2B6B2946404623F457
:109EBC0080132B63FFF7C0FB0028F0D12D682668B8
:109ECC00002DCFD16368274612ADB9F1000F0A936C
:109EDC000FCF0FC597E80F0085E80F002CDD524619
:109EEC000AEBC9004FF0000E40F2014140F2FF476F
:109EFC00B34608E0BD427FD0B3F5C06F00F082805E
:109F0C000832824210D013684FEA135C1FFA8CF3AC
:109F1C00C3F30A0503F4E0638D42EBD1A38A083244
:109F2C0001338242A382EED15E46BEF1000F03D014
:109F3C00A38A002B00F05981A37D002B6BD1A38A3F
:109F4C00FE2B68D84FF0FF3100200293524600944C
:109F5C004B46C8F8101021460190404600F06AF9B3
:109F6C00002840F0EE80D8F82870002F00F05681C1
:109F7C003D4640F2FF4B0B97DDF828C00AE0EA683B
:109F8C00624518BF63450CD0B2420AD02D68002D33
:109F9C0000F0E88005F10807BC42F7D0AB68B3428B
:109FAC00EDD1A646B9F1000FBEE80F000FC79EE831
:109FBC000F0087E80F00E9DD002307E040F20140C5
:109FCC00814200F0958001339945DFD05AF8332057
:109FDC00C2F30A515945F1D1C2F38922A9889142A1
:109FEC0000F09680EFD9AA790139022AA980EAD12A
:109FFC00AA6A013AAA62E6E7A38A4FF0010E013B76
:10A00C00A3827DE755680CF001032E68A6616D688C
:10A01C00E375E56174E7D8F868104FF0FF37E26834
:10A02C008D6C206823691A901B921E921C931D97AD
:10A03C00002D5AD1C969A1F1080E00270DA87A4943
:10A04C001AAD0890404607912146CDF80490CDF802
:10A05C0000A006970597049703970297CDF87CE02C
:10A06C00CDF834800E95FEF72FF9002863D1D8F87F
:10A07C003430D8F8381080EA0307D8F8403048401C
:10A08C00D8F83C20D8F830107B40D8F84C704A40B7
:10A09C00D8F844107B40D8F848704840D8F8501095
:10A0AC005740624A414010933A4011910F92002A56
:10A0BC0033D1002B31D181BB29464046FFF7C8FD77
:10A0CC00034600287FD010F11C0F49D010F1540F1B
:10A0DC0046D00A9A12AD1296864613920FCD0FC433
:10A0EC0095E80F0084E80F00DAE6A5F1080EA4E766
:10A0FC00C2F38922A9889142FFF465AFAA79013194
:10A10C00022AA9807FF45FAFAA6A0132AA625AE7D9
:10A11C004FF0FF32AA60EA6055E70FAA214640468D
:10A12C00FEF752F868B90FAB414A29464046FFF793
:10A13C0089F90028C0D010F11C0F11D010F1540F68
:10A14C000ED00A9B12AD8646129613930FCD0FC4F8
:10A15C0095E80F0084E80F00704623B0BDE8F08F3F
:10A16C00A38AEFE60B9F4FF0FF3B0AE0FA680A99CF
:10A17C008B4218BF8A4207D0B24205D03F68002FED
:10A18C004CD0BB68B342F1D107F1200A07F10809A2
:10A19C00B7F804E04FF0FF33BC8B524649464046BB
:10A1AC00A645C4EB0E0CE9D3FC7F002CE6D0A7F837
:10A1BC0004C0039502950195CDF800B0FEF7AEF9F9
:10A1CC000028E5D06BE61B9808F130021C9908F1C9
:10A1DC003C05E060216107CA85E80700C8F84830F3
:10A1EC00C8F84C30C8F85030BDE61AAD2146404690
:10A1FC002A46FEF733FC08B1831CA2D102303FF48F
:10A20C009BAE9DF87F30002B3FF496AE294622463C
:10A21C00404600F007FB002893D18DE64FF0000E6E
:10A22C00704623B0BDE8F08F6166000000FCFFFFB4
:10A23C000CFCFF7F2DE9F04FA3B0804608469246F8
:10A24C00BDF8B4609B46BDF8B8700B91BC1B096897
:10A25C004268012C0E910F9240F3828173421AAA2C
:10A26C004FF000091BB20C920D932AE0FE2C16DC69
:10A27C00D8F86800C169826C4B08243902B15308C4
:10A28C008269551E2B44B3FBF2F502FB15351A9A65
:10A29C005B1B8B4228BF0B469A4240F2C48006EBF4
:10A2AC0064052C9B02975246ADB200930B995B460A
:10A2BC0040460195AC1B00F06FFA00BB012C2F46F9
:10A2CC002ADD0C9B4046AF4A0D99AF4D08934FF0D9
:10A2DC00FF3307920022069105972C990496CDF82E
:10A2EC000C900295CDF868908DE8000CFDF7ECFF12
:10A2FC000028BBD00446204623B0BDE8F08F10F1F7
:10A30C001C0FF7D1D8F868E01A9ADEF81C30243B01
:10A31C009342EFD33D4601E0D8F868E00B98DEF8A5
:10A32C0024308268002B02F10102826011DD0133BE
:10A33C0043F00103B2FBF3F103FB11234BB90368A8
:10A34C00002B40D04268012A3DD9012B3BD001277C
:10A35C0019E000240B9B00204FF0FF325968DEF807
:10A36C0048301A911B901E901C921D9243B3083BCF
:10A37C0070461F93DEF80C309847002856D010F129
:10A38C00540FB7D100274FF0FF330B9AC8F8103099
:10A39C001368002B41D05268012A3ED9012B3CD0C6
:10A3AC000B9B4046191DFEF78FFD28B110F11C03C5
:10A3BC0018BF0123BB429DD2D8F868E00124C9E73D
:10A3CC00DEF81C30D3E7002322AA7049404642F83D
:10A3DC00203DFEF7B1FC00B91A9800288ADBD8F8AA
:10A3EC0068E0DEF82030B0EB530FB2D22C995B460C
:10A3FC00029552460091404601960B9900F0CCF91B
:10A40C0018B110F11C0F7FF475AF002840F0C88014
:10A41C000446D8F868E035469CE76FF01B042046EC
:10A42C0023B0BDE8F08F86463D4677E71AAB0B9A12
:10A43C00404619460C9308320423FEF7E3FF00282C
:10A44C009DD1534F71420DF1400E0246079709B250
:10A45C004D4F4FF0FF330390404602970C9F0691EF
:10A46C00059504962C99CDF820E0CDF840801197F5
:10A47C008DE8000CFDF728FF002880D10B9A93691A
:10A48C00013312D0D36901330FD00B9A40460C998B
:10A49C00D77D13463F4A07F5C06718333F053A434B
:10A4AC00FEF7D0FF00287FF46AAF002317931893B0
:10A4BC00002C59D1D8F8442019469E46D8F8403083
:10A4CC005140D8F838008EEA030ED8F83420D8F86A
:10A4DC003C704140D8F830308EEA020E7B40D8F800
:10A4EC00480016AA2C4F5840D8F84C300740D8F8E2
:10A4FC0050008EEA030381EA000E0B994046169732
:10A50C001793CDF860E0FDF75FFE00287FF4F2AE04
:10A51C00169B6BBB179B5BBB189B4BBB0C994046AC
:10A52C00FFF796FB00287FF42AAF0B9FAD1B97E833
:10A53C000600BD8279603A601B991C9AF9603A61F9
:10A54C00C8F84800C8F84C00C8F8500064BB08F1C3
:10A55C00300308F13C0893E8070088E80700CAE6D6
:10A56C003D46D8F868E0D9E61899DDF85CE0B6E726
:10A57C0016AB0A4A0C994046FEF764FF00287FF49C
:10A58C00FEAECBE7154F000000FC0F40394F00002A
:10A59C006166000008FC0F0000FCFFFF0CFCFF7F55
:10A5AC00D8F868E00024D5E60E9AD8F820309A4204
:10A5BC0000F0BB800F99D8F82400824218BF81426A
:10A5CC0000F0B3808B4200F0B080D8F828302BB369
:10A5DC000F990B980BE0DD68AA4218BFA94209D06D
:10A5EC008C4207D09C79022C09D01B68B3B19C68B3
:10A5FC00A242F0D104689C604468DC60F2E7DC6A3B
:10A60C00A24206D01D6BAA4218BFA94201D0A1429A
:10A61C00EBD10468DC6244681C63E6E70C9A4046A4
:10A62C000EA9FEF7D7F9002802DA811C7FF462AE7E
:10A63C00821C50D0D8F830300133C3F3090223F018
:10A64C000043003218BF012243EAC272130DC8F84E
:10A65C00302013F4E06370D0D8F834501A998D423E
:10A66C0008D0D8F838301B9CA54218BFA34201D0A3
:10A67C00994262D1454CC2F3892300211440C0F3A6
:10A68C008922C8F834109342C8F83040C8F8381002
:10A69C0055D2A0F580609B023D49194300240B9DC7
:10A6AC00169116AA189002230C99404619951794E6
:10A6BC00FFF7C2FB00287FF41DAED8F83030013B09
:10A6CC00C3F3090223F00043121B18BF012243EA13
:10A6DC00C273C8F830300EA90C9A4046FEF7BEF98A
:10A6EC0010B1831C7FF406AE02301CD0D8F83010A9
:10A6FC000B0D13F4E06F27D100239DF87F4000264B
:10A70C00244D404604F5C0640B9F129312AA2405F5
:10A71C000C9902231597254313961495FFF78CFB80
:10A72C0000287FF4E7AD0024E5E50B990B68C8F829
:10A73C0020304B68C8F8243047E70021AEE740F2E0
:10A74C00FF329342A7D1A9E7D8F834401A9A944221
:10A75C0008D0D8F838301B98834218BF844201D0F7
:10A76C009A42C9D1094AC1F3892340F2FF3400202F
:10A77C000A40A342C8F83400C8F83020C8F83800A2
:10A78C00BAD09A02024B1343B7E700BFFF03008015
:10A79C000000F04F08FC0F002DE9F0431746826EC5
:10A7AC008DB09846136A0D4604A904460366BDF89D
:10A7BC005460BDF85890FEF703FC10B10DB0BDE825
:10A7CC00F0833A46149F95F817E04346CDF808906D
:10A7DC002046A96901960097EF690A9104A98DF8A2
:10A7EC0027E00B97FFF726FD0028E7D104994FF0DF
:10A7FC00010E059FA961EF612B68226A85F817E0AD
:10A80C00934208D0D5F804E0656AAB4218BFAE4558
:10A81C0001D07245D2D11EB9216230466762CDE7B4
:10A82C000020CBE72DE9F041144682B0884600F1B8
:10A83C00480221460546FDF7C7FC70B9E67D28465F
:10A84C00074F183406F5C066414601236A463505A4
:10A85C0001942F430097FFF7EFFA02B0BDE8F081A7
:10A86C0008FC0F000A6B130301D500207047F0B5EC
:10A87C000C4687B00546FEF7DFFE236B002830D16F
:10A88C00DA032BD5A268013228D0E268013225D038
:10A89C00DB022BD404F12802164B08266F4692E8F3
:10A8AC0003008DE80300216D2846A2881E438D68A5
:10A8BC0002239202496845F081550397164305918E
:10A8CC00154304F1080102AA02960495FFF7B4FAA5
:10A8DC00236B30B923F48033236300E0002007B0EE
:10A8EC00F0BD43F40023236307B0F0BDE76CE66AC8
:10A8FC00014BD8E7000020200000102070B5054661
:10A90C000C46FFF7AFFF0646AA6A42B1944203D148
:10A91C000AE09C420BD01A461368002BF9D1236D28
:10A92C001B6853B1304670BD05F1280223461B68E5
:10A93C001360236D1B68002BF4D1E06C04F04EFD0A
:10A94C00304670BDC36B1B0D13F4E06FF0B50646BB
:10A95C00A3B06ED1336BC3F30903002B37D0202285
:10A96C0000210AA8514F05F0A5F801238DF83F30BE
:10A97C001193119B01331CD000204FF0FF3410AA0F
:10A98C0012A9039023460290019030460094FDF7E3
:10A99C00C5FD0446E0B99DF83F30E3B112AD0AACF9
:10A9AC000FCD0FC495E80F0084E80F00109B013306
:10A9BC00DFD1326B534242FA83F3C3F3090223F023
:10A9CC000043003218BF012243EAC27333630024F0
:10A9DC00204623B0F0BD10A930461AAAFDF7FAFFA5
:10A9EC00031E01DA991C5ED19A1C4BD0C3F30900EB
:10A9FC00002206AD1AA902903046009201952C4A0D
:10AA0C00FDF72AFB002810DB069B1099119A8B424C
:10AA1C0041D0934243D0012308AA0AA93046089793
:10AA2C000995FFF709FA0028C0D00446204623B048
:10AA3C00F0BD00244FF0FF3500F140021AA9039439
:10AA4C002B46029401940095FDF768FD04460028FE
:10AA5C00BED1F26B1AA9174D0123C2F38922164FEE
:10AA6C0074639002326BB4631540074304AA3046FA
:10AA7C00356305940497FFF7DFF900283FF46AAFBC
:10AA8C000446D3E712AA0AA93046FFF7CBFE0028EA
:10AA9C008CD00446CAE707989042BAD17EE7079B50
:10AAAC009942B8D17AE71C4692E700BF08FC0F60C8
:10AABC0000FCFF7FFF0300800000F04FF0B591B069
:10AACC0014461E46002310AD074645F82C1D08A958
:10AADC002A46FEF723F8002814DBC0F3892040F245
:10AAEC00FF33984210D08502169A04F5407408A9D9
:10AAFC00384642EA0454012306AA07962C430694CE
:10AB0C00FFF79AF911B0F0BD00204FF0FF3507F1B7
:10AB1C00200208A903902B4602900190384600951C
:10AB2C00FDF7FCFC0028EDD10546DDE72DE9F04FE3
:10AB3C008DB01E460C46054605929A0702D5FFF7C6
:10AB4C0001FF30BB4FF00008169B04F10809266387
:10AB5C00236505AA231D4946C4F834802846C4F849
:10AB6C003C80C4F84C80FDF7D9FF071E1BDB01238A
:10AB7C00A371AB6A2360B305AC620DD5236B6FF088
:10AB8C00100743F40023214628462363FFF7B6FE43
:10AB9C0038460DB0BDE8F08F3F0D012F07D0236B69
:10ABAC006FF01407EDE7BB1C4BD0236BE9E716F4F1
:10ABBC008066A2885DD0236B9202DFF8C4B143F4A7
:10ABCC00803342EA0B0B2363276DBB68002B64D0E8
:10ABDC000026B046B24610E013F0020F43F4803169
:10ABEC0007D07A68686F32449268824200F288809B
:10ABFC002163BB680C3643454FD9236B08F1010820
:10AC0C00D907E9D57A684946A3889719905DBA683F
:10AC1C0000F5407042EA8323564A43EA0053284623
:10AC2C00C3F3090ECDF808E07F68CDF800A00197BA
:10AC3C00FDF712FA071E236B01DABA1CA1D1276D9E
:10AC4C00CAE7B4F804A040F2FF339A45ADD0012313
:10AC5C00F005A371AB6A2360AC62A6D5059E3046A5
:10AC6C0005F0E6FEEB6E98422AD9236B6FF02307B2
:10AC7C0087E7082104F1280092023F4B02914946D4
:10AC8C0013430190009628463C4AFDF7E5F9B0F1D4
:10AC9C00000B99DA5F46236B73E7386800285DD0A8
:10ACAC00E064AB6EFF219A6A04F004FF40F20123CA
:10ACBC004FF0FF32B3EB1B5F226424D0002068E717
:10ACCC004FEA8A2ADFF8BCE02D4F06AA4AF480131B
:10ACDC004AEA0E0E4AEA0707494618430323CDF801
:10ACEC001C80089028460996CDF82C80CDF818E0E9
:10ACFC000A97FFF7A1F80028B7D1DFF884B063E713
:10AD0C006FF01B073DE7A86E6FF00101226BCBF3D0
:10AD1C000903806A002642F48012E362A064226375
:10AD2C00A16221646664002BC8D040F2FE32A78871
:10AD3C00034600969042E66C4946284628BF1346C7
:10AD4C0001960E4A43EA8723C3F3090643F00053E6
:10AD5C000296FDF781F9071EB0DA26E7AB6E986A0A
:10AD6C0004F034FBE06400289BD1236B6FF00B07DD
:10AD7C0007E700BF00FCFF7F0800002000FC0F70FD
:10AD8C000000102000001040F0B59BB00546FDF708
:10AD9C004BF8044610B120461BB0F0BDAB6E01461B
:10ADAC00686EDA6A04F086FEAB6E6C6512A9DA6A1C
:10ADBC0028461B6AD200EC652B66934228BF1346CB
:10ADCC00AB65FEF7FDF8044628B12846FDF712F8EE
:10ADDC0020461BB0F0BD0D944FF40036EC6E06AF60
:10ADEC0006960CAA09946C6F2E6F0B941A4CAB6ED2
:10ADFC000A960E9404F18154184ED9691034186ACD
:10AE0C0003230C96164E079112A90890284610940D
:10AE1C0011970F96FFF710F804460028D5D103467A
:10AE2C00024612A928468DF85E40FFF705F8044645
:10AE3C000028CAD14FF0FF300126039412A90294C6
:10AE4C000346019404AA0090284604940596FDF745
:10AE5C0065FB0446B9E700BF0800F00F0000104086
:10AE6C00CC1500202DE9F04397B00446FCF7DCFF2D
:10AE7C00002840F08E800146202206460EA804F0E1
:10AE8C0019FEDFF82C910123DFF828811593159B0F
:10AE9C00013354D0A36E1B6AB6EB530F7ED205A9B7
:10AEAC00404B00270825039114AA00930EA9CDF856
:10AEBC0008802046019701363B4B07950594CDF849
:10AECC001890FDF72BFB051E5CDB2DD045F3090517
:10AEDC00013529D00E9818250F9A08AB00970EA9AA
:10AEEC00206220466262029501932F4A2F4BFDF798
:10AEFC00B3F8051E46DB089B1A0C022A40D19BB204
:10AF0C00002B3DD10B9B1BB1E26E934238D8E3660C
:10AF1C000C9B1BB1226F934232D823670D9B1BB144
:10AF2C00626F93422CD8636704F130020EA920465D
:10AF3C00FDF74AF9054628BB149B0133A7D1236AB8
:10AF4C0001331DD0636A01331AD0A36E04F13001B2
:10AF5C00E76A0026D3F820E004F13C0C236B35465D
:10AF6C00B7FBFEF203EBD3730EFB1277236307C917
:10AF7C008CE80700C4F860E06765A665E66504E048
:10AF8C006FF015052046FCF735FF284617B0BDE8D5
:10AF9C00F0830546284617B0BDE8F0836FF05305E3
:10AFAC00F0E700BF0800F00F00FCFF7F1800102036
:10AFBC00CC150020D9630000FCF71CBFF0B59BB08A
:10AFCC0005460591FFF7BEFC044608B11BB0F0BD69
:10AFDC00034605AA284608A9FDF7A0FD0028F5DBC5
:10AFEC00C0F3892340F2FF32934274D0000DAA6A59
:10AFFC00022810920ED09A023A4E08A90123164349
:10B00C00284606AA07940696FEF716FF109BAB621D
:10B01C001BB0F0BD9E020822334B06AF029208A96A
:10B02C000094334301972846304AFDF715F8002861
:10B03C00CCDB4FF0FF3003943A4602940346009069
:10B04C0012A901942846FDF769FA0028BED1BDF873
:10B05C005C30002B42D19DF85F40002C3ED110ABF0
:10B06C00296B3A46DFF87CE0AB62012346EA0E0E10
:10B07C008DF846401944ADF844400794C1F30907D4
:10B08C0021F0004008A9CDF818E03E1C18BF01269D
:10B09C0040EAC67428462C63FEF7CEFE0028B5D1D4
:10B0AC002B6B08AA109812A9013BA8622846C3F37F
:10B0BC00090423F00043003418BF012443EAC4738D
:10B0CC002B63FDF7CBFC002880D112AA08A92846D7
:10B0DC00FFF7A8FB7AE76FF0150077E76FF0260013
:10B0EC0074E700BF0000F04F0800002000FC0F7058
:10B0FC002DE9F04FB1B0044608910992FFF722FCFC
:10B10C00814610B131B0BDE8F08F034608AA204645
:10B11C000CA9FDF703FD051EC0F28780C5F3892736
:10B12C0040F2FF36B7427BD00DF11E0309AA204630
:10B13C0014A9FDF7F3FCB0F10008C0F2A980C8F324
:10B14C008923B3426CD0DDF830A0149B9A4509D00A
:10B15C000D99159A8B4218BF924579D0914277D0B0
:10B16C004FF00109A36A1C932E0DC8F30A53B34286
:10B17C0040F05481B9F1000F5BD0022B00F0EC8051
:10B18C0026ABBDF81E200493236BBD02B1481146BB
:10B19C00B14A2843C4F834A01A40BA460D9B024366
:10B1AC00DDF824B0A36322638A02AA481043AB499A
:10B1BC0000252690584611430592279528912995EC
:10B1CC0005F036FC059A0CABA549104342EA0A027D
:10B1DC00CDF8ACB040EA065611432D932A962C912B
:10B1EC00B9F1000F40F08F80BF029A4D049A0523ED
:10B1FC003D4314A92046CDF8BC902E95FEF71CFEBD
:10B20C00002840F0A4801C9B18F1020FA36205D00B
:10B21C00C8F30A58B8F1020F00F0E680002071E77D
:10B22C006FF0150031B0BDE8F08F284631B0BDE8A5
:10B23C00F08FBDF81E108F42F0D0022B00F08E80E4
:10B24C0026AB0493BA46DDF824B04FF00009ABE707
:10B25C00A36A18F1020F1C9340F0E580DDF824B0CE
:10B26C00584605F0E5FBE26E904200F2EC80BDF82A
:10B27C001E209742C0F0D580791C89B24FF000098E
:10B28C0026ABBA4692020F462E0D484604938EE723
:10B29C0018F1020F5ED1BDF81E20B2425AD0DDF873
:10B2AC0030A0149B9A4500F0C180DDF834901599BC
:10B2BC00994518BF5145CBD04945C9D0DDF824B0CC
:10B2CC00A16A584604921C9105F0B2FBE16E049AF7
:10B2DC00884200F2B880216B4FEA872C5E4B2E0D12
:10B2EC005C4892020B406146C4F834A0BA4608434D
:10B2FC00C4F838904FF0010943EA000126AB002056
:10B30C000493216353E7049A052314A920462E9530
:10B31C002F95FEF791FDD0B9236B1A0D12F4E06F47
:10B32C003FF471AF4C4A4FEA8A2A4A4D0CA91A4095
:10B33C0060634AEA0505A063226301230B900AAA05
:10B34C0020460A95FEF778FD00283FF45CAF1C9B65
:10B35C00A362D7E64046D5E6BDF81E108A0226A9A0
:10B36C00404B0820049100251343049A029014A921
:10B37C000192204600953C4AFCF76EFE0028FFF631
:10B38C00C1AE4FF0FF310395029520460B4600915C
:10B39C00049A1EA90195FDF7C1F800287FF4B2AEFE
:10B3AC00BDF88C30002B51D19DF88F20002A4DD147
:10B3BC00236B8DF876200133ADF87420BDF81E1088
:10B3CC001CAAC3F3090023F00043A2620A46401BE7
:10B3DC0018BF012043EAC0732363B9F1000F3FF497
:10B3EC0031AFDDF830A0CFE6236B14AA20461EA99E
:10B3FC00013BC3F3090523F00043003518BF0125B9
:10B40C0043EAC5732363FDF729FB00287FF47AAE6A
:10B41C001EAA14A92046FFF705FA73E66FF0140074
:10B42C0070E639462AE74FF000099DE6DDF824B0B6
:10B43C00A16A584604921C9105F0FAFAE16E049A3E
:10B44C008142BFF416AF6FF023005BE66FF026006D
:10B45C0058E600BF0000F04FFF03008000001040D2
:10B46C00000010100800002000FC0F7030B58BB0ED
:10B47C00154600230AAC44F8241D02A922460446B2
:10B48C00FDF74CFB002806DBC0F389222B4602A9F2
:10B49C002046FCF7C1FE0BB030BD00BFF0B58FB03D
:10B4AC0015461F4600230EAC064644F8241D06A97B
:10B4BC002246FDF733FB00281FDBC0F3892040F246
:10B4CC00FF3398421BD08402736F05F540751499B5
:10B4DC000022019730468B420092154A28BF0B463A
:10B4EC0006A943EA05532343C3F309040294FCF76A
:10B4FC00B3FD002815DBC0F309000FB0F0BD002030
:10B50C004FF0FF3406F1200206A903902346029067
:10B51C00019030460094FDF701F80028EDD1044667
:10B52C00D2E7831C08BF6FF03C000FB0F0BD00BF2A
:10B53C0000FCFF7F30B4029C456FAC4202D830BC9B
:10B54C00FFF7BCBA6FF01B0030BC704710B5034C52
:10B55C0082B00094FFF7EAFA02B010BDE00B0020B5
:10B56C00FFF7CCB9FFF77EB9FEF7DCBAFEF7E6B809
:10B57C0038B54D6B6BB91446036FA3421DD3A5426E
:10B58C000ED00D46FEF758F810B96C63204638BD46
:10B59C0038BD012B06D0022B06D0036F9D420CD870
:10B5AC00284638BD5419E7E70B6BCC6A9B0302D5D0
:10B5BC00AC4238BF2C461444DEE76FF0150038BDA2
:10B5CC002DE9F043B2F1000887B00EDB0B6B4F6B2B
:10B5DC0013F40035CB6A0DD11A460C46064690453D
:10B5EC0010D340D8036F9F4237D96FF0150007B0C6
:10B5FC00BDE8F0839F423A460C46064638BF1A46D1
:10B60C009045EED2FEF718F80028F0D104F13C0179
:10B61C0004F13800E36AA26A029104F1400101903E
:10B62C003046CDF80080FDF70FFD0028DFD1236BED
:10B63C004546A26B43F4A023C4F83480C4F82C8094
:10B64C002363A262336F9F42CFD8AF4205D03046FE
:10B65C002146FDF7F1FF08B96763384600EAE07050
:10B66C0007B0BDE8F083FDB91D46336F9D42BCD8D1
:10B67C00AF4205D021463046FDF7DEFFC8B9656301
:10B68C00002D18DB4FF0000905E08DF81790FEF740
:10B69C0055F80028ABDB656B01230DF11702214631
:10B6AC00A8453046F1D8CDE7BB4238BF3B461D46D6
:10B6BC00DBE70546E4E7284699E700BF486B70478F
:10B6CC000B6B9B0301D4C86A7047486BCB6A9842DA
:10B6DC0038BF1846704700BF2DE9F041ACB00446A6
:10B6EC000591FFF72FF910B12CB0BDE8F081A56AD8
:10B6FC000DF1120305AA24A920462295FDF70EFA96
:10B70C00831C06D00028A8BF6FF010002CB0BDE839
:10B71C00F081BDF8122040F2FF339A42E4D0059834
:10B72C0005F086F9E36E074698425DD8A36E204675
:10B73C000AA91B6A2366FDF743FC0028D4D10DF13E
:10B74C00900E054612AE4FF0FF38BEE80F000FC644
:10B75C009EE80F0086E80F0008E00395029501951E
:10B76C00CDF80080FCF7DAFE0028BDD19DF85F60B3
:10B77C004FF0FF3318AA12A92046002EEDD1344DFC
:10B78C0018AE012308AA0AA909960895FEF754FBDE
:10B79C000028A9D19DF8A7204ABBBDF81230002A79
:10B7AC002C4E4FF0000E4FEA8323DFF8ACC00AAAF0
:10B7BC00274D46EA030643EA0C0C43F4001318BF6A
:10B7CC0075462046059C1F431F92219224A90423F1
:10B7DC001AAA1C971A96CDF878C02095CDF86CE073
:10B7EC001D94FEF729FB7FE76FF023007CE7226BAB
:10B7FC0022AB069512A901328DF88E00ADF88C00A3
:10B80C00C2F3090622F00040A36206AA351C0AAE58
:10B81C004FF0010318BF0125079640EAC575204675
:10B82C002563FEF709FB80B9236B2299013B9DF838
:10B83C00A720A162C3F3090123F00043003118BF14
:10B84C00012143EAC1732363A7E7229BA3624BE761
:10B85C0008FC0F6000001040080000202DE9F041AA
:10B86C000C4688B00023054608A904F1080641F8E7
:10B87C000C2D0A463146FDF751F9002834DB030D37
:10B88C00022B3BD1C0F3892040F2FF3398422ED0DB
:10B89C008002082100221B4B0DF118080291034372
:10B8AC0000923146CDF804802846174AFCF7D4FBA9
:10B8BC00002819DB00274FF0FF3E42463146039724
:10B8CC007346029728460197CDF800E0FCF726FE58
:10B8DC0050B90221A268E368A171A96AA080A06294
:10B8EC002160E2622363AC6208B0BDE8F0812A6A91
:10B8FC000DF118086B6A06920793DBE76FF01300E3
:10B90C00F2E700BF0800002000FC0F70826A42B111
:10B91C00914203D107E0994208D01A461368002BD4
:10B92C00F9D10020704700F128020B461B6800205B
:10B93C00136070472DE9F04791460D4684B00646DA
:10B94C0030224846002104F0B5F8A86A00283CD003
:10B95C0001284CD0AC8805F1080705F1200A4FF0FE
:10B96C00000806E0AC88023004F10104A4B2AC80FB
:10B97C0024D1AB8B4FF0FF3E52463946A3423046A2
:10B98C0073460ED1EC7F74B3CDF80C80CDF80880E3
:10B99C00CDF80480CDF800E0FCF7C0FD58B90446A2
:10B9AC00A8804B46394622463046FCF735FC002829
:10B9BC00D8D0831CD6D004B0BDE8F087AB6A012088
:10B9CC000344AB6204B0BDE8F087104B02220120A7
:10B9DC001B8889F80020A9F80830AB6A0344AB62D5
:10B9EC0004B0BDE8F087204604B0BDE8F087084AF3
:10B9FC004B4602241188927803F8084BA9F80810DA
:10BA0C009A70AB6A0133AB62D5E700BF841000209B
:10BA1C0088100020FDF76CB800B583B000230549F1
:10BA2C0002AA42F8043DFDF787F900B9019803B06A
:10BA3C005DF804FB394F00000123FDF77DB900BF11
:10BA4C00BAB10A4430B40B4D11F8013B83EA00043F
:10BA5C008A4204F00F0455F8244084EA101080EA5E
:10BA6C00131303F00F0355F8233083EA1010EBD1B6
:10BA7C0030BC70474410002018493F20184BD1F8B7
:10BA8C008020DFF880C042F44052F0B5154C46F6E9
:10BA9C00201EC1F8802040F6A317C3F800C04FF455
:10BAAC00C8465C604FF4C8650F4C02210F4A1C62FB
:10BABC000F4C5A629C620F4A0F4CDA621C630F4A9D
:10BACC000F4C5A639A63C3F80CE09F60DE619D6172
:10BADC001C6158611960DB6FF0BD00BF00C00F40E6
:10BAEC0000C00C402200010068050C019501B20059
:10BAFC00DC007A007D0058004B0040002F002E0027
:10BB0C00C409800C4000010010B4114C23780F2B99
:10BB1C0018D9104A136859050FD50F4B0F4903F16B
:10BB2C004000C91ACA5843F8042F8342FAD10023A3
:10BB3C00102023705DF8044B704713F48050F9D03B
:10BB4C001360EAE7C3F110035DF8044BD8B27047F9
:10BB5C00EB22002000C00C40F02B002040C00C4019
:10BB6C0010B504462046FFF7CFFF0028FAD0044B4F
:10BB7C0004481A78511C50F82200197010BD00BFEF
:10BB8C00EB220020F42B002010B5144C236813B1C9
:10BB9C00134AD168E9B9636813B1124AD168A1B9E3
:10BBAC00A36813B1104AD16859B9E3683BB10F4A85
:10BBBC00D16829B10121BDE81040D160184710BDF2
:10BBCC0010BD0121D1609847EFE70121D160984762
:10BBDC00E6E70121D1609847DDE700BFC0260020D1
:10BBEC0000410840104108402041084030410840C5
:10BBFC000368F0B55BB3002501249D60DC60214D2A
:10BC0C0003241A601D449C601F4C03792D111F4F97
:10BC1C00635523786078FF2BA278E47828BFFF2344
:10BC2C001B4E47F82510834228BF03461948934200
:10BC3C00C0F8286228BF1346A34228BF2346164CDF
:10BC4C004FF08061154A012023701160F0BD144F34
:10BC5C004FF0010C134EFC6EDFF850E0334644F409
:10BC6C004054114DFC66CEF800C006609C68002C58
:10BC7C00C5D01033AB420360F8D1002303601846E3
:10BC8C00F0BD00BF00BFF7BFFC1B0020C02600208A
:10BC9C00D98C0000002400207AE400E00CE100E0E4
:10BCAC0000C00F400041084040410840004008409F
:10BCBC0002680AB3114B12491344F0B51B11FF254E
:10BCCC000024DFF844E0CD540E784D78FF2E9460BC
:10BCDC004EF8234028BFFF268A78C978AE423346F7
:10BCEC00084F28BF2B46934228BF13468B4228BFD0
:10BCFC000B463B700460F0BD704700BF00BFF7BF40
:10BD0C00FC1B00207AE400E0C026002010B5064C95
:10BD1C0082B003680222248801A95B68ADF8044054
:10BD2C00984702B010BD00BFF8040020036810B59E
:10BD3C0014465B689847204610BD00BF0EB400B592
:10BD4C0082B003AB53F8041B1A46019306F0EAFACF
:10BD5C0002B05DF804EB03B0704700BF5E4A5F4B66
:10BD6C00A2FB002C5E4A2DE9F04F4FEA1C4CA3FBC2
:10BD7C000074A2FB00725B4E64090CF1040ED20A33
:10BD8C00DFF86C81A3FB04730025AEFB06674FF054
:10BD9C00640BA8FB02865B09C7EB0E084FF4C87A4C
:10BDAC003609DFF8449107EB5807C3EB0313BF08C0
:10BDBC00A4EB830306EB4606C7EBC7074B70C4EB3B
:10BDCC000414A2EBC606C7EB0E0EA0EB84002A46A9
:10BDDC008E70087081F803E0EFB240F26D1407F238
:10BDEC00B27389FB030E13F003084FEAE370C0EB48
:10BDFC006E160DD1C0EBEE100BFB16364FF4B7746C
:10BE0C000AFB103026B9002840F26D1018BF04460A
:10BE1C00224401359445DFD246378F71B8F1000FBB
:10BE2C000CD13148DE17642580FB0340C6EB60144F
:10BE3C0005FB14347CB34FF4B77402E040F26D147C
:10BE4C00DE172948121B64254FF4C87480FB03705D
:10BE5C00C2EB0C0C0022C6EB6017C6EBE0160120FF
:10BE6C0005FB1737214D04FB163602E00130013279
:10BE7C00C0B2012AD4B21BD0535D634504D80C2840
:10BE8C00C3EB0C0CF2D104460CF1010C4C7181F893
:10BE9C0004C0BDE8F08FC6EBE0104FF4C87540F25B
:10BEAC006D1405FB1030002808BF4FF4B774C8E7B9
:10BEBC00B8F1000F09D167B9002E14BF1C231D2344
:10BECC009C4504D3C3EB0C0CD0E71C23F8E70124EE
:10BEDC00DAE71D23F4E700BF07452EC2898888885E
:10BEEC00C5B3A291254992241F85EB515C09002012
:10BEFC00ABAAAAAA2DE9F0418679394CA6F14603E2
:10BF0C00462E04FB03F421DD4622364F4FF0640E1F
:10BF1C004FF4C87C013202F26C71964287FB0138F7
:10BF2C004FEAE17512D0C5EB681312F0030F0EFB4C
:10BF3C001313EFD1C5EBE8151BB90CFB1515002D30
:10BF4C00E8D104F5A83404F5C074E3E7417959B39A
:10BF5C0006F2B276234B64254FF4C87283FB063E7F
:10BF6C00F31706F00308204FC3EB6E1CC3EBEE1E59
:10BF7C00002305FB1C6C1D4D02FB1E6E05E0DA5DFB
:10BF8C0001338B4205FB02440ED0012BF7D1B8F1E3
:10BF9C00000FF4D1BCF1000F19D004F5181404F5FE
:10BFAC006E5401338B42F0D143784FF4616685783F
:10BFBC00C3EB0313017802799B000C48013A06FB92
:10BFCC0005330B4400FB02302044BDE8F081BEF188
:10BFDC00000FD4D104F5181404F56E54E1E700BF3A
:10BFEC008033E1011F85EB515C0900208051010079
:10BFFC00964A974B90422DE9F043964CD3F814E0B7
:10C00C009969E6681CD9944B984240F21581934B80
:10C01C0040F22765924F0344924C1A0AA7FB023256
:10C02C00D30903EB830303EB830202F2E243AB423B
:10C03C0028BF2B46A3F54873A4FB0335ED0804E099
:10C04C00894DA84294BF06250E25814A06F01F078C
:10C05C00D2F88030AF4243F0C003C2F880300AD22D
:10C06C007C4B26F01F061A462E43DE601368002B0D
:10C07C00FCDA06F01F071EF0007331D17B4C7C4AB2
:10C08C00D4F810C014460CEA0202A2420ABF4FF0C8
:10C09C00C0534FF4805200228EEA030414F0605F08
:10C0AC0008D02EF0605E03F06053694C43EA0E0E2C
:10C0BC00C4F814E081EA020313F4405F08D0644B27
:10C0CC0021F4405111431A469961936C1C07FCD41E
:10C0DC004EF0007E5E4AC2F814E0936C9906FCD4D4
:10C0EC000121644C0A4601FB02F300FB03F3A3425B
:10C0FC0009D8072A00F29580013201FB02F300FBFC
:10C10C0003F3A342F5D95C485C4C1844A4FB000330
:10C11C001B0D6C2B00F28B80352B00F28F80DFF81F
:10C12C00888136235648DFF844C1564CDCF8009021
:10C13C00B0FBF2F009EA04044445B0FBF1F00BD07B
:10C14C0043F400534FF480586446CCF80080CCF88C
:10C15C0000302368002BFCDADFF8F4C0013ADCF87D
:10C16C00103003F00703934207D002F00702644635
:10C17C00CCF81020A36CDB03FCD4013989028EEAC5
:10C18C00010313F4E05F0CD0314B2EF4E05E01F4AC
:10C19C00E0511A4641EA0E0EC3F814E0936C99076D
:10C1AC00FCD4394B39490344DB09A1FB0331090B9E
:10C1BC00042928BF04214B1E1B028EEA030212F431
:10C1CC00407F07D02EF4407E03F44073204A43EAAC
:10C1DC000E0353611E4B5C691A4624F000745C61BB
:10C1EC00936C9B06FCD42A4B4FF0FF32294CBD427A
:10C1FC00A3FB00E320604FEA9343274CB2FBF3F31D
:10C20C00B0FBF1F1254A2160136008D2114B26F0E6
:10C21C001F061A462E43DE601368002BFCDABDE8BD
:10C22C00F08304293FF66FAF013101225BE7DFF8A1
:10C23C007C806C231A4876E7122506E71948DFF84C
:10C24C00708000FB03F043EA08086CE700A4781F39
:10C25C0000C00F40000008400046C32300BA3CDC7D
:10C26C0023B24C001F85EB5100366E0100800D404F
:10C27C0040300080FFB19F26808D5B00819F5E1651
:10C28C0000B29F267F3001807FD1F0089F10E5001F
:10C29C0083DE1B43481B0020441B00207435002008
:10C2AC0000643F4D001BB700362000806C200080DE
:10C2BC0000200080002857D001222DE9F04F85B0D6
:10C2CC0083462A4C2A4D2B4EDDE9028954E8003F67
:10C2DC002868336844E800210029F7D1264FCDE9BE
:10C2EC0002893A68D31A254A4FF47A7E019712686C
:10C2FC000127A3FB02234FF47A72984600238B424A
:10C30C0008BF42452CBFC246F2460EFB00AA54E8B9
:10C31C00003F2A68316844E80073002BF7D101987C
:10C32C000068411A15484FF47A7E00680EFB02F241
:10C33C00A1FB00014FF47A70CAEB0202884600217F
:10C34C00994208BF40452CBF434673461A44724578
:10C35C0007D3BBF1010B0AF57A7AD8D105B0BDE849
:10C36C00F08F02F093F9D2E7704700BF103600202F
:10C37C007C35002078350020041000E07435002056
:10C38C002DE9F003124A0126124D134C52E8003FDE
:10C39C002968206842E80063002BF7D10F4A166821
:10C3AC000F4F321A4FF000094FF47A783E684FF471
:10C3BC007A709945A2FB066708BFB8453C462CBF6E
:10C3CC003C46044600FB0140BDE8F003704700BF4B
:10C3DC00103600207C35002078350020041000E059
:10C3EC007435002000010F4B1A181B5810B4D0687C
:10C3FC005C68044205D059B1C3F884005DF8044B65
:10C40C007047936849B9084A5DF8044B1A60704745
:10C41C00C3F888005DF8044B7047044A5DF8044B80
:10C42C001A607047EC0B00203830010038F0010026
:10C43C00362801D8FFF7D6BF704700BF36281CD866
:10C44C0000011A4A012902EB0003105810B415D050
:10C45C00042913D0DC68426822EA040242609A681C
:10C46C00E9B102291ED003295B685DF8044B0CBFAF
:10C47C000F491049116015221A607047DA680129BA
:10C48C00446842EA040242609A6808D040F63801D7
:10C49C0011605B6815225DF8044B1A6070473821F7
:10C4AC001160F6E704491160F3E700BFEC0B0020C4
:10C4BC00383001003800010038F00100F0B4144BA2
:10C4CC000021144C01201A460F46C3F8F0421D46B9
:10C4DC00114E124CC3F8F412C2F8B800C2F8A07096
:10C4EC00C2F8A460C2F8B00053690949DB07FBD558
:10C4FC0068612378DB07EFD40B680A4643F001032D
:10C50C000B601368DB07FCD462B6F0BC704700BF4D
:10C51C0000802A400504012401000F0000812A40FC
:10C52C00F8B50E46154672B6314A0024314F022337
:10C53C0040F206414FF4702E97610127D36120F031
:10C54C001F03C2F8A040C2F8F0124119C2F8F4421D
:10C55C00C2F8F842C2F8FC42C2F8A4E0C2F8B070CB
:10C56C00BFF34F8F244A136020339942FBD8BFF39B
:10C57C004F8FBFF36F8F1E494B691D4ADC07FBD5EC
:10C58C00ABB201211D4C20F07F4043F4702342F2EA
:10C59C0001275161C2F8F0421446C2F8F472C2F895
:10C5AC00BC10C2F8A000C2F8A430C2F8B01001E070
:10C5BC005B060AD463690E4A13F00101F8D04123DB
:10C5CC005361BDE8F840FFF779BF082D4FF0080222
:10C5DC0006D9083D31460A48164400F06DF800E0D3
:10C5EC0015B940236361E5E72A460D46F2E700BF23
:10C5FC0000802A40F05AF05A5CEF00E03204180830
:10C60C0080812A40F0B472B6224A0024224D0221C5
:10C61C00224B40F2064795614FF4702603400125EA
:10C62C00D161C2F8F07203F58031C2F8F442C2F85D
:10C63C00F842C2F8FC42C2F8A040C2F8A460C2F8AA
:10C64C00B050BFF34F8F164A136020339942FBD87A
:10C65C00BFF34F8FBFF36F8F0E494B690D4ADC0749
:10C66C00FBD5012300F47F000E4D4FF470241146CE
:10C67C005361C2F8F052C2F8A000C2F8A440C2F84C
:10C68C00B0304B69034ADB07FBD50123F0BC536187
:10C69C00FFF714BF00802A40F05AF05A0000FFFF49
:10C6AC005CEF00E0D804180808B5F8F7DFFFF9F7DD
:10C6BC009FF801F0EBFFFAE7844641EA000313F020
:10C6CC0003036DD1403A41D351F8043B40F8043B8D
:10C6DC0051F8043B40F8043B51F8043B40F8043B50
:10C6EC0051F8043B40F8043B51F8043B40F8043B40
:10C6FC0051F8043B40F8043B51F8043B40F8043B30
:10C70C0051F8043B40F8043B51F8043B40F8043B1F
:10C71C0051F8043B40F8043B51F8043B40F8043B0F
:10C72C0051F8043B40F8043B51F8043B40F8043BFF
:10C73C0051F8043B40F8043B51F8043B40F8043BEF
:10C74C0051F8043B40F8043B403ABDD2303211D38F
:10C75C0051F8043B40F8043B51F8043B40F8043BCF
:10C76C0051F8043B40F8043B51F8043B40F8043BBF
:10C77C00103AEDD20C3205D351F8043B40F8043B8F
:10C78C00043AF9D2043208D0D2071CBF11F8013B8D
:10C79C0000F8013B01D30B8803806046704700BF53
:10C7AC00082A13D38B078DD010F003038AD0C3F162
:10C7BC000403D21ADB071CBF11F8013B00F8013B44
:10C7CC0080D331F8023B20F8023B7BE7043AD9D303
:10C7DC00013A11F8013B00F8013BF9D20B780370D8
:10C7EC004B7843708B7883706046704702F0EEBDD7
:10C7FC0002F0F4BD02F0F2BDF0B44E1E0025374637
:10C80C0000E00135B0FBF2F302FB130000F137043A
:10C81C00092800F13000E4B298BFC4B2184607F8FA
:10C82C00014F002BEDD14A1953704DB1013316F85D
:10C83C00014F1778E81A3770834202F80149F5DB8B
:10C84C000846F0BC704700BFF0B501EB4106294C1F
:10C85C00012500EB461694F800C005FA01F1F489A5
:10C86C001FFA81FEB0F88851A4B24FEA0E1704FBF0
:10C87C000333ADB207F0F00723FA0CF33D43A342A8
:10C88C00A0F8885128BF2346012A22D015D3022AAA
:10C89C0008D001F00F01B0F888319BB21943A0F811
:10C8AC008811F0BD9BB201F00F01F383B0F8803119
:10C8BC009BB21F43A0F88071EDE7E31A01F00F0162
:10C8CC009BB27381B0F880319BB20B43A0F88031DE
:10C8DC00E1E79BB201F00F014FEA0E2EF382B0F8A4
:10C8EC0080310EF4706E9BB24EEA030EA0F880E11C
:10C8FC00D1E700BFEA2200202DE9F0414FEA410EBA
:10C90C00384AB6EE007A4FF0010C0EEB01030CFA2C
:10C91C0001F700EB4313BEB2DB89D2ED007A9DB276
:10C92C00F8EE677A87EE800A30EE070AFCEEC07AE2
:10C93C0017EE903AB3F5803F4ED300224FF6FF74BA
:10C94C0001E0062A03D85B080132A342F9D8B3F5FB
:10C95C00803F4FEA021237D242F4806292B203F166
:10C96C00FF3C1FFA8CFCB0F88881360107F00F04ED
:10C97C007144F6B21FFA88F700EB41113E43A0F860
:10C98C008861CA80A1F80EC04A8992B203FB02F2F8
:10C99C00B2FBF5F292B24A81CA8A92B203FB02F25E
:10C9AC00B2FBF5F292B2CA82CA8B92B203FB02F3CB
:10C9BC00B3FBF5F39BB2CB83B0F888319BB21C432D
:10C9CC00A0F88841BDE8F08142F480624FF6FE7C0D
:10C9DC004FF6FF7392B2C6E7012B4FF48062BED8BC
:10C9EC000223C0E7441B0020224BB6EE007AD3EDA5
:10C9FC00007AF8EE677A30B487EE800A4FF6FE7450
:10CA0C0030EE070AFCEEC07A17EE903AA3422AD910
:10CA1C00002201E0062A03D85B080132A342F9D8B0
:10CA2C0008324FF6FE7542F226045202AB4202F473
:10CA3C00F05288BF2B46144300EB41110D8ACA8873
:10CA4C00ADB292B205FB03F0C2F101122A44B0FB65
:10CA5C00F2F29B1A92B2C3F101039BB2CB800A8211
:10CA6C008C8130BC7047012B43F2260498BF022303
:10CA7C00E2E700BF441B002036280CD8294AF8B541
:10CA8C00044600B212F8206002EB8005012E03D0A0
:10CA9C00022E16D0F8BD70476A78C2F30113032B2F
:10CAAC003AD0214850F823008BB202F00301AA7847
:10CABC00FFF7CAFE1D48EA7800EB041043681A60C1
:10CACC00F8BD6E78C6F30113032B27D0184A52F821
:10CADC0023E006F00306174B89B20EEB461793F8CA
:10CAEC0000C07601FA880EEB0603764492B2188ADF
:10CAFC00C2F1011212FA80F2501E00FB01F323FA6C
:10CB0C000CF3984298BF931ED21A9BB2C2F1010249
:10CB1C0092B2FA803382CDE70748C5E7DFF81CE014
:10CB2C00D7E700BF680F0020FC050020EC0B0020AD
:10CB3C0008060020EA22002000803E4000801E40B3
:10CB4C00362809D800B2134B13F8202003EB8003CE
:10CB5C00012A02D0022A0DD070475978C1F3011274
:10CB6C00032A13D00C4850F822009A7801F00301E4
:10CB7C00FFF7C2BE5978C1F30113032B08D0074A43
:10CB8C0052F8230001F00301FFF72EBF0448ECE735
:10CB9C000448F7E7680F0020FC0500200806002079
:10CBAC0000803E4000801E40A4484FF00F0CA44B68
:10CBBC00826F42F47F02F0B582670025D0F88020A6
:10CBCC004FF470469F4C4FF4604E29464FF48067EB
:10CBDC0014432A46C0F88040A3F88C6148F2B8266A
:10CBEC00A3F88EC1A3F89051B3F8880180B240F03D
:10CBFC00F000A3F8880101EB4100914B01310025B5
:10CC0C0040011C4604290344A3F804E0DF805A8445
:10CC1C001A865A805A81DE815A82DA825A83DA83E2
:10CC2C00E9D1B4F888014FF00F0C874B4FF47046E4
:10CC3C0080B229464FF460472A4640EA0C004FF474
:10CC4C00806EA4F88801B4F8880180B240F470605A
:10CC5C00A4F88801A3F88C6148F2B826A3F88EC119
:10CC6C00A3F89051B3F8880180B240F0F000A3F81B
:10CC7C00880101EB4100744B0131002540011C4639
:10CC8C00042903449F80A3F806E05A841A865A802C
:10CC9C005A81DE815A82DA825A83DA83E9D1B4F876
:10CCAC0088014FF00F0C694B4FF4704680B2294647
:10CCBC004FF460472A4640EA0C004FF4806EA4F80B
:10CCCC008801B4F8880180B240F47060A4F888013F
:10CCDC00A3F88C6148F2B826A3F88EC1A3F8905142
:10CCEC00B3F8880180B240F0F000A3F8880101EBA2
:10CCFC004100564B0131002540011C4604290344D8
:10CD0C009F80A3F806E05A841A865A805A81DE81E5
:10CD1C005A82DA825A83DA83E9D1B4F888014FF067
:10CD2C000F0C4B4B4FF4704780B229464FF46046C2
:10CD3C002A4640EA0C004FF4806EA4F88801B4F83F
:10CD4C00880180B240F47060A4F88801A3F88C715B
:10CD5C0048F2B827A3F88EC1A3F89051B3F8880114
:10CD6C0080B240F0F000A3F8880101EB4100384B91
:10CD7C00013140011C46042903449E80A3F806E0BF
:10CD8C005A841A865A805A81DF815A82DA825A83EF
:10CD9C00DA83EAD1B4F888310F27002241F2010678
:10CDAC009BB245F6C05E114643F226053B43A4F800
:10CDBC008831B4F888319BB243F47063A4F888319D
:10CDCC005001244B01320344042A99815981DF819B
:10CDDC009E82A3F806E0198019829D81F0D1002271
:10CDEC000F2741F2010645F6C055114643F22604C1
:10CDFC005001194B01320344042A99815981DF8176
:10CE0C009E82DD80198019829C81F1D100220F272E
:10CE1C0041F2010645F6C055114643F22604500175
:10CE2C000E4B01320344042A99815981DF819E8281
:10CE3C00DD80198019829C81F1D1F0BD00C00F40BA
:10CE4C0000C03D40000003FC00003E4000403E405E
:10CE5C0000803E4000C01D4000001E4000401E40AF
:10CE6C0038B11028054A28BF1020C3B210781370AF
:10CE7C007047024A0123107813707047EA22002091
:10CE8C000A4B30B4586A1C46996A626AA36A994282
:10CE9C0008BF9042104619460CBF01250025002DF5
:10CEAC00F3D0D90B30BC41EA4240704700400D40F2
:10CEBC0072B6EFF30583494D6B60EFF30883484C72
:10CECC002E4648484849494A24680068096812684F
:10CEDC002961AC60E8606A619A69454CAA61DB69BA
:10CEEC00444FEB6100F0C6F885ED080AFFF7C8FF68
:10CEFC000B234FF0FF32686219462B604A40202109
:10CF0C0002F00103013904FB03F383EA5202F7D167
:10CF1C00BE4202D056F8041FF0E730498A62BFF3D4
:10CF2C004F8F354B354A19601A60BFF34F8FBFF3E3
:10CF3C006F8F334A0225334CD36E334943F440533D
:10CF4C003248D3662560D36923F07F0343F0400356
:10CF5C00D3610B6883423ED82A4A002101202C4E13
:10CF6C0011604FF0FF33C2F808110C46C2F8006193
:10CF7C001546C2F808010746DFF8C0E0254E2648E2
:10CF8C002649274ACEF80030336003600B601360EB
:10CF9C0001E000F0A7F9D5F80C211A4B002AF8D0C3
:10CFAC000134C5F80C714F2CF3D91E4A02241E48CB
:10CFBC004FF00041C0F840415163D3F80C2132B915
:10CFCC001A491B4A0A63D3F80C010028FAD0194BF2
:10CFDC00194A1A60FEE7FFF70BF8BDE780FF272020
:10CFEC0028ED00E02CED00E034ED00E038ED00E041
:10CFFC002083B8EDA4FF272070EF00E0A0FF2720CE
:10D00C0000C00F4000400840481B0020803DCD0B65
:10D01C00009F240084E100E088E100E08CE100E066
:10D02C0090E100E000900D4000002E4000800F4089
:10D03C00F100AD0B0CED00E00400FA0580E100E01E
:10D04C00094A08B5136820B118440849884202D827
:10D05C001060184608BD02F067F90C224FF0FF3340
:10D06C000260184608BD00BF001C002000002820EC
:10D07C00FFF71EBF12490B68114A5B07FBD51368FB
:10D08C001049C3F30B23104A07EE903A0B6892ED4C
:10D09C00006AB8EEE77A07EE903A0C4AF8EE677A37
:10D0AC000B4BD2ED006A77EE677A93ED007AB8EE0F
:10D0BC00477A67EE867A87EEA60A37EE400A704703
:10D0CC0080810D40643500206C35002070350020C7
:10D0DC0068350020836BF0B41BB1536843F40043F4
:10D0EC00536072B6446B5CB31C4B2260D3F8B041F6
:10D0FC000C4215D11A4E376804E03468E41BB4F5C1
:10D10C00166F0BD2D3F8404144F48044C3F840412D
:10D11C00D3F8B851D3F840416404EED50D4003D098
:10D12C00426362B6F0BC70470C4C8260C560D4F8A8
:10D13C00B0311943C4F8B011426362B6F0BC704709
:10D14C00064D8260C460D5F8B0311943C5F8B011F2
:10D15C000263426362B6F0BC704700BF00002E4011
:10D16C00041000E070B50646006B90B10246002436
:10D17C0003E012680134012A0CD0536813F08003C9
:10D18C00F7D032632CB1B36B05689847013C284645
:10D19C00F9D170BD33637363F4E700BFF0B5E1B947
:10D1AC00214C22490020224B01224FF001158026F0
:10D1BC000A601A46A1604E60E060C3F8BC51D3F817
:10D1CC00B0411C4D44F001048860C3F8B0412860A4
:10D1DC00D2F8B031002BFBD1F0BD0904164B144D25
:10D1EC000126114C41F0800100221E60596000F5AF
:10D1FC00805CE26400F5005EA36400F54057D5F84E
:10D20C00B01100F580462A46986041F48031C3F88D
:10D21C000CC0C3F810E05F619E61C5F8B011D2F884
:10D22C00B031002BFBD1BCE700000020E035002022
:10D23C0000002E40EC2B0020C0350020F0B5F0B9DA
:10D24C00224C23490122234B00254FF0011048F2B8
:10D25C008007A1644FF480360A601A46E5644F607B
:10D26C00C3F8BC01D3F8B0011B4C30438D60C3F83C
:10D27C00B0012660D2F8B031002BFBD1F0BD000418
:10D28C00164B144D0122114C40F08000002614491D
:10D29C001A602A46E66001F5805E586001F5005779
:10D2AC00A36001F54056D5F8B001996001F58041B5
:10D2BC0040F00100C3F80CE01F615E619961C5F894
:10D2CC00B001D2F8B031002BFBD1BAE7000000203E
:10D2DC00E035002000002E40EC2B0020C035002053
:10D2EC00E42B00202DE9F04FB24C83B0D4F84481EC
:10D2FC0018F0010FC4F844815ED0D4F8AC31002B87
:10D30C0055D04FF0011BDFF8DC92AB4E2546DA46C8
:10D31C00C4F8AC31B26AF76AD4F8403143F4005324
:10D32C00C4F84031D4F840319804F5D5D5F84031E3
:10D33C0023F40053C5F84031C5F8B4A1D4F8B43186
:10D34C0013F00113FAD191B240F28160C9F80030A8
:10D35C00814200F2AF80B1F5D06F80F06581B1F5FC
:10D36C00817F00F0A08100F2C780802900F0C48189
:10D37C00822940F0B480BFB207F07F02072A00F286
:10D38C00AE8092008D498E4811440A6839060370AC
:10D39C00437040F10482D30301D5012303700221B1
:10D3AC008748FFF7FBFED4F8AC31002BB0D1814A93
:10D3BC00D2F8BC31002B49D118F0400F18D07D4B5E
:10D3CC00D3F8AC111A46C3F8AC11D3F8BC11C3F89E
:10D3DC00BC11D2F8B041774B002CFAD14FF0FF3290
:10D3EC00C3F8B421D3F8843100F046FF754B1C60B0
:10D3FC0018F0807F03D0744B1B6803B1984718F06A
:10D40C00007F03D0714B1B6803B1984718F0040FD1
:10D41C0008D0684BD3F8843113F4007347D06C4BAD
:10D42C0001221A70634BD3F8482112060BD518F061
:10D43C00800F08D067490A782AB1013AD2B20A7033
:10D44C00002A00F02E8203B0BDE8F08FDFF8949133
:10D45C00C2F8BC31D9F800100B4240F0A481594AF3
:10D46C0015681D40A8D02F0C0FD0534E4FF001095A
:10D47C0097FAA7F4B4FA84F406EBC41009FA04F48E
:10D48C004030FFF76FFEA743F2D1ADB2002D93D021
:10D49C00494E012795FAA5F4B4FA84F406EBC410AE
:10D4AC0007FA04F4FFF75EFEA543F3D184E7484A7C
:10D4BC001370B7E740F62110814200F058813ED935
:10D4CC0042F22123994200F08F8042F2213399429B
:10D4DC0000F0948042F22103994200F01581C4F8C7
:10D4EC00C0B1D4F8AC31002B7FF412AF314AD2F872
:10D4FC00BC31002BAAD15FE740F20230814200F030
:10D50C000D81B1F5A06FEAD1334980200127F36476
:10D51C00B1640F604860C5F8BCB1D5F8B0018B6040
:10D52C0040F48033C5F8B031D4F8B031002BFBD1C6
:10D53C00130C5B0643F08073C5F85431D1E7B1F599
:10D54C00086F00F02381B1F5106FC8D12349C2F3E5
:10D55C0007424FF0C810224F01933A70C5F8C8111A
:10D56C00C5F8CC01C5F8D011C5F8D411C5F8D8113F
:10D57C00C5F8DC1100F082FE00F0CCFA00F006FCDD
:10D58C0000F0B2FA144A019B80210120B264516070
:10D59C001060F364C5F8BCB1D5F8B011936041F4D8
:10D5AC008032C5F8B0210F4A1360D4F8B031002B8B
:10D5BC00FBD196E700002E4000000020C0012E4059
:10D5CC00102D0020F02B00209435002098350020E1
:10D5DC00BA350020BB350020E03500200200CC001D
:10D5EC00B9350020EC2B0020BFB23FB9B44BC2F3CD
:10D5FC000742B4491868B44B08601A70B34B8022C8
:10D60C0000210120B36418605A60F164C4F8BCB105
:10D61C00D4F8B021996042F48033C4F8B031D4F816
:10D62C00B031002BFBD15CE7A94B596800293FF4C2
:10D63C0056AF120C1FFA87FE04E00C335968002910
:10D64C003FF44DAF18889042F7D158887045F4D10B
:10D65C00100A032800F01F811B893F0CBB4228BF16
:10D66C003B46B2F5007F00F0E580B2F5E06F00F0CC
:10D67C00CE80984F1A4601933846FFF71DF8019B50
:10D68C0027F01F021F44BFF34F8F93490A602032CB
:10D69C009742FAD8BFF34F8FBFF36F8F8D4819465F
:10D6AC00FFF77CFD1DE7BFB207F07F03072B3FF6AA
:10D6BC0016AF9B00894A3F064FF000011A444FF009
:10D6CC00010013684CBF23F4803323F00103136073
:10D6DC0080227E4BF164B36418605A60C4F8BCB10C
:10D6EC00D4F8B021996042F48033C4F8B031D4F846
:10D6FC00B031002BFBD1F4E6794A022110461370AD
:10D70C005370FFF74BFDECE6380C07287FF4E7AEBF
:10D71C00744B83E88400FFF791FDE2E6BFB207F09B
:10D72C007F03072B3FF6DBAE9B006C4A39064FF0AC
:10D73C0001001A444FF0000113684CBF43F48033CE
:10D74C0043F0010313608022604BF164B3641860F2
:10D75C005A60C4F8BCB1D4F8B021996042F480335B
:10D76C00C4F8B031D4F8B031002BFBD1B9E6380C89
:10D77C0008283FF6B4AE5B4B4FF0E90E5A4983E8EC
:10D78C00840081F800E0FFF759FDAAE6574A012111
:10D79C00534B127818461A70FFF700FDA1E6D70715
:10D7AC007FF5FDADF9E54F4942F2210000240E68EA
:10D7BC004D68B1B2C9F8004081424AD04C4A9642F9
:10D7CC007FF44DAE4B4A95427FF449AE46498022D8
:10D7DC00494C00200E7801253C4926704FF001146D
:10D7EC004A60464E464A0D60B1601546F060C2F87C
:10D7FC00BC41D2F8B041886044F00101C2F8B011CC
:10D80C00C9F80000D5F8B021002AFBD127E63D4825
:10D81C001A46304F90F800E03B493C480193BEF16A
:10D82C00000F08BF01463846FEF746FF0722019B52
:10D83C007A7025E733481A46344907783248019301
:10D84C00002F08BF01462348FEF736FF214F019BEE
:10D85C0016E7A9B20029B1D123492D4C03C90F0CED
:10D86C0086282060A180A771A8D172B629480178BA
:10D87C0041F040010170D2F84811080606D441F07D
:10D88C0080018020C2F84401C2F8481162B6224AD5
:10D89C005021117092E73F0C0B78BB4228BF3B46DE
:10D8AC00E3E61C490A7802F0BF020A702AB9D3F8E1
:10D8BC00482122F08002C3F8482106F0E9F900BFA4
:10D8CC007C3500202C360020B8350020E0350020B7
:10D8DC00381600200000202070EF00E0C0012E4020
:10D8EC00102D0020E02A0020E42B0020B935002068
:10D8FC002109000202000100AB35002000000020CD
:10D90C0000002E40BA350020502D0060002E006023
:10D91C0024360020AE350020BB350020002AA0F1B3
:10D92C0002022DE9F04714BF00274FF00057052ADB
:10D93C0001D9BDE8F0874FEAC019DFF840A00D46C9
:10D94C0004460AEB0906002140229846304602F0B4
:10D95C00B1F8012047EA05414AF80910C6F83880A9
:10D96C00B060B8F1000FE4D0034BA0401C6820431A
:10D97C001860BDE8F08700BFF02B002000000020ED
:10D98C00002AA0F102022DE9F04714BF00274FF046
:10D99C000057052A01D9BDE8F0874022C501DFF800
:10D9AC00449088461544002104461E4609EB050A9E
:10D9BC00504602F07FF8012247EA084149F8051069
:10D9CC00CAF83860CAF80820002EE4D004F1100020
:10D9DC00034B8240186802431A60BDE8F08700BF11
:10D9EC00F02B00200000002012048160C36142F083
:10D9FC008002F0B44260012701F5805601F5005514
:10DA0C0001F5405401F580420760C6600561446130
:10DA1C008261F0BC704700BF831E052B00D9704794
:10DA2C00064B0A4630B400F11004012503EBC0107C
:10DA3C0005FA04F1403030BCFFF74CBB000000206D
:10DA4C00831E052B00D9704710B4054B01240A46E0
:10DA5C0004FA00F103EBC0105DF8044BFFF73ABB7E
:10DA6C000000002040687047124A134BD2F8200285
:10DA7C0020F07F40984210B584B002D800EB8000B3
:10DA8C0040000E4C01A90A22FEF7B6FE01A90023A4
:10DA9C00204611F8012B01333AB10A2B20F8022F42
:10DAAC00F7D11623237004B010BD5B00DBB22370DA
:10DABC0004B010BD00441F407F969800CC2200207B
:10DACC0000F0FEBC00F0D4BC00F034BD00F0F2BCA1
:10DADC0000F08ABD00F060BD0846114600F050BD54
:10DAEC00084600F037BD00BF70B50024074D8022FA
:10DAFC000021074801F0DEFF234622462C700C2142
:10DB0C000720BDE87040FFF73BBF00BFB2350020D7
:10DB1C00E027002000214FF4C0720A4870B50C4673
:10DB2C00094D01F0C7FF40212346224604202C70EA
:10DB3C00FFF726FF2346224608210520BDE870404A
:10DB4C00FFF71EBF60280020B33500202DE9F04FF1
:10DB5C003D4E85B03378002B66D0DFF810A13B4CDE
:10DB6C009AF800903A4D0FFA89FB039202910190BA
:10DB7C0004EB4B14374FD5F800800CE03B78002BAE
:10DB8C0052D12B68C8EB0303322B52D83378002BBD
:10DB9C004AD000F07BFD2046FFF764FF10F08000B8
:10DBAC002C4AEBD12C4B2D4A387018461968136847
:10DBBC002B4A1B0CC3EB031323F00043A2FB0332D1
:10DBCC00120A03685B1A9A42FBD8264B039D03EB9F
:10DBDC008B1B02992A465846FEF76EFD59462A467B
:10DBEC0000232046FFF700FF2BF01F030BF1400B27
:10DBFC00BFF34F8F1C4A136020339B45FBD8BFF3F8
:10DC0C004F8FBFF36F8F09F1010921460198FFF780
:10DC1C0003FFB9F10B0F13D85FFA89F900208AF8CA
:10DC2C00009005B0BDE8F08F4FF0FF3005B0BDE8B7
:10DC3C00F08F01234FF0FF30137005B0BDE8F08F6B
:10DC4C004FF00009EAE700BFB9350020602800203A
:10DC5C007C350020AF350020041000E0481B00206C
:10DC6C0011239708C000202070EF00E0B33500208E
:10DC7C002DE9F04F3B4E83B03378002B63D0DFF8A7
:10DC8C0008B1394C9BF800A0384D4FEA4A19384F6F
:10DC9C00D5F800804C448DE803000CE03B78002B59
:10DCAC0051D12B68C8EB03031E2B51D83378002BB2
:10DCBC0049D000F0EBFC2046FFF7D4FE10F08000BA
:10DCCC002B4AEBD12B4B2C4A387018461968136829
:10DCDC002A4A1B0CC3EB031323F00043A2FB0332B1
:10DCEC00120A03685B1A9A42FBD8254B9DE8220066
:10DCFC0099442A464846FEF7DFFC49462A4600234B
:10DD0C002046FFF771FE29F01F0309F12009BFF32C
:10DD1C004F8F1C4A136020339945FBD8BFF34F8FAC
:10DD2C00BFF36F8F0AF1010A06202146FFF774FE3C
:10DD3C00BAF1030F13D85FFA8AFA00208BF800A00F
:10DD4C0003B0BDE8F08F4FF0FF3003B0BDE8F08FAB
:10DD5C0001234FF0FF30137003B0BDE8F08F4FF08C
:10DD6C00000AEAE7B9350020E02900207C350020C4
:10DD7C00B0350020041000E0481B00201123970848
:10DD8C00C003202070EF00E0B435002070B50024F3
:10DD9C00074D80220021074801F08CFE23462246C5
:10DDAC002C7008210620BDE87040FFF7E9BD00BFCC
:10DDBC00B4350020E0290020F0B5194C0B4683B097
:10DDCC00218881422AD84A1E92B216490988994262
:10DDDC0001D84B1E9BB2DFF85CE00226124F0521E6
:10DDEC00124D6846124CDEF800E03F682D6824683E
:10DDFC000EFB02728DF8006005FB0343150C120E2E
:10DE0C001C0C8DF801501B0E8DF802208DF8034070
:10DE1C008DF80430FFF72CFF03B0F0BD0246D4E7B9
:10DE2C00E4220020E6220020BC220020C822002090
:10DE3C00C0220020C42200202DE9F04F7F2883B09F
:10DE4C00019256D9B0F5F05F28BF4FF4F0504FEA6D
:10DE5C005008064608F10044B4FBF0F44FEA540EA7
:10DE6C000EF1FF397F2939D9B1F5F05F28BF4FF496
:10DE7C00F0514FEA510C0D460CF10043B3FBF1F39A
:10DE8C005F087A1EDFF890B0DFF890A0ABF80000C6
:10DE9C001D48AAF80010DFF888B0DFF888A01B49ED
:10DEAC000360019BCBF80040CAF800900A6093B164
:10DEBC00174A13464244DFF8708063444446F044EA
:10DECC00B2FBF6F6B3FBF5F53C44CAF80080CBF890
:10DEDC0000600C60056003B0BDE8F08F0D4B802531
:10DEEC004FF400074FF0400C1A4629464FF0807350
:10DEFC00C8E78026DFF81C904FF4000E4FF08074BA
:10DF0C0030464FF04008ADE7C8220020C022002068
:10DF1C00CDCCCC6CFFFF7F00E4220020E622002059
:10DF2C00C4220020BC22002098999909F8B5144904
:10DF3C004FF40037134D034601EB8024124E134A65
:10DF4C0005EB40152146176028463288FFF74CFD3B
:10DF5C00318824F01F032144BFF34F8F0C4A136008
:10DF6C0020339942FBD8BFF34F8FBFF36F8F032041
:10DF7C002946FFF765FD074B4FF400321A60F8BDD8
:10DF8C0040042020E02600209C3500208CE100E09D
:10DF9C005CEF00E00CE100E0244A43682DE9F0411D
:10DFAC00C3F30E431488C569E41A002C38DD2049EC
:10DFBC00204A0B781278DBB21F48204E934207D0D0
:10DFCC0010F8038036F81870C7F58062944212D9A5
:10DFDC00013300221A4F082B26F8154027F815207C
:10DFEC00184E94BFDAB213460A703268C554144402
:10DFFC003460BDE8F081144B07EB8820224627449F
:10E00C0003EB85211844FEF757FB0E4A284626F8E9
:10E01C00187013681C441460BDE8F041FFF786BF0C
:10E02C002846BDE8F041FFF781BF00BF9C350020BA
:10E03C00AC350020AD3500204835002028350020B7
:10E04C003835002024350020400420201E4B1A783F
:10E05C005AB902F0FF031D4A127832B12DE9F04192
:10E06C001B4D2A8812B9BDE8F0817047194EC2F5D4
:10E07C000068194F31784246184C07EB411704EBF6
:10E08C00C12438462146FFF7AFFC08EB040224F00C
:10E09C001F01BFF34F8F124B196020318A42FBD8FE
:10E0AC00BFF34F8FBFF36F8F03203946FFF7B4FCDC
:10E0BC003378084A0133DBB2032B88BF002313707B
:10E0CC0000232B80BDE8F081B7350020B935002046
:10E0DC009E350020B5350020602A002040242020E9
:10E0EC0070EF00E02DE9F04F85B00290009100290F
:10E0FC0000F0AB800023564DDFF87481DFF860A18F
:10E10C00544FDFF870B101930122534B2A701C78E5
:10E11C00524AB8F8003002EB441923BB1E461C4689
:10E12C004846FFF79FFC10F080007ED0BFF34F8F66
:10E13C0000229AF800304A492A7004B93E68002B34
:10E14C005AD13B689B1B782B79D89BF80030002B5D
:10E15C0052D000F09BFA0124B8F800302C70002B40
:10E16C00DED03D4A14781A46C3F50060E402009EE6
:10E17C003C4920449642084442D30C440299FEF791
:10E18C009BFA002321464FF400624846FFF72CFC13
:10E19C0024F01F0304F50064BFF34F8F324A136061
:10E1AC0020339C42FAD8BFF34F8FBFF36F8F0320FD
:10E1BC004946FFF731FC284B274A1B78009801335E
:10E1CC002A49DBB2032B88BF002313700022B8F856
:10E1DC000030A8F80020C01A009001981844019053
:10E1EC00029818440290C1F88420BFF34F8F00238B
:10E1FC002B70009B002B87D1019805B0BDE8F08FE8
:10E20C00009C0393019B2246029923440193FEF741
:10E21C0053FA039B4FF04041144A00201B1B009003
:10E22C00A8F80030C2F88410DFE74FF400630A4A04
:10E23C008AF8000014781A46A8F8003096E70123F3
:10E24C0001980B7005B0BDE8F08F0098D5E700BFC2
:10E25C00B73500207C350020B5350020602A002021
:10E26C00B13500204024202070EF00E000002E404B
:10E27C009E350020B9350020704700BF314B2DE989
:10E28C00F0411B78304F002B54D04FF48063DFF8F3
:10E29C00EC803B80A8F80030002180222B480D46F2
:10E2AC002B4E01F007FC2B4C2B4B29464FF4807264
:10E2BC002A4825702C461D8001F0FCFB35602B464E
:10E2CC0075602A46B560F5602549264E2648DFF86C
:10E2DC00B0E00D70FF210570022035607560B560EF
:10E2EC00F560CEF80050FFF74BFBB8F800102A464B
:10E2FC001E4B0320FFF712FB2B463988012203200B
:10E30C00FFF73EFB20460134FFF710FE082CF9D135
:10E31C00174B4A2217480021174C0460C3F884108D
:10E32C00C3F88020D3F8482142F08072C3F848210A
:10E33C00BDE8F0814FF40073DFF840803B80A8F813
:10E34C000030A9E7BA350020A0350020602A002053
:10E35C0028350020B53500209E350020E026002011
:10E36C00AC35002038350020AD350020E9B0000078
:10E37C0000002E40943500209DB100009C350020FB
:10E38C0024350020314B4FF400322DE9F04F1A6048
:10E39C0083B02F4B89461C78002953D02D4BE4B207
:10E3AC001B789C4250D082460027DFF8C0B0013465
:10E3BC00294BC7EB09085046092C0193274B28BF62
:10E3CC0000241D5D244B33F815E0254B0EEB852105
:10E3DC0033F81560234BCEEB06061944B045324694
:10E3EC00374419D20EEB852142461944FEF764F9E5
:10E3FC00019BDBF80010484633F81520C8EB0101EF
:10E40C009044CBF8001023F81580174B4FF40032D2
:10E41C001A6003B0BDE8F08FFEF74EF9DBF8002070
:10E42C00E3B22846921BB244CBF80020084A137082
:10E43C00FFF77CFDB94503D9064B1B789C42B6D13E
:10E44C003846E2E70846E0E70020DEE78CE100E032
:10E45C00AD350020AC350020383500204835002083
:10E46C0028350020400420200CE100E02435002059
:10E47C000B4B0C4A1B781278DBB293420DD0013354
:10E48C0009480A4A092B0A4928BF0023C35C31F802
:10E49C00131002EB8323585C70474FF0FF3070472A
:10E4AC00AD350020AC35002048350020400420203C
:10E4BC0038350020014B1868704700BF2435002008
:10E4CC002DE9F84F154E164D34782B78E4B29C425A
:10E4DC0021D0DFF85490DFF854B0DFF85480114F9E
:10E4EC000134082C5FFA84FA01D90024A24619F8E9
:10E4FC000410DBF8002038F81130084637F81110FA
:10E50C005B1AD31ACBF80030FFF710FD86F800A089
:10E51C002B789C42E4D1BDE8F88F00BFAD350020CC
:10E52C00AC3500203835002048350020243500203B
:10E53C002835002000B583B001210DF10700FFF74D
:10E54C0021FF20B19DF8070003B05DF804FB4FF0EC
:10E55C00FF30F9E7094B00B583B01B788DF8070045
:10E56C0023B903F0FF0003B05DF804FB01210DF1AA
:10E57C000700FFF7B7FD03B05DF804FBB9350020C9
:10E58C00044B1B7803F0FF020BB1FFF7ABBD104639
:10E59C00704700BFB93500202DE9F0410024DFF8A9
:10E5AC00448001230D4D27460D4E88F800303378FA
:10E5BC0028462035A34204F1010405D0FFF752FA96
:10E5CC00030658BF07F50067042CF0D1BFF34F8F3B
:10E5DC000023384688F80030BDE8F081602A00201E
:10E5EC00B5350020B73500202DE9F843204B1B78BA
:10E5FC0013B1204D2A880AB9BDE8F883DFF888806A
:10E60C00C2F500691C4E4FF0010E98F800104A46F6
:10E61C001A4C002306EB4116194F04EBC12430466B
:10E62C0087F800E02146FFF7DFF909EB040224F03C
:10E63C001F01BFF34F8F134B196020318A42FBD857
:10E64C00BFF34F8FBFF36F8F03203146FFF7E4F911
:10E65C0098F800300C4A0133DBB2032B88BF00233F
:10E66C00137000232B80BFF34F8F3B70BDE8F883F2
:10E67C00B93500209E350020602A0020402420203F
:10E68C00B735002070EF00E0B53500202DE9F843D8
:10E69C00324E337893B1324F3A787AB90122D90796
:10E6AC003A7037D49A0719D400225B073A7005D513
:10E6BC002C4B1A6812B1EFF305820AB1BDE8F8834E
:10E6CC00EFF3108072B61A681AB1274C2178002922
:10E6DC002FD00028F2D162B6BDE8F883DFF8948021
:10E6EC0098F80020002ADFD00024DFF88C9005E099
:10E6FC00013498F80030E4B2A34213D959F82450ED
:10E70C002B6828461B6998470028F1D06B699B68D9
:10E71C009847EDE7FFF7CEFED0B9144B1B781BB929
:10E72C003378BFE73378BFE7337803F0FE033370F9
:10E73C00B8E70126556926701D6065B1A96100B95D
:10E74C0062B6002593681046557798472570B5E753
:10E75C0000F096F8E1E7064B1D60F0E7EC22002094
:10E76C00A7350020102B0020A2350020BA2E006007
:10E77C001C2B0020A3350020202B002010B4EFF31D
:10E78C00108272B6437F33B9017F012908D0032967
:10E79C0010D00123437702B962B65DF8044B704781
:10E7AC00114C2168A1B1114943610B680860836168
:10E7BC005861EEE70E4C216881B10E4943610B683C
:10E7CC000860836158610C4B4FF080511960E0E791
:10E7DC00064B4161816120601860DAE7054B4161AD
:10E7EC00816120601860EEE7102B00201C2B0020AC
:10E7FC00182B0020142B002004ED00E010B4047F33
:10E80C004160022CC26003D05DF8044BFFF7B6BF29
:10E81C0083685DF8044B184770B5EFF3108172B63E
:10E82C000C4C23688BB10C4E00255A6922607AB1CE
:10E83C00956101B962B65D7718469B689847EFF30E
:10E84C00108172B62368002BEFD101B962B670BD8E
:10E85C003260EEE7182B0020142B0020FFF7DCBFF2
:10E86C00044A054B1168054A19601368013313609B
:10E87C00704700BF041000E0783500207C35002084
:10E88C00704700BF0B460146184600F047BD00BF5D
:10E89C0070B440F20125046825611BB31E46F1B12A
:10E8AC000D780131013B6566256FAD0706D4656FA8
:10E8BC00013EEDB212B11570013204686569ED07C5
:10E8CC00F2D5002BEBD16EB101680B6F9B07FCD41A
:10E8DC004B6FDBB20AB113700132013EF3E790F8D3
:10E8EC003C50DFE770BC7047F0B5304C304BA06C3F
:10E8FC00656C0179226CD9772979197701791977A7
:10E90C00FAB1B2F5004F18D22B6892B2D98B0E0423
:10E91C003BD4DA83D98B89B2D9820368D98B0904A9
:10E92C002CD4DA830021DA8B92B2DA822164027958
:10E93C001F4BDA762A79DA76F0BD1E4B134423642A
:10E94C00F5E7E06C0F25236840F2013E01684FF4B7
:10E95C007C579D6503260D681749DA618D42C3F813
:10E96C0010E05F6184F83D6017D1037F4260022B99
:10E97C00C26017D0BDE8F040FFF700BFD98BC2F3DF
:10E98C00080201F47E410A43CBE7D98BC2F3080697
:10E99C0001F47E413143D983BCE72B461146BDE8D7
:10E9AC00F04018478368BDE8F04018474C1B002026
:10E9BC0000800E400180FFFF4DB900004368F0B5A8
:10E9CC0093E88200DFF8FCE1B8260A680225754C52
:10E9DC0022EA0702744F0A60DEF818201440734ACA
:10E9EC0027430F24CEF81870077C1F443F7C02EBA2
:10E9FC000717BF683E60477C1F4497F8247002EBF2
:10EA0C000717BF683E60877C1F4497F8387002EB8D
:10EA1C000717BF683E600F685E683E430E60017C5E
:10EA2C005E1803EB8101367C4F6902EB06114968D5
:10EA3C000F60417C5E180A3196F8246053F82170FF
:10EA4C0002EB061149680F60817CD3F848E05E1830
:10EA5C0003EB81011F6A96F83860C96B02EB061252
:10EA6C005E6B52681160817C0268194491F8441005
:10EA7C00CEF80010017C1944097F3960417C0B44AD
:10EA8C0093F83030336015619465C37C002B29D02A
:10EA9C0072B6C37CDC0706D5454A436911680B4046
:10EAAC0083621360C37C990706D5424A8369116857
:10EABC000B40C3621360C37C5A0706D53E4AC36938
:10EACC0011680B4003631360C37C1F0706D53B4AD8
:10EADC00036A11680B4043631360C37CDE064BD49E
:10EAEC0062B60268364D8368AB424CD0354B8560BC
:10EAFC009B69354CC3F30116C3F38261334B54F855
:10EB0C0026400131B4FBF1F1A3FB01431B0D29D1CC
:10EB1C00C360002603250724012116615562136486
:10EB2C0014661161C37CE3B1DD0703D5284B826AFF
:10EB3C001A60C37C9C0703D5264BC26A1A60C37C3F
:10EB4C00590703D5244B026B1A60C37C1A0703D5F3
:10EB5C00224B426B1A60C37CDB0602D5826B204BC6
:10EB6C001A60F0BDB1FBF3F1A94288BF0133B3F5D4
:10EB7C00817F0AD31B4BCBE71B4A436A11680B40BE
:10EB8C0083631360ACE7C368C3E7022B98BF002311
:10EB9C00BED9023B5C08210443EA042301F47F0143
:10EBAC000B43B5E7CFFFFFE310000008EC0B002090
:10EBBC0080E100E084E100E088E100E08CE100E02D
:10EBCC0000093D0000C00F40B80A002083DE1B4343
:10EBDC0000E100E004E100E008E100E00CE100E00D
:10EBEC0010E100E0FF7F7F0090E100E00BB1FFF748
:10EBFC004FBE704781F0004102E000BF83F000433C
:10EC0C0030B54FEA41044FEA430594EA050F08BFBB
:10EC1C0090EA020F1FBF54EA000C55EA020C7FEA7F
:10EC2C00645C7FEA655C00F0E2804FEA5454D4EBFC
:10EC3C005555B8BF6D420CDD2C4480EA020281EAC6
:10EC4C00030382EA000083EA010180EA020281EAFE
:10EC5C000303362D88BF30BD11F0004F4FEA013150
:10EC6C004FF4801C4CEA113102D0404261EB41015F
:10EC7C0013F0004F4FEA03334CEA133302D05242E5
:10EC8C0063EB430394EA050F00F0A780A4F10104A1
:10EC9C00D5F1200E0DDB02FA0EFC22FA05F28018DB
:10ECAC0041F1000103FA0EF2801843FA05F35941C1
:10ECBC000EE0A5F120050EF1200E012A03FA0EFC40
:10ECCC0028BF4CF0020C43FA05F3C01851EBE3716A
:10ECDC0001F0004507D54FF0000EDCF1000C7EEB87
:10ECEC0000006EEB0101B1F5801F1BD3B1F5001FC5
:10ECFC000CD349085FEA30004FEA3C0C04F10104E4
:10ED0C004FEA445212F5800F80F09A80BCF1004F0C
:10ED1C0008BF5FEA500C50F1000041EB045141EA8E
:10ED2C00050130BD5FEA4C0C404141EB010111F48F
:10ED3C00801FA4F10104E9D191F0000F04BF01463A
:10ED4C000020B1FA81F308BF2033A3F10B03B3F118
:10ED5C0020020CDA0C3208DD02F1140CC2F10C02A8
:10ED6C0001FA0CF021FA02F10CE002F11402D8BF06
:10ED7C00C2F1200C01FA02F120FA0CFCDCBF41EAD2
:10ED8C000C019040E41AA2BF01EB0451294330BDA1
:10ED9C006FEA04041F3C1CDA0C340EDC04F114047E
:10EDAC00C4F1200220FA04F001FA02F340EA030055
:10EDBC0021FA04F345EA030130BDC4F10C04C4F19B
:10EDCC00200220FA02F001FA04F340EA030029467B
:10EDDC0030BD21FA04F0294630BD94F0000F83F4C5
:10EDEC00801306BF81F480110134013D4EE77FEAA8
:10EDFC00645C18BF7FEA655C29D094EA050F08BFF4
:10EE0C0090EA020F05D054EA000C04BF19461046D4
:10EE1C0030BD91EA030F1EBF0021002030BD5FEA18
:10EE2C00545C05D14000494128BF41F0004130BD40
:10EE3C0014F580043CBF01F5801130BD01F0004594
:10EE4C0045F0FE4141F470014FF0000030BD7FEA07
:10EE5C00645C1ABF194610467FEA655C1CBF0B4602
:10EE6C00024650EA013406BF52EA033591EA030F19
:10EE7C0041F4002130BD00BF90F0000F04BF002111
:10EE8C00704730B54FF4806404F132044FF0000544
:10EE9C004FF0000150E700BF90F0000F04BF0021BD
:10EEAC00704730B54FF4806404F1320410F0004523
:10EEBC0048BF40424FF000013EE700BF42004FEA1E
:10EECC00E2014FEA31014FEA02701FBF12F07F439B
:10EEDC0093F07F4F81F06051704792F0000F14BF98
:10EEEC0093F07F4F704730B54FF4607401F00045DC
:10EEFC0021F0004120E700BF50EA010208BF704733
:10EF0C0030B54FF000050AE050EA010208BF704727
:10EF1C0030B511F0004502D5404261EB41014FF490
:10EF2C00806404F132045FEA915C3FF4DCAE4FF094
:10EF3C0003025FEADC0C18BF03325FEADC0C18BF7B
:10EF4C00033202EBDC02C2F1200300FA03FC20FACC
:10EF5C0002F001FA03FE40EA0E0021FA02F1144419
:10EF6C00C1E600BF53B94AB9002908BF00281CBF2D
:10EF7C004FF0FF314FF0FF3000F092B9ADF1080CBB
:10EF8C006DE904CE00F01AF8DDF804E0DDE90223A7
:10EF9C0004B07047430803F05533C01A830803F0DC
:10EFAC00333300F03330184400EB101000F00F3006
:10EFBC0000EB002000EB0040000E70472DE9F047FD
:10EFCC008C460E460446089D002B50D18A421746AB
:10EFDC006CD9B2FA82FEBEF1000F0BD0CEF1200438
:10EFEC0020FA04F401FA0EF644EA060C02FA0EF7C3
:10EFFC0000FA0EF44FEA1749220CBCFBF9F01FFA89
:10F00C0087F809FB10C642EA064600FB08F3B34238
:10F01C0009D9F61900F1FF3280F02281B34240F297
:10F02C001F8102383E44F61AA2B2B6FBF9F309FB73
:10F03C00136642EA064403FB08F8A04509D9E41913
:10F04C0003F1FF3280F00A81A04540F20781023BB8
:10F05C003C44C8EB040443EA00400021002D62D07C
:10F06C0024FA0EF400232C606B60BDE8F0878B4211
:10F07C0007D9002D55D0002185E841000846BDE890
:10F08C00F087B3FA83F1002940F09080B34202D3A9
:10F09C00824200F2F880841A66EB03060120B44623
:10F0AC00002D40D085E81010BDE8F08712B901277B
:10F0BC00B7FBF2F7B7FA87FEBEF1000F35D1F31BA1
:10F0CC004FEA17481FFA87FC0121B3FBF8F0220C1A
:10F0DC0008FB103642EA06460CFB00F3B34207D994
:10F0EC00F61900F1FF3202D2B34200F2CE80104684
:10F0FC00F61AA2B2B6FBF8F308FB136642EA064412
:10F10C000CFB03FCA44507D9E41903F1FF3202D22E
:10F11C00A44500F2B5801346CCEB040443EA00404E
:10F12C009CE729462846BDE8F087CEF1200106FA77
:10F13C000EF307FA0EF720FA01F94FEA1748CE4002
:10F14C0049EA0309B6FBF8FA4FEA194408FB1A66B8
:10F15C001FFA87FC44EA06430AFB0CF29A4200FAB7
:10F16C000EF40AD9DB190AF1FF3180F087809A423C
:10F17C0040F28480AAF1020A3B449B1A1FFA89F9D7
:10F18C00B3FBF8F108FB113349EA034301FB0CF61E
:10F19C009E4207D9DB1901F1FF326BD29E4269D92D
:10F1AC0002393B449B1B41EA0A418EE7C1F1200E18
:10F1BC0022FA0EF48B40234320FA0EF706FA01F4E0
:10F1CC004FEA134C26FA0EF63C43B6FBFCF9270C1F
:10F1DC000CFB19661FFA83F847EA064609FB08F789
:10F1EC00B74202FA01F200FA01FA08D9F61809F14D
:10F1FC00FF3041D2B7423FD9A9F102091E44F61B98
:10F20C00A0B2B6FBFCF40CFB146640EA064704FB08
:10F21C0008F8B84507D9FF1804F1FF3028D2B845D3
:10F22C0026D9023C1F4444EA0940C8EB0707A0FB5F
:10F23C0002894F4544464E4614D329D065B3BAEBE8
:10F24C00040367EB060707FA0EFECB40CF404EEAED
:10F25C00030385E888000021BDE8F0871346F8E633
:10F26C001046E0E6B8EB020469EB03060138E5E76B
:10F27C000446D8E7114695E78146C0E78A467CE705
:10F28C00023B3C4448E708460AE702383E442FE775
:10F29C00C245E7D33E46D1E72946BDE8F08700BF1B
:10F2AC00704700BF0A22002101F048BD024B0A46FC
:10F2BC000146186800F002B88021002010B502FB4E
:10F2CC0001F100F093F80446D8B150F8042C22F068
:10F2DC000302043A242A18D8132A14D900231B2A0F
:10F2EC000360436016D9242A8360C36011BF00F108
:10F2FC0010020361436100F1180200231360536094
:10F30C009360204610BD0246F7E7002100F0D2FBC7
:10F31C00204610BD00F10802EFE700BF13460A4675
:10F32C000146022003F02EB8014B1868704700BF4D
:10F33C008021002070B50F4E0F4D761BB61018BFF4
:10F34C00002405D0013455F8043B9847A642F9D166
:10F35C000A4E0B4D761B04F09FFCB61018BF002410
:10F36C0006D0013455F8043B9847A642F9D170BD3C
:10F37C0070BD00BFA82A0060A82A0060BC2A0060EB
:10F38C00A82A006010B5044600F016F82044407816
:10F39C0000F0080010BD00BF034A044B1268506B0C
:10F3AC00002808BF1846704780210020041C00204C
:10F3BC00D0F8EC00704700BF08B5034B1868FFF796
:10F3CC00EBFFD0F8EC0008BD80210020024B014679
:10F3DC00186800F00BB800BF80210020024B0146DA
:10F3EC00186803F045BF00BF802100202DE9F04FC5
:10F3FC0001F10B05162D83B0064640F29F8035F0C7
:10F40C00070500F1BF80A94200F2BC8000F0A0FB10
:10F41C00B5F5FC7FC0F09C826B0A00F0BA80042B1F
:10F42C0000F28381A80900F1390E4FEA4E033830FF
:10F43C00C44F07EB8303A3F108015C68A14207D119
:10F44C00ACE0002A80F2AC80E468A14200F0A68017
:10F45C00636823F003035A1B0F2AF2DDB9493C6998
:10F46C0001F1080E744500F0B381636823F00303C7
:10F47C005A1B0F2A00F39981002AC1F814E0C1F835
:10F48C0010E080F29E80B3F5007F80F06781DB088E
:10F49C0003F1010C01229B1002FA03F34A6851F8A4
:10F4AC003C80C4F8088001EBCC091A43A9F108038D
:10F4BC00E3604A6041F83C40C8F80C4083100124DA
:10F4CC009C40944200F28A80144206D120F0030042
:10F4DC006400144200F10400FAD007EBC009CC46DA
:10F4EC008046DCF80C108C4507D173E1002A80F2C1
:10F4FC008181C9688C4500F06D814B6823F0030352
:10F50C005A1B0F2AF2DD0C46D1F80CC054F8088FA8
:10F51C004B1945F001054D6042F00101C8F80CC0D3
:10F52C003046CCF808807B613B61C3F80CE0C3F833
:10F53C0008E059609A5000F00DFB1FE0102921D80B
:10F54C0000F006FB1025062302207E4F07EB8303F9
:10F55C00A3F108025C68944200F045816368E1689D
:10F56C00A56823F00303234430465A68E96042F04F
:10F57C0001028D605A6000F0EDFA0834204603B0A9
:10F58C00BDE8F08F00240C232046336003B0BDE8A7
:10F59C00F08F80234FF0400E3F2049E770465DE727
:10F5AC002344E1685A68A56842F00102E9603046DC
:10F5BC008D605A6000F0CEFA0834204603B0BDE8E6
:10F5CC00F08F234430465A6842F001025A6000F032
:10F5DC00C1FA0834204603B0BDE8F08FBC686368FC
:10F5EC0023F00308A84504D3C5EB08030F2B00F345
:10F5FC008C80554BDFF860911A68D9F800300133D4
:10F60C002A4404EB080A00F0608102F580520F32A4
:10F61C0022F47F6222F00F0211463046019200F074
:10F62C007BFFB0F1FF3F8346019A00F05881824581
:10F63C0000F2FC80454B1968DA451144196000F062
:10F64C005381D9F80000DFF810E101301BBFCAEB81
:10F65C000B0A5144CEF800B019601BF0070100F002
:10F66C001781C1F10800C1F58051834408315A4417
:10F67C00C2F30B02C2EB010949463046019300F07C
:10F68C004BFF431C019B00F03F81CBEB00024A4433
:10F69C0042F001021968C7F808B04944BC42CBF8E3
:10F6AC0004201960DFF8A49016D0B8F10F0F40F2C7
:10F6BC00FD806268A8F10C0323F00703E01802F048
:10F6CC0001024FF0050E1A430F2B6260C0F804E0E4
:10F6DC00C0F808E000F21C811D4BBC681A6891420E
:10F6EC0088BF19601B4B1A689142626888BF196009
:10F6FC0022F003029542A2EB050301D80F2B04DC88
:10F70C00304600F027FA002438E7621943F0010371
:10F71C0045F0010565603046BA60536000F01AFA96
:10F72C000834204603B0BDE8F08F142B71D9542B4C
:10F73C0000F2A480280B00F16F0E4FEA4E036E30DE
:10F74C0076E600BF701D0020DC2B0020AC2B0020C7
:10F75C00D42B0020D82B0020782100205A0A042A10
:10F76C005ED9142A00F2B38002F15C0149005B32CD
:10F77C0007EB810C57F82110DFF8DC81ACF1080C99
:10F78C008C4500F088804A6822F00302934202D232
:10F79C0089688C45F7D1D1F80CC07A68C4F80CC0D4
:10F7AC00A160CCF80840CC6088E6631942F00107F0
:10F7BC0045F00105656030464B610B61C3F80CE008
:10F7CC00C3F808E05F609A50083400F0C3F9D5E63E
:10F7DC004A6873E608F1010818F0030F0CF1080CE5
:10F7EC007FF47FAE30E0DC68A34208BF02303FF408
:10F7FC0035AEB3E60B440C465A68C96854F8085F3A
:10F80C0042F001025A603046E9608D6000F0A2F9C6
:10F81C00B4E603F15C0E03F15B004FEA4E0307E61E
:10F82C009A0902F1390149003832A1E7BC424A4B2E
:10F83C003FF400AF9C68626822F003025AE759F863
:10F84C000839994540F0828010F0030F00F1FF3029
:10F85C00F5D17B6823EA04037B6064009C423FF68D
:10F86C00BDAE002C3FF4BAAE1C4240467FF435AE20
:10F87C0064001C4200F10400FAD02EE6B3F5AA7F16
:10F88C0018D8E80B00F1780E4FEA4E037730CFE52D
:10F89C004FF48051EBE60121D8F80430921001FAB4
:10F8AC0002F21A43C8F80420614677E70123CBF82B
:10F8BC00043025E740F25452934220D8A80C00F1B2
:10F8CC007D0E4FEA4E037C30B2E51032A4E6542A8A
:10F8DC0026D81A0B02F16F0149006E3248E7BC685A
:10F8EC00626822F0030205E7CAF30B0000287FF4DC
:10F8FC00A8AE4244BB6842F001025A60ECE6FE231B
:10F90C004FF07F0E7E2093E501224FF00009C1E6F7
:10F91C0004F10801304603F0ABFCD9F80010DBE62B
:10F92C00B2F5AA7F05D8DA0B02F1780149007732DB
:10F93C001EE740F254518A4205D89A0C02F17D011F
:10F94C0049007C3214E7FE217E2211E77B6884E7B4
:10F95C00E808431C5B00F8E5701D002082B049B13B
:10F96C005AB16BB113780B601278101C18BF0120C0
:10F97C0002B0704701A9002AF3D1104602B07047BB
:10F98C006FF00100F4E700BF032A70B426D940EAF7
:10F99C0001039B0711D004780D78AC4222D10244AC
:10F9AC00431C05E013F8014B11F8015FAC4219D16F
:10F9BC009342F7D1002070BC70470C4603461E687A
:10F9CC002568AE421846214603F1040304F10404F1
:10F9DC00E1D1043A032A18462146F0D8002ADAD19C
:10F9EC001046E8E7601B70BC704700BF8842F0B55A
:10F9FC000DD98B1898420AD28118002A51D09A1A24
:10FA0C0013F8014D01F8014D9342F9D1F0BD0F2AC5
:10FA1C0048D941EA00039B0746D100F1100401F1DB
:10FA2C001003154653F8106C44F8106C53F80C6C1A
:10FA3C0044F80C6C53F8086C44F8086C103D53F8FF
:10FA4C00046C44F8046C0F2D03F1100304F1100442
:10FA5C00E8D8A2F1100323F00F0302F00F0E1033BD
:10FA6C00BEF1030F1944034421D91E1F0D467446E1
:10FA7C00043C55F8047B46F8047F032CF8D8AEF10F
:10FA8C00040424F0030404342344214402F003024C
:10FA9C0062B1013B0A4411F8014B03F8014F8A4251
:10FAAC00F9D1F0BD0346F3E70346F2E7F0BD724629
:10FABC00EEE700BF70B4840746D0541E002A41D034
:10FACC00CDB2034602E0621EE4B3144603F8015BB8
:10FADC009A07F8D1032C2ED9CDB245EA05250F2C67
:10FAEC0045EA054519D903F110022646103E0F2EA2
:10FAFC0042F8105C42F80C5C42F8085C42F8045C7A
:10FB0C0002F11002F2D8A4F1100222F00F0204F05C
:10FB1C000F041032032C13440DD91E462246043A0E
:10FB2C00032A46F8045BFAD8221F22F0030204329F
:10FB3C00134404F003042CB1C9B21C4403F8011B98
:10FB4C00A342FBD170BC704714460346C2E700BF0A
:10FB5C00704700BF704700BF2DE9F04F154689B0C4
:10FB6C0002EB420206461F4653000793B2074FEAC8
:10FB7C0095030391029355D1AB0753D1039BB5F178
:10FB8C00040A18BF4FF0010A062B50D9039A5308E8
:10FB9C00072A05FB036B40F00581079BF418BAF1AB
:10FBAC00000F40F01C813268DBF800103160CBF89C
:10FBBC00002073194FF000095A19059304934B4612
:10FBCC0006920192A1469B46019BC5EB0308444556
:10FBDC006AD25B46CB46002B00F01982049A039B39
:10FBEC00C2EB0801921B8A42A8BF0A4605FB0369B7
:10FBFC00002A40F01881CBEB0902C4EB0B04531B19
:10FC0C00A34228BF2346002B40F038818D42C0F020
:10FC1C000281A54245D2B4FBF5F3C4EB0906B20749
:10FC2C000393A9D0039B062B4FF0020AAED805FB19
:10FC3C00036306EB05089845019332D26C422346C8
:10FC4C0054469A46464528D2C1460AE0D9F80030B7
:10FC5C00DBF80010C9F80010CBF800305E45D9462F
:10FC6C001BD209EB0A0B58464946B847002814DD4D
:10FC7C00002CEBD0012C00F0148229465B46013994
:10FC8C0099F8000093F800E009F801EB002903F85B
:10FC9C00010BF4DC5E45D946E3D3019BA84498459F
:10FCAC00D0D309B0BDE8F08F31464046B8470028A4
:10FCBC000DDC58E02368D9F800202260C9F8003028
:10FCCC00C5EB09094FF0010B641B444581D3314648
:10FCDC002046B847002814DBF6D1BAF1000FE9D062
:10FCEC00BAF1010F20D029464A462346013918782B
:10FCFC0092F800E003F801EB002902F8010BF5DCA7
:10FD0C00DEE74445FFF465AFBAF1000F1BD1D8F81C
:10FD1C0000302168C8F800102360641B4FF0010B01
:10FD2C00019B2B4401934FE7029B48462146A64674
:10FD3C00013B0A68046841F8044B002B40F8042B83
:10FD4C00F6DC7446BCE7BAF1010F1ED029462346F7
:10FD5C00013998F80020187808F8010B002903F8ED
:10FD6C00012BF5DCD9E7DBD1BAF1000F40F0DE80D6
:10FD7C00049AD8F8001013681160C8F80030049B7E
:10FD8C002B4404934FF0010BCAE7029B2046013B26
:10FD9C00D8F80020016848F8041B002B40F8042B0D
:10FDAC00F5DCBAE7039A541E282A05FB046478D8BC
:10FDBC00A146B04659464046B847002849465846E1
:10FDCC001EDBB84700283FF7EAAE49464046B84725
:10FDDC0000281EDBCB46BAF1000F3FF4E4AEBAF1BB
:10FDEC00010F00F0CF8029463246013913789BF879
:10FDFC00000002F8010B00290BF8013BF5DCD8E6FA
:10FE0C00B8470028FFF6CBAE49464046B847002815
:10FE1C00E0DBC346C3E6B1FBF5F130463B462A4670
:10FE2C00FFF79AFEF5E6BAF1020FC2EB080040F0BC
:10FE3C008D80B646013A9EF8003090F800C00EF85E
:10FE4C0001CB002A00F8013BF4DCCBEB0902C4EB3C
:10FE5C000B04531BA34228BF2346002B3FF4D6AE02
:10FE6C00C3EB0900013B98F8002090F800E008F87B
:10FE7C0001EB002B00F8012BF4DCC7E6BAF1020F02
:10FE8C00C3EB0900EED09B088E46013BD8F800204E
:10FE9C00016848F8041B002B40F8042BF5DC714674
:10FEAC00B4E64FEAD20905FB09F306EB030801930C
:10FEBC00414608EB030930465B000593B847002820
:10FECC0049464046C0F29780B847002840F302816B
:10FEDC00019AC2EB0B03594618460BEB020904932B
:10FEEC00B84700284946584676DBB847002840F307
:10FEFC00E580059B019AE31A1A441146184691466F
:10FF0C000493B84700282146484648DBB8470028E8
:10FF1C003FF750AFDDF8109021464846B8474B46A6
:10FF2C0013EA200338BF2346994643E7BAF1010F81
:10FF3C0045D0049B294601391A7898F8000003F83B
:10FF4C00010B002908F8012BF5DC18E79208B646DE
:10FF5C008C46013ADEF8003001684EF8041B002A8A
:10FF6C0040F8043BF5DCCBEB0902C4EB0B04531B50
:10FF7C00A34228BF23466146002B3FF447AEC3EB98
:10FF8C00090080E7029A3046013A0368DBF800105A
:10FF9C0040F8041B002A4BF8043BF5DC09E6B84793
:10FFAC000028FFF607AFDDF8109021464846B84709
:10FFBC004B4633EA200328BF23469946FAE60498B9
:10FFCC00029B0268D8F8001040F8041B013B002B80
:10FFDC0048F8042BF5DCD2E6B847002889DBDDF8BD
:10FFEC0010B049465846B8475B4633EA200328BF51
:04FFFC004B469B468F
:02000004600199
:100000007DE7B8470028FFF669AF49463046B84754
:1000100036EA200828BFC84660E7039B05FB036457
:10002000059B9C427FF643AE0194DDF81490544644
:10003000DDF818A0C5F100084E4512D209EB080BF7
:1000400058464946B84700280BDD8CB9D9F800302E
:10005000DBF80010C9F80010CBF80030D9464E4547
:10006000ECD3019B5345D1467FF621AEAA44E3E78A
:10007000012C0ED029465B46013999F8000093F80F
:1000800000E009F801EB002903F8010BF4DCD94684
:10009000E5E7029B5846013BD9F80020016849F882
:1000A000041B002B40F8042BF5DCD946D7E7029B54
:1000B0005846013BD9F80020016849F8041B002B81
:1000C00040F8042BF5DCCFE5DDF810B04946584682
:1000D000B8475B4613EA200338BF4B469B460EE702
:1000E00049463046B84739EA200828BFB046F5E609
:1000F000034B1B680022C3F8A800C3F8AC2070476C
:100100008021002010B40C4B0C4C19680C4AD1F81B
:10011000A830D1F8AC0004FB03F402FB0040A3FBC1
:1001200002230344013243F10003C1E92A2323F0EF
:1001300000405DF8044B7047802100202DF4515899
:100140002D7F954C2DE9F04F174683B0002900F024
:10015000C1800E46814607F10B05FFF7FFFC56F8FC
:1001600004EC162D2EF00304A6F1080840D8102246
:100170001546AF4241D8944275DAC94B996808EBED
:1001800004008842416800F0D98021F00103034453
:100190005B68DB077DD51EF0010F35D03946484638
:1001A000FFF72AF90746E0B156F8043C23F00103B3
:1001B0004344A0F108029A4200F04481221F242AFD
:1001C00000F23181132A00F204810346324611689D
:1001D00019605168596092689A603146484603F048
:1001E0004DF84846FFF7BCFC384603B0BDE8F08F39
:1001F00025F00705002D2A46BBDA0C230020C9F89C
:10020000003003B0BDE8F08F56F8083CC3EB080A95
:10021000DAF8043023F0030C04EB0C039342BDDB4B
:100220005746DAF80C1057F8080F221F242AC1602D
:10023000886000F21781132A40F212813168CAF8EF
:1002400008107168CAF80C101B2A00F22B810836BE
:100250000AF110023168116071685160B1689160F3
:100260003E461C46D046631B0F2B1DD8D8F80430E1
:1002700003F0010323434444C8F80430636843F0A7
:10028000010363604846FFF76BFC304603B0BDE8EE
:10029000F08F21F003012144914221DBC368826881
:1002A0000C46D3609A60DEE7D8F8042008EB05011D
:1002B00002F00102154343F001020B44C8F8045058
:1002C0004A605A6842F0010208315A60484602F01A
:1002D000D5FFD7E7114603B0BDE8F04FFFF78CB864
:1002E0001EF0010F7FF45AAF56F8083CC3EB080A22
:1002F000DAF8043023F0030C01EB0C0E96458BDB8F
:10030000C36882685746D3609A6057F8081FDAF8C6
:100310000C30CB60221F242A996000F29980132AA6
:1003200062D93368CAF808307368CAF80C301B2ADF
:1003300000F2A08008360AF1100356E021F0030B0A
:10034000A34405F11000834559DA1EF0010F7FF434
:1003500025AF56F8081CC1EB080ADAF8041021F0A2
:10036000030CE34458453FF757AF5746DAF80C10F3
:1003700057F8080F221F242AC160886000F2B48059
:10038000132A40F2A5803168CAF808107168CAF8CB
:100390000C101B2A00F2AF8008360AF110023168F7
:1003A000116071685160B16891600AEB0501C5EB9D
:1003B0000B0242F0010299604A60DAF8043003F05F
:1003C00001031D434846CAF80450FFF7C9FB3846ED
:1003D0005CE733680360736843601B2A27D800F129
:1003E000080306F10802F2E63B4632681A607268BA
:1003F0005A60B2689A603E467446D04633E708EBCE
:100400000501C5EB0B0B4BF0010299604A6056F8F1
:10041000043C03F001031D43484646F8045CFFF723
:100420009FFB304632E73146FFF7E6FAD5E6B36880
:100430008360F368C360242A28D000F1100306F11A
:100440001002C4E650F8043C23F003031C440AE7FE
:10045000314638467446D046FFF7CEFA3E4602E7AC
:100460003A46F7E6314638461C46D046FFF7C4FA0E
:100470003E46F8E6B368CAF81030F368CAF814309C
:10048000242A1BD010360AF11803AEE73369036142
:100490007369436106F1180200F1180397E600BF83
:1004A000701D0020B168CAF81010F168CAF8141065
:1004B000242A0FD010360AF11802CBE63369CAF8A5
:1004C00018307369CAF81C3018360AF120038CE71B
:1004D0003A4664E73269CAF818207269CAF81C20E3
:1004E00018360AF12002B5E6314638460193FFF787
:1004F00083FA019B59E7B168CAF81010F168CAF88D
:100500001410242A03D010360AF1180247E7326982
:10051000CAF818207269CAF81C2018360AF120029D
:100520003DE700BF38B5074C002305460846236069
:10053000FCF78CFD431C00D038BD2368002BFBD09A
:100540002B6038BD3036002070B411F0FF0434D079
:1005500085070FD00378002B5AD09C422BD0431C28
:1005600005E013F8012B002A4FD0944223D09A07BC
:100570001846F6D10E0206F47F462643036846EA83
:10058000064601E050F8043F86EA0305A5F1013272
:10059000A3F1013122EA050221EA0303134313F018
:1005A000803FEFD0037823B932E010F8013F002BF1
:1005B0002ED09C42F9D170BC704784070BD00378D1
:1005C000002BF8D0431C03E002780133002AF2D05C
:1005D00099071846F8D10268A2F1013323EA020311
:1005E00013F0803F08D150F8042FA2F1013323EA21
:1005F000020313F0803FF6D00378002BDBD010F815
:10060000013F002BFBD170BC7047104670BC704797
:10061000184670BC704700BF00000000A2EB03004A
:10062000704700BF02780B78012A28BF9A42F5D1A3
:100630006DE9044540EA0104CDE902676FF0000C62
:100640004FEA447212B380EA010414F0070F6AD132
:1006500000F0070420F0070004F0030521F0070173
:100660004FEAC505F0E8042314F0040FF1E804672D
:100670000CFA05F462EA040266EA04060AD063EAA8
:100680000403624667EA0407664603E0F0E80423D1
:10069000F1E8046782FA4CF582EA0604A4FA8CF4C5
:1006A0006CBB83FA4CF583EA0705A5FA8CF595B97E
:1006B00050E9022351E9026782FA4CF582EA060406
:1006C000A4FA8CF483FA4CF583EA0705A5FA8CF5B5
:1006D0002543DBD09CB92DBAB5FA85F424F0070484
:1006E00027FA04F1DDE9026723FA04F303F0FF00BF
:1006F00001F0FF01FDE80445A0EB0100704724BABA
:10070000B4FA84F424F0070426FA04F1DDE9026760
:1007100022FA04F202F0FF0001F0FF01FDE80445B7
:10072000A0EB0100704714F0030F3CD110F003045C
:1007300028D150F8082B51F8083B82FA4CF582EA90
:100740000305A5FA8CF55DB950F8042C51F8043C6A
:1007500082FA4CF582EA0305A5FA8CF5002DE8D063
:100760002DBAB5FA85F424F0070423FA04F122FA2D
:1007700004F202F0FF0001F0FF01FDE80445A0EBE8
:10078000010070474FEAC40420F0030050F8082B22
:1007900021F0030151F8083B0CFA04F462EA040268
:1007A00063EA0403C9E710F003041AD0A1EB0401C3
:1007B00020F00300E40750F8042B06D00FD28B780A
:1007C0005FFAA2F4E41A06D12BB1CB785FFAB2F447
:1007D000E41A00D11BB920465DF8104B704701F1B7
:1007E000040150F8042BCC0721F0030151F8043B1D
:1007F00048D824D222F07F4482FA4CF594EA13259B
:10080000A5FA8CF50AD165B951F8043B84EA0204D3
:10081000B4EB036F0ED150F8042BEBE74FEA132330
:1008200055E035F07F454DD10878FDE80445C0F12D
:10083000000070474FEA126203F0FF0347E002EA4C
:100840001C4482FA4CF594EA1345A5FA8CF50AD1BA
:1008500065B951F8043B84EA0204B4EB034F0CD1B0
:1008600050F8042BEBE74FEA134330E015EA1C4540
:1008700028D10B884FEA124229E04FEA124203EADC
:100880001C4324E002F0FF0482FA4CF594EA13655D
:10089000A5FA8CF50AD165B951F8043B84EA020443
:1008A000B4EB032F09D150F8042BEBE74FEA1363A5
:1008B0000DE015F0FF0F05D10B684FEA122223F06F
:1008C0007F4304E04FF00000FDE80445704712BA92
:1008D0001BBA82FA4CF482EA0304A4FA8CF5B5FA46
:1008E00085F402FA04F203FA04F34FEA1260FDE819
:1008F0000445A0EB1360704780EA0102844612F0C1
:10090000030F4FD111F0030F32D14DF8044D11F008
:10091000040F51F8043B0BD0A3F101329A4312F0BB
:10092000803F04BF4CF8043B51F8043B16D100BF94
:1009300051F8044BA3F101329A4312F0803FA4F125
:1009400001320BD14CF8043BA24312F0803F04BFAC
:1009500051F8043B4CF8044BEAD023460CF8013B19
:1009600013F0FF0F4FEA3323F8D15DF8044B7047C3
:1009700011F0010F06D011F8012B0CF8012B002A01
:1009800008BF704711F0020FBFD031F8022B12F0F0
:10099000FF0F16BF2CF8022B8CF8002012F47F4FAB
:1009A000B3D1704711F8012B0CF8012B002AF9D1B3
:1009B000704700BF70B404789CB10E7805464EB104
:1009C000B4420BD00A4601E0A34207D012F8013F1F
:1009D000002BF9D115F8014F002CF0D1281A70BC6A
:1009E00070472046FBE700BF10B40B464AB104E055
:1009F00013F8014B00F8014B3CB1013AF8D1002249
:100A0000027013F8012B002AFBD1581A01385DF847
:100A1000044B7047000000000000000000000000D0
:100A200000000000000000000000000000000000C6
:100A300000000000000000000000000090F800F03E
:100A40006DE9024520F007016FF0000C10F007047B
:100A500091F820F040F049804FF000046FF007005B
:100A6000D1E9002391F840F000F1080082FA4CF23D
:100A7000A4FA8CF283FA4CF3A2FA8CF34BBBD1E9C3
:100A8000022382FA4CF200F10800A4FA8CF283FAF5
:100A90004CF3A2FA8CF3E3B9D1E9042382FA4CF2C5
:100AA00000F10800A4FA8CF283FA4CF3A2FA8CF35A
:100AB0007BB9D1E9062301F1200182FA4CF200F161
:100AC0000800A4FA8CF283FA4CF3A2FA8CF3002B00
:100AD000C6D0002A04BF04301A4612BAB2FA82F213
:100AE000FDE8024500EBD2007047D1E9002304F095
:100AF0000305C4F100004FEAC50514F0040F91F896
:100B000040F00CFA05F562EA05021CBF63EA050332
:100B100062464FF00004A9E7002A41D040EA0103F1
:100B200013F00303F0B425D1032A23D904680D6818
:100B3000AC421FD1043A35D0A4F1013525EA0404B2
:100B400014F0803F31D1071D0D1D0DE057F8043B17
:100B50000E68A3F10134B34224EA03040AD1043A33
:100B600020D014F0803F23D1032A2946384605F1CE
:100B70000405EBD803780C789C4202F1FF320CD1CB
:100B800082B114B916E06AB17BB110F8013F11F8D7
:100B9000014FA34202F1FF32F5D0181BF0BC7047A1
:100BA000104670471046F0BC70471846F0BC7047BE
:100BB0000020F3E72046F1E771B138B503460C4653
:100BC000002501E0431C054618462146FFF7BCFC02
:100BD0000028F7D1284638BDFFF7B6BC70B40478BA
:100BE000A4B10E7805464EB1B4420AD00A4601E0DF
:100BF000A34206D012F8013F002BF9D1281A70BC8D
:100C0000704715F8014F002CEDD1F7E72046F6E7C5
:100C10002DE9F84FDDF828900F46804616461D4610
:100C20008B4600E0A3465C46484614F801ABFEF74D
:100C3000C5FB5044417801F0080101F0FF0C002988
:100C4000F0D152462D2A61D02B2A04BF9BF80120F7
:100C50000BF10204002D43D0102D65D0A946BCF144
:100C6000000F0CBF6FF0004A4FF0004A0021BAFBA2
:100C7000F9FE084609FB1EAA05E029D009FB003051
:100C8000012114F8012BA2F13003092B05D9A2F19F
:100C90004103192B0AD8A2F137039D420EDD4A1CED
:100CA000EFD08645E9D24FF0FF31EAE7A2F16103C8
:100CB000192B03D8A2F157039D42F0DC4B1C15D031
:100CC000BCF1000F10D14EB1E1B93760BDE8F88F2B
:100CD0009A45D3DA70464FF0FF31D2E7BDE8F88F7E
:100CE000302A1AD00A25B9E74042ECE7BCF1000FE0
:100CF0004FF022030CBF6FF000404FF00040C8F8E7
:100D00000030F6B1671E3760BDE8F88F0BF10204C2
:100D10009BF801204FF0010C9CE7237803F0DF03E0
:100D2000582B08D0082599E7302A97D1237803F06B
:100D3000DF03582B92D14FF0100962784D460234F0
:100D40008DE7BDE8F88F00BF30B5084C084B25682B
:100D50006C6B83B0002C08BF1C46009413460A46F7
:100D600001462846FFF754FF03B030BD8021002024
:100D7000041C00202DE9F04F2DED068BB9B00C4678
:100D8000039192460993059002F060FB036810936B
:100D90001846FFF753FEA3890F90190603D5236960
:100DA000002B01F07D8000239FEDA48B9FEDA59B80
:100DB0000D931D931C931193069328AB1B93994697
:100DC0009AF800305446EBB1252B02D11AE0252BBE
:100DD00003D014F8013F002BF9D1CAEB04058DB103
:100DE0001C9B1D9AC9F800A001332A44072BC9F89F
:100DF00004501D921C9300F3A38009F10809069B7F
:100E00002B4406932378002B00F0A38000231A467E
:100E10008DF84F30194607939B464FF0FF386378A3
:100E200004F1010A45460AF1010AA3F120005828FD
:100E300000F2F883DFE810F06303F603F6036B03B8
:100E4000F603F603F603F603F603F60370037E03D8
:100E5000F6035D00DF00F603FB000C010C010C0142
:100E60000C010C010C010C010C010C01F603F60342
:100E7000F603F603F603F603F603F603F603F603AA
:100E80001C015E01F6035E01F603F603F603F603AA
:100E9000A102F603F603A602F603F603F603F60331
:100EA000F603D802F603F6030503F603F603F6038A
:100EB000F603F603F603F603F603F603F60343031D
:100EC00056035E015E015E015E035603F603F60300
:100ED000A403F603B103A2006200C303F603C80330
:100EE000F6038303F603F6038B0307980993404246
:100EF00007904BF0040B9AF8003094E7A846099845
:100F000000213023782288458DF8503004688DF810
:100F1000512000F104074FF000058DF84F104BF001
:100F20000203C0F29C832BF0800343F0020B54EACF
:100F30000503099700F069830F460C924348AEE21F
:100F40001BAA0399059802F0F3FD48B90DF1A00919
:100F500055E71D9B23B1059803991BAA02F0E8FDF4
:100F6000039B9B8913F0400F069B18BF4FF0FF3384
:100F7000184639B0BDEC068BBDE8F08F0C93A8463F
:100F8000002A41F09A811BF0200300F00682099F9D
:100F9000073727F00703002703F10802B845099235
:100FA000D3E900458DF84F70C0F25E8654EA050320
:100FB0002BF0800B00F04B8328AEE20842EA45722A
:100FC000E90804F007030D461446303354EA0502DD
:100FD00006F8013DF1D11BF0010F00F02782302B04
:100FE00000F024823022731E06F8012C28AAD21A9F
:100FF00008921E461DE29AF800302A2B0AF10104DD
:1010000001F02F81A3F13000092898BF002501F2DB
:10101000D58014F8013B05EB850500EB4505A3F1F0
:1010200030000928F5D945EAE575A246FDE64BF002
:10103000800B9AF80030F6E6AFF300800000000065
:1010400000000000FFFFFFFFFFFFEF7F08160020FA
:10105000A3F1300000231C461AF8013B04EB840482
:1010600000EB4404A3F130000928F5D90794DCE62D
:101070000C93A846002A41F02C814BF0100B1BF07A
:10108000200F00F00385099F073727F00707D7E9EE
:10109000002307F10801099114461D46002A73F147
:1010A0000003C0F23785B8F1000F9DF84F70C0F211
:1010B000B58154EA05032BF0800B00F0F683002D78
:1010C00008BF0A2CC0F0AE8128AE204629460A226D
:1010D0000023FDF74DFF303206F8012D204629464A
:1010E00000230A22FDF744FF04460D4654EA050397
:1010F000EBD19BE10C93A846002A41F0E680099FC2
:101100001BF0080F07F1070700F0408627F00703E0
:1011100093ED008B03F108020992B0EEC87BB4EEA8
:10112000497BF1EE10FA40F3BC85B5EEC08BF1EED1
:1011300010FA00F1CA879DF84F70A74EA74B0C9983
:1011400003224FF0000804922BF0800B4729D8BFF0
:101150001E460892CDF8388017B1049B01330493E2
:101160001BF002030A9302D0049B023304931BF08A
:1011700084030B9340F08082079B049A9C1A002CF6
:1011800040F37A82102C1D991C9A954F23DD484616
:101190001025C146B046059E04E0103C102C00F11D
:1011A000080015DD01321031072A1D911C920760DD
:1011B0004560F2DD1BAA0399304602F0B9FC002815
:1011C0007FF4CEAE103C102C1D991C9A28A8E9DCA7
:1011D0004646C846814601326318072A1D931C9271
:1011E000C9F80070C9F8044000F3E2839DF84F701D
:1011F00009F1080977B11C9A013201330DF14F0052
:101200000121072A1D931C9289E8030000F35F83E4
:1012100009F108090A9A6AB11C9A0132023314A82A
:101220000221072A1D931C9289E8030000F35B83C7
:1012300009F108090B9A802A00F07E82089AC2EB15
:101240000804002C34DD102C1C9A664F23DD49461F
:101250004FF01008B146059D039E04E0103C102C91
:1012600001F1080115DD01321033072A1D931C928C
:1012700081E88001F2DD1BAA3146284602F058FCC5
:1012800000287FF46DAE103C102C1D9B1C9A28A9E1
:10129000E9DC4E46894601322344072A1D931C92FD
:1012A000C9F80070C9F8044000F3058309F1080982
:1012B0001BF4807F40F0E2811C9A0898C9F8006016
:1012C00001320344072A1D93C9F804001C9200F35D
:1012D000C28209F108091BF0040F3ED0079A049955
:1012E000541A002C39DD102C1C9A3D4F22DD10259C
:1012F000059EDDF80C8004E0103C102C09F1080973
:1013000018DD01321033072A1D931C92C9F80070B2
:10131000C9F80450F0DD1BAA4146304602F008FC33
:1013200000287FF41DAE103C102C1D9B1C9A0DF163
:10133000A009E6DC01322344072A1D931C92C9F858
:101340000070C9F8044008DD1BAA0399059802F053
:10135000EFFB00287FF404AE1D9B069A07990498C2
:101360008142ACBF521812180692002B40F07F82C7
:1013700000231C930DF1A00922E54BF0080B9AF80D
:10138000003050E50C93A846002A40F09A874BF0B5
:10139000100B1BF020037FF4FAAD1BF0100240F09D
:1013A00091831BF0400300F08D8309998DF84F2045
:1013B0000B46B8F1000F03F104030C884FF0000551
:1013C000C0F2AB8554EA05012BF0800B099300F0C5
:1013D0003E811746F0E500BFE8150020E415002027
:1013E000D00B0020041700200C93A846002A40F0E0
:1013F00059874BF0100B1BF0200300F0E782099F88
:10140000073727F00703002703F10802B8450992C0
:10141000D3E900458DF84F70BFF64BAE54EA050393
:101420007FF44DAE38AE303406F8414D28AB9B1BEF
:101430000893089B4345B8BF4346049300230E938B
:101440008AE60C93A846002A40F028871BF0200F5C
:10145000C24800F08680099F073727F00703D3E9C9
:10146000004503F1080209921BF0010700F04782D2
:1014700054EA050300F0A384002730239DF83020B0
:101480008DF85030B8458DF851208DF84F704BF0E5
:101490000203C0F217862BF0800343F0020B28AE44
:1014A000230904F00F0143EA05732A091C46154677
:1014B000435C06F8013D54EA0503F1D1B6E709990A
:1014C0000C930A688DF8782000230A461F468DF891
:1014D0004F30043201230493B8460E9709920893C3
:1014E0001EAE3DE60C93A846002A3FF4C8AD8DF829
:1014F0004F10C4E54BF0400B9AF8003093E49AF893
:10150000003000297FF48FAC012220218BE44BF0C6
:10151000010B9AF8003086E4099C2368079318466B
:101520000028234603F10403FFF6DFAC09939AF881
:10153000003078E49AF8003001222B2173E40C93F8
:10154000A846002A3FF457AF8DF84F1053E70C938D
:10155000A846002A40F0AA861BF0200F80487FF49E
:101560007AAF099A1BF0100F134640F0C1821BF0AE
:10157000400F00F0BD82043314880993002573E7FF
:101580009AF800306C2B03BF9AF801304BF0200B17
:101590000AF1010A4BF0100B45E4002A40F06F8677
:1015A0001BF0200F00F06683099A06991368CD1787
:1015B0000846043229460992C3E9000100E44BF0D1
:1015C000200B9AF800302EE4099A0C931668002438
:1015D0008DF84F40171D002E00F06585002DC0F2DC
:1015E000A2842A462146304601F040FF002800F040
:1015F000CC85831B0893A04623EAE37309970493E1
:10160000CDF838809DF84F70A6E555480C92B8F19A
:10161000000F40F0848147464FF00008CDF820804D
:1016200028AE06E70C93002A40F02D860C9A002A7B
:101630003FF48FAC002301211F4604918DF87820E0
:101640008DF84F3098460E9308911EAE88E5B8F19C
:10165000000F00F08B85002700240025ACE44048F3
:101660000C929B4654EA050309974FF000077FF45C
:1016700016AF0024002512E71D9BBBE50C9A652AD6
:1016800040F3A180B5EE408BF1EE10FA40F04981B5
:101690001C9A3449C9F80010013201330121072A8C
:1016A0001D931C92C9F8041000F3928309F10809F4
:1016B000159A0D998A4203DB1BF0010F3FF40BAE24
:1016C0001C9A0F981099C9F8001001320344072A98
:1016D0001D93C9F804001C9200F3D68309F1080990
:1016E0000D9A541E002C7FF7F6AD102C1C9A1E4F3D
:1016F00040F3DC811025059EDDF80C8005E009F142
:101700000809103C102C40F3D18101321033072A14
:101710001D931C92C9F80070C9F80450EFDD1BAA94
:101720004146304602F004FA00287FF419AC1D9BB4
:101730001C9A0DF1A009E4E7079A0499541A002CA9
:101740007FF77CAD102C1C9A074F2EDD49461025E3
:10175000C1461846B046059E0DE000BFF4150020B6
:10176000081600202416002004170020103C102C1E
:1017700001F1080115DD01321030072A1D901C927D
:101780000F604D60F2DD1BAA0399304602F0D0F9DC
:1017900000287FF4E5AB103C102C1D981C9A28A95A
:1017A000E9DC46460346C846894601322344072AF7
:1017B0001D931C92C9F80070C9F8044000F34682DA
:1017C00009F108093AE50D9AC9F80060012A1C9A46
:1017D00003F1010302F101024FF001011D931C927C
:1017E000C9F8041040F31082072A00F3158209F1AA
:1017F00008090F981099C9F8001001320344072A0C
:101800001D931C92C9F8040000F3138209F1080922
:10181000B5EE408BF1EE10FA0D9900F0F58001392C
:10182000013201360B44072AC9F800601C921D934F
:10183000C9F8041000F31D8109F108091198C9F8CD
:1018400004000132034417A9072A1D931C92C9F80A
:1018500000107FF73EAD1BAA0399059802F068F9C6
:1018600000287FF47DAB1D9B0DF1A00933E51BAA79
:101870000399059802F05CF900283FF479ADFFF771
:101880006FBB0999B8F1000F0C688DF84F3001F16A
:1018900004074FF00005C0F2718354EA050209976E
:1018A0002BF0800B1F467FF40AACB8F1000F3FF419
:1018B000B3AE0024B6E51BAA0399059802F038F9E7
:1018C00000287FF44DAB1D9B0DF1A009F0E41BAA8D
:1018D0000399059802F02CF900287FF441AB1D9B79
:1018E0000DF1A00996E41BAA0399059802F020F9CE
:1018F00000287FF435AB1D9B0DF1A0099AE4B8F1E7
:10190000000F8DF84F70C0F26F8254EA05032BF080
:10191000800B7FF4C4ADB8F1000F3FF47CAE00271C
:10192000A7E6159C002C40F361820E9A0D998A421D
:10193000A8BF0A46002A14460DDD1C9AC9F80060AB
:1019400001322344072A1D93C9F804401C9200F376
:10195000728309F108090E9A002CA8BF121B002AF5
:10196000144640F3F180102C1C9AC14F40F31982A9
:1019700049461025B146DDF81480039E04E0083185
:10198000103C102C40F30B8201321033072A1D93B8
:101990001C920F604D60F2DD1BAA3146404602F0FA
:1019A000C7F800287FF4DCAA1D9B1C9A28A9E7E74A
:1019B0001BAA0399059802F0BBF800287FF4D0AA6F
:1019C0009DF84F701D9B0DF1A00913E41BF0100250
:1019D0007FF457AF1BF040033FF453AF09998DF8E4
:1019E0004F200B46B8F1000F03F104030C884FF0B1
:1019F0000005C0F2948254EA05012BF0800B099394
:101A000017467FF45CAB50E74C1E002C7FF716AFF7
:101A1000102C974F22DD1025059EDDF80C8004E088
:101A2000103C102C09F1080918DD01321033072A87
:101A30001D931C92C9F80070C9F80450F0DD1BAA70
:101A40004146304602F074F800287FF489AA103C21
:101A5000102C1D9B1C9A0DF1A009E6DC01322344D9
:101A6000072A1D931C92C9F80070C9F804407FF73B
:101A7000E3AE1BAA0399059802F05AF800287FF4F8
:101A80006FAA1D9B1C9A0DF1A009D7E61BF0100F41
:101A900033D11BF0400F30D00999B1F90040043127
:101AA000E51722462B460991FFF7F8BA0132234485
:101AB000072A1D931C92C9F80070C9F804407FF7EB
:101AC00008ACC8E60999B8F1000F0C688DF84F30E2
:101AD00001F104074FF00005C0F2C58054EA050289
:101AE0002BF0800B09973FF4B2AD1F46FFF764BAA5
:101AF0001C68043309930025B6E4099A1468134658
:101B00000433E51722460993002A2B4673F100039C
:101B1000BFF6C9AA64424FF02D0765EB4505B8F141
:101B2000000F8DF84F70FFF6CAAA2BF0800BFFF75D
:101B3000C6BA1BAA0399059801F0FAFF00287FF4A2
:101B40000FAA1D9B0DF1A0090E99159A31440D465F
:101B50000D998A4247DB1BF0010F44D10D980644D2
:101B6000741B821A9442A8BF1446002C26460DDD31
:101B70001C99C9F800500131234407291D93C9F865
:101B800004401C9100F3808209F10809002EACBFCB
:101B9000941B1446002C7FF79EAB102C1C9A344FDC
:101BA00084DD1025059EDDF80C8005E009F10809AB
:101BB000103C102C7FF77AAF01321033072A1D93A7
:101BC0001C92C9F80070C9F80450EFDD1BAA414609
:101BD000304601F0ADFF00287FF4C2A91D9B1C9A7E
:101BE0000DF1A009E4E71C990F9C1098C9F80000BA
:101BF0000131234407291D93C9F804401C9100F3C7
:101C0000268209F10809A9E71BF0010F7FF4ECAD6A
:101C1000072A7FF711AE2CE71BAA0399059801F05C
:101C200087FF00287FF49CA91D9B1C9A0DF1A00939
:101C3000DFE51BAA0399059801F07AFF00287FF4DD
:101C40008FA91D9B1C9A0DF1A009E1E51BAA039920
:101C5000059801F06DFF00287FF482A91D9B0DF10E
:101C6000A009FFF7EBBA09970027FFF7A5B900BF56
:101C7000041700201BF0100F0BD11BF0400F08D0F1
:101C8000099A136804320992BDF818201A80FFF7E8
:101C900097B8099A136804320992069A1A60FFF7F6
:101CA0008FB8B4EE488BF1EE10FA80F19E820C9B57
:101CB000B8F1FF3F23F0200500F02582472D00F00A
:101CC00026814BF480730A9318EE903A002BC0F2F1
:101CD0001D82B0EE48AB00270C9B662B00F0028201
:101CE000462B00F0EC80B0EE4A0B452D0CBF08F1FE
:101CF0000104444619AA16AB01920093224615AB83
:101D00000221059800F02AFC0C9B672B064640F048
:101D10000E821BF0010F00F066823119B5EE40AB68
:101D2000F1EE10FA00F08581199B994206D9302016
:101D30005A1C19921870199B9942F9D89B1B472D70
:101D40000D9300F01F810C9B652B40F3FF810C9BD2
:101D5000662B159B00F0FC810E930E9A0D998A421A
:101D6000C0F2D8811BF0010F40F0348222EAE27306
:101D7000089267220C92002F40F0F680B846049338
:101D8000DDF828B09DF84F70FFF7E6B927F0070798
:101D900007F1080397ED008B0993FFF7BEB94E4694
:101DA000894601322344072A1D931C92C9F800700A
:101DB000C9F804403FF7BDAE09F10809C4E60027A1
:101DC000B8458DF84F70FFF654AC2BF0800B1EE435
:101DD0001BAA0399059801F0ABFE00287FF4C0A868
:101DE0001D9B0DF1A00963E4099F3BE41C9AB949CE
:101DF000C9F80010013201330121072A1D931C92FA
:101E0000C9F8041076DC09F108092CB90D9A1AB941
:101E10001BF0010F3FF45FAA1C9A0F981099C9F8A4
:101E2000001001320344072A1D93C9F804001C92D4
:101E300000F3B68109F108096442002C40F3878061
:101E4000102CA54F40F3128149461025B146DDF80C
:101E50001480039E04E00831103C102C40F30481F0
:101E600001321033072A1D931C920F604D60F2DD82
:101E70001BAA3146404601F05BFE00287FF470A8A3
:101E80001D9B1C9A28A9E7E71BAA0399059801F056
:101E90004FFE00287FF464A81D9B0DF1A0091FE4EC
:101EA00040210598FDF7A8FA039A106010610028F8
:101EB00000F0ED81039A40235361FEF774BF19AA25
:101EC00016AB01920093424615AB0321B0EE4A0BCC
:101ED000059800F043FB444606460C9B462B06EB58
:101EE00004017FF41BAF3378302B00F08D81159CFB
:101EF000214413E71BAA0399059801F019FE002855
:101F00007FF42EA8159C1D9B0DF1A0097DE7B8F16B
:101F1000000F08BF4FF00108D3E60993A4E6099328
:101F20001746FFF77BBA3046FEF788FDA04603460A
:101F30000890FFF761BB1BAA0399059801F0F8FD13
:101F400000287FF40DA81D9B1C9A0DF1A0090D9887
:101F5000C9F8006001320344072A1D931C92C9F896
:101F600004007FF7B6A976E42D270493DDF828B0A6
:101F70008DF84F704FF00008FFF7EFB809971F4634
:101F8000FFF74CBA159BDA1C02DB9845BFF6E4AEAE
:101F90000C9A023A0C92013B002B9DF830201593CD
:101FA000B8BF5B428DF85C20B4BF2D222B22092BD9
:101FB0008DF85D2040F306810DF16B000446474A21
:101FC00082FB0321DA17C2EBA10202EB8201A3EB31
:101FD000410303F13001092A134604F8011DEEDC28
:101FE00021463033DAB201F8012D884240F2628195
:101FF0000DF15E01234601E013F8012B01F8012BDE
:102000009842F9D1431C1B1B0DF15E02134417AA21
:102010009B1A0D9A1193012A1344089340F3FF80F1
:10202000089B0F9A1344002208930E9223EAE3734D
:10203000A1E60B4682E61BAA0399059801F078FDFC
:1020400000287EF48DAF1D9B0DF1A00983E41BAA2F
:102050000399059801F06CFD00287EF481AF159A74
:102060001D9B0DF1A00979E54E46894601322344B6
:10207000072A1D931C92C9F80070C9F804403FF765
:102080005AAF09F1080962E71BAA0399059801F004
:102090004FFD00287EF464AF159A0D991D9B8A1A96
:1020A0000DF1A00972E5062D2B4628BF06230893E3
:1020B00023EAE373B04609970E9637460493084E19
:1020C000FFF74AB89B46FFF7EAB92D278DF84F7006
:1020D000FFF733B8241600200417002067666666F1
:1020E0001C16002019AA16AB01920093032115AB10
:1020F0004246B0EE4A0B059800F030FA44460646D8
:1021000000EB0801EFE64FF00608DAE5B1EE48AB68
:102110002D27E1E50F9A0D9B13440E9A0893002A90
:1021200040F38680672223EAE3730C9223E60C9B3C
:10213000472B7FF4F2AD1BF0010F7FF4CEAE199B5D
:10214000472DA3EB06030D933FF41CAF159B22E72D
:10215000002B1A460E9373DDB8F1000F4BD11BF024
:10216000010F48D123EAE373089204E61BF0010F44
:10217000474605D038AE302306F8413DFFF756B943
:10218000CDF8208028AEFFF754B925EAE57309970A
:102190000493089580460E909DF84F70FEF7DCBFC3
:1021A0001BAA0399059801F0C3FC00287EF4D8AE61
:1021B000159C1D9B1C9A0DF1A0093DE6A246002529
:1021C000FEF733BE303330228DF85F308DF85E205D
:1021D00018AB1CE70F9A0E9B1344672208930C92CE
:1021E00023EAE373C7E5199BA8E53C4E3C4B9DF8F9
:1021F0004F70FEF7A4BF0E9B0F9A9D1805EB0803C6
:10220000089323EAE373B6E5B5EE40ABF1EE10FABE
:102210003FF46DAEC4F10104159421447EE51BF03A
:1022200001037FF4FDAE0E93089B23EAE373A2E55E
:102230000E9B089AC3F101031A441346089271E7F2
:10224000B8F1000F02D11BF0010F07D00F9B5D1CEE
:1022500005EB0803089323EAE3738CE50123089355
:1022600089E509989AF8013005680430002D099035
:10227000A246BEF6D8AD4FF0FF35FEF7D4BD8DF8BF
:102280004F10FFF78DB98DF84F10FFF7CFB9059AB2
:102290000C2313604FF0FF30FEF76BBE8DF84F102C
:1022A000FFF7D4B88DF84F10FFF7A3B88DF84F1093
:1022B000FFF752B90DF15E03A9E68DF84F10FEF756
:1022C00062BE8DF84F10FFF762B88DF84F10FEF721
:1022D00016BF8DF84F10FEF7D0BE00BFF0150020DE
:1022E000EC150020F0B5ADF5057D04AD00930F466B
:1022F00013464FF4007403AA29460394064601F0DE
:1023000097FC88B1044602463946039B304600F0EC
:1023100029F8AC42039004D03046214600F0AEFFCD
:1023200003980DF5057DF0BD4FF0FF30F9E700BFD4
:1023300010B4044C13460A46014620685DF8044B6D
:10234000FFF7D0BF8021002021B1FF2A04D80A70F6
:1023500001207047084670478A2303604FF0FF3022
:10236000704700BF70B50D46084C114606461A4628
:10237000284600232360F9F7DFFC431C00D070BD22
:102380002368002BFBD0336070BD00BF30360020C7
:102390002DE9F047254C2568D5F848410646884682
:1023A00092469946C4B360681F2817DC431C76B177
:1023B00004EB80050122C5F888A0D4F8881182407A
:1023C0001143022EC4F88811C5F808911ED00230BE
:1023D000636044F820800020BDE8F087144B03B30D
:1023E0004FF4C870FCF7F8FF0446D0B1D5F8483177
:1023F000002780E88800C5F8484138460123C4F822
:102400008871C4F88C71002EE1D0D1E7D4F88C111A
:102410000A43C4F88C21DAE705F5A674C5F84841EB
:10242000C1E74FF0FF30BDE8F08700BFCC0B0020C4
:102430001DC5000002690B69934200F38D802DE9F0
:10244000F04F03F1FF3801F1140700F1140B57F8B6
:1024500028205BF828304FEA880483B00132B3FBB0
:10246000F2F90BEB0403009407EB040A0193B9F1B2
:10247000000F39D00025BC46DE462B465CF8046BC5
:10248000DEF80020B4B209FB0455360C2C0C09FB15
:102490000644ADB25B1BA6B213FA82F3C6EB12463A
:1024A00006EB23469BB243EA0643E2454EF8043B63
:1024B0004FEA14454FEA2643E0D2009B5BF8033015
:1024C00093B9019C231F9B450CD254F8043C4BB993
:1024D000A4F1080302E01A68043B1AB99B4508F10D
:1024E000FF38F8D3C0F81080044601F017FA00282E
:1024F0002EDB09F101095D46002357F8041B28680B
:102500008AB29A1A090C12FA80F2C1EB104303EB5B
:10251000224391B241EA0341BA4545F8041B4FEA10
:102520002343EAD25BF828200BEB880382B91A1FF9
:1025300093450BD253F8042C42B9083B02E01A68C9
:10254000043B1AB99B4508F1FF38F8D3C4F8108052
:10255000484603B0BDE8F08F002070472DE9F04FEA
:1025600057EC106B93B0056C0191044690460493B0
:1025700010EE10AABB464DB1426C6A600123934035
:10258000AB60294600F0E8FF00232364BBF1000F95
:102590005E4634DB1C9A00231360C44B1A4633405A
:1025A000934215D04BEC17ABB5EE407BF1EE10FA31
:1025B000CDE902AB2AD1049A012313601D9B002BA5
:1025C00000F0B780BA481860013813B0BDE8F08F4A
:1025D000049A42F20F731360BAF1000F00F0928078
:1025E000B4481D9B002BF0D0C378002B00F0A380D3
:1025F00000F108031D9A136013B0BDE8F08F1C9A18
:1026000001232BF000461360B346C6E711A910AAB8
:102610009DED020B204601F02DFA310D07907AD185
:1026200010981199014401F23243202B40F341826A
:10263000C3F1400301F212429E402AFA02F33343EF
:1026400007EE903AB8EE677B012553EC172B013962
:10265000A3F1F8730A9543EC172BB7EE086B9FEDC7
:102660008D4B37EE466B9FED8D7B9FED8E5BA6EE1F
:10267000047B06EE901AB8EEE66BA6EE057BFDEE47
:10268000C76BB5EEC07BF1EE10FACDED026A00F13A
:102690001C81029D162D00F21581874B03EBC503AB
:1026A00093ED007B4BEC16ABB4EEC67BF1EE10FA6B
:1026B00040F306826B1E029300230C93411AB1F182
:1026C000010900F1178100230693029B002BC0F241
:1026D000088199440B9300230593019B092B2CD867
:1026E000052B40F35F85043B019300230E93019B70
:1026F000023B032B00F25F85DFE813F0A902E5013E
:10270000B502C8036B4B6D4AC6F31300002814BF13
:102710001846104665E7DDE90223C3F3130040F0D5
:102720007F530025A1F2FF3143F4401310980A951E
:1027300091E7634849E7C31C5CE7002161642046D8
:102740008846019100F0E2FE4FF0FF370123089028
:1027500020640D970993119B002B7ADB029A0E2AB5
:1027600077DC554BB8F1000F03EBC20393ED004B40
:10277000C0F28482B1EE442B4BEC17AB87EE046BB6
:10278000BDEEC66B089A16EE103A012F03F1300326
:10279000B8EEC65B02F1010B1370A2EE057B22D0EE
:1027A000B2EE043B27EE037BB5EE407BF1EE10FA70
:1027B0003AD0089A06E027EE037BB5EE407BF1EEB7
:1027C00010FA31D087EE046BBDEEC66B16EE103AF0
:1027D00030330BF8013BC2EB0B03BB42B8EEC65BD8
:1027E000A2EE057BE7D137EE077BB4EEC74BF1EEE7
:1027F00010FA08D4B4EE474BF1EE10FA14D116EEED
:10280000103ADB0710D51BF8010C089A0BF1FF33C7
:1028100004E09A4200F0E58313F8010D392803F132
:10282000010BF6D0013018700799204600F094FE95
:102830000022029B8BF80020049A013313601D9B39
:10284000002B00F066830898C3F800B013B0BDE811
:10285000F08F099A002A53D0019A012A40F32E8260
:1028600005997A1E9142C0F257838B1A0E93002F5E
:10287000069BC0F224840A933B46069A01211A441F
:1028800020460692994400F0FFFE06463DE000BF58
:10289000AFF3008061436F63A787D23FB3C8608BFB
:1028A000288AC63FFB799F501344D33F0000F07F36
:1028B00025160020341600202804002028160020A9
:1028C0002416002001230C93F8E6B8EEE66BB4EE74
:1028D000467BF1EE10FA3FF4DCAE029B013B029323
:1028E000D7E6069A029BD21A5B4205930023069212
:1028F0000B93F2E6C9F1000306934FF00009E4E6FA
:10290000059B0E93099E069B0A930A990B4661B19B
:10291000B9F1000F09DD4945069AA8BF4B46D21A06
:102920000692CA1A0A92C3EB0909059B002B40F3D1
:102930008082099A002A00F09A810E9A002A00F0FB
:1029400096813146204600F041FF079A014606462F
:10295000204600F0A3FE07990546204600F0FCFD46
:10296000059B0E9A9B1A059340F080810121204619
:1029700000F08AFE0B9B0590002B00F0AC81014615
:102980001A46204600F022FF019B0590012B40F3E0
:10299000808200230793059A136902EB8303186969
:1029A00000F024FEC0F12000484410F01F0000F0A9
:1029B0009081C0F12003042B40F3F883C0F11C0088
:1029C000069B034406930A9B03440A938144069B97
:1029D000002B05DD29461A46204600F047FF054634
:1029E000B9F1000F05DD4A460599204600F03EFF8B
:1029F00005900C9B002B40F00182002F40F32082B9
:102A0000099B002B40F07B81DDF820B0DDF814A09D
:102A1000D84602E000F0AAFD054651462846FFF7D9
:102A200009FD00F1300908F8019BCBEB0803BB421C
:102A30004FF00A024FF0000329462046EADB089BCC
:102A4000012FACBFDB1901339B464FF0000A29462A
:102A50000122204600F00AFF0599079000F05EFF72
:102A6000002840F38C821BF8012C08990BF1FF33EE
:102A700004E08B4200F0038213F8012D392A03F1A0
:102A8000010BF6D001321A700599204600F064FD62
:102A9000002E3FF4C9AEBAF1000F05D0B24503D005
:102AA0005146204600F058FD3146204600F054FDC6
:102AB000BAE6C3F120030AFA03F307EE903AC1E540
:102AC00000230C93FAE500230993029B43445F1C07
:102AD000002F0D9340F32D823E463D460021172ED8
:102AE00061640AD9012204235B0003F11400B0429F
:102AF000114602F10102F7D96164204600F006FD9B
:102B00000E2D089020643FF626AE0E9B002B3FF45E
:102B100022AE02990029CDE90EAB40F34182C64BAB
:102B200001F00F0203EBC2020B11DE0692ED006B07
:102B300040F1FB81C14A92ED087B4BEC14AB03F0F2
:102B40000F03032184EE075B5BB1BC4ADD0704D5AC
:102B500092ED007B013126EE076B5B1002F108025B
:102B6000F4D185EE064B0C9B3BB1B7EE007BB4EE87
:102B7000C74BF1EE10FA00F1B78207EE901AB8EEEB
:102B8000E76BB1EE0C7BA6EE047B53EC172BA3F1A5
:102B90005073002F00F0A681029E39460998002844
:102BA00000F04D82B6EE003BA348089D00EBC1004B
:102BB00010ED026BBDEEC47B83EE065B17EE100AD0
:102BC00043EC162B3030C0B235EE465BB8EEC77B17
:102BD00034EE477BB4EEC75BF1EE10FA287005F1D6
:102BE000010B32DCB7EE003B33EE476BB4EEC65B55
:102BF000F1EE10FA00F3AE82012940F3CD81B2EE7E
:102C0000044B089B19440AE033EE476BB4EEC56BE6
:102C1000F1EE10FA00F19E828B4500F0BD8127EEA7
:102C2000047B25EE045BBDEEC76B16EE103A03F194
:102C30003000C0B2B8EEC66B37EE467BB4EEC57B53
:102C4000F1EE10FA0BF8010BDED50296ECE500234D
:102C50000993B8F1000F40F3708146464546CDF820
:102C6000348047463AE701230993F2E70795059A2E
:102C70000799204600F0AAFD054677E6002F3FF7AA
:102C800079AD40F04281B1EE047B24EE074B4BEC72
:102C900017ABB4EEC74BF1EE10FA3E460597C0F203
:102CA000E5806FEA0803DDF820B00293059920461D
:102CB00000F052FC002E3FF4B7ADF5E60A9A002A68
:102CC00000F00282059A0E92069A0A9203F23343AA
:102CD000D3E51C2074E6019B012B40F340820B9B43
:102CE0000793012060E6314600230A22204600F0C7
:102CF0003DFC0D9B002B064640F34D821F460A9B70
:102D0000002B05DD31461A46204600F0AFFD064691
:102D1000079B002B40F06E81B046089B013FDA19FB
:102D200009920AF001020A921F46DDF814B0284603
:102D30005946FFF77FFB31468246284600F0EEFDFC
:102D4000424659468146204600F00AFEC368834643
:102D50000AF13002002B49D101462846079200F0C3
:102D6000DDFD59460690204600F0F6FB069B079ACB
:102D70002BB9019919B90A99002900F0F581B9F127
:102D8000000FC0F2DF8005D1019919B90A99002915
:102D900000F0D880002B00F34181099B3A7007F1C5
:102DA00001099F42CB4600F04681294600230A22B2
:102DB000204600F0DBFB4645054631464FF0000358
:102DC0004FF00A0220460BD000F0D0FB41460646E9
:102DD00000230A22204600F0C9FB4F468046A4E7A4
:102DE00000F0C4FB4F46064680469EE7014620465B
:102DF000069200F0B1FB0123069AC0E70599284628
:102E000000F08CFD0028BFF6F8AD2946029D002396
:102E1000013D0A222046029500F0A8FB099B0546C9
:102E2000002B7FF460AF0D9B002B40F3AD811F465C
:102E3000EAE5079D9AE500BF280400200004002071
:102E4000019B022B7FF7DCAD002F40F069813B46F0
:102E500005990522204600F089FB01460590284689
:102E600000F05CFD002807957FF71BAF029A0899D8
:102E70003123013202920B7001F1010B16E7029A25
:102E800001320292089A31231370FDE50123099360
:102E90001BE6BAF1000F7FF47CADCBF31303002BDC
:102EA00040F01B812BF000431B0D1B05002B00F095
:102EB0005481069B01330693012309F1010907930D
:102EC0000B9B0120002B3FF46FAD64E507EE901AD9
:102ED000B8EEE76BB1EE0C7BA4EE067B53EC172B40
:102EE000A3F1507343EC162BB1EE047B34EE477B19
:102EF000B4EEC67BF1EE10FA00F3DD80B1EE466B66
:102F0000B4EEC67BF1EE10FA46D5002305931E46BB
:102F1000C7E60898FFF759BB059B0B990592D31A92
:102F2000194400230B910E93A1E49DED0E5B022149
:102F30000AE63D4600216164DFE501250D952F4637
:102F4000A846F7E7002B914611DD294601222046CD
:102F500000F08CFC0599054600F0E0FC002840F3E9
:102F60000C81B9F1390F00F0DD800AF13109B24668
:102F700087F8009007F1010B4646079584E504D1D8
:102F800019F0010F01D06EE593461BF8013C302B80
:102F90000BF1FF32F8D077E5DDE90EABFFF7DBBBD5
:102FA000029B5B42002B00F09B808B4A03F00F01D9
:102FB00002EBC10292ED007B9DED0E6B1B1126EE24
:102FC000074B00F0E680854A0221D80704D592ED30
:102FD000007B013124EE074B5B1002F10802F4D1B3
:102FE000C1E5089930220A70029A1BF8010C0132DF
:102FF000029217E47168204600F088FA33699A1C3F
:103000008046920006F10C010C30F9F75BFB41465B
:103010000122204600F02AFC80467EE6392A00F094
:10302000818002F10109B24687F8009007F1010B97
:103030004646079528E5B2469146464607E5664866
:10304000BDEEC46B4D1E00EBC50043EC172B90ED9D
:10305000003B16EE103A23EE073B08983033012967
:10306000B8EEC66B037000F1010B34EE467B14D052
:10307000B2EE045B089B19445B4627EE057BBDEE70
:10308000C76B16EE102A303203F8012B9942B8EEC6
:10309000C66B37EE467BF0D1AB44B6EE006B33EE39
:1030A000065BB4EEC75BF1EE10FA43D502961BF84F
:1030B000010CFFF7AABB002305931E46D6E6DB1BD7
:1030C0000A930023FFF7D9BB059A109B0E92069A2C
:1030D0000A92C3F13603FFF7D0BB00230793EFE654
:1030E0009DED0E4B02213EE5002F3FF4EFAE0D9813
:1030F00000287FF751AFB2EE045BB1EE0C7B0131DB
:1031000006EE901A24EE054B029BB8EEE66B5E1EAF
:10311000A4EE067B53EC172B0146A3F150733DE55B
:103120000795BEE53922B246079546463A7007F143
:10313000010B9AE436EE436BB4EEC76BF1EE10FA76
:1031400001DC29E793461BF8013C302B0BF1FF32E1
:10315000F8D07AE50296FFF758BB0793B0E6BAF1CC
:10316000000F7FF4BCAD98E6392ACB469146D9D002
:10317000BBF1000F3FF7F9AEF9E67FF4F8AE19F0B6
:10318000010F3FF4F4AEECE6019B022B08DC0D9F2F
:103190003AE40221E7E4019B022B01DC0D9FAEE53E
:1031A0000D9F51E601230E93FFF7A1BA3FF40FAC38
:1031B000C0F13C0004E4002565642946204600F087
:1031C000A5F94FF0FF3701230890A84620640D971A
:1031D0000993FFF7C0BA00BF2804002000040020B4
:1031E000F8B5234F0C460646FCF7B8FCBB685D6893
:1031F00025F00305291B01F6EF7121F47F6121F011
:103200000F01A1F58054B4F5805F07DB0021304643
:10321000FDF788F9BB682B44984204D03046FCF790
:103220009FFC0020F8BD61423046FDF77BF901307C
:103230000DD0104BBA6819682D1B45F001053046BA
:10324000091B55601960FCF78BFC0120F8BD0021BB
:103250003046FDF767F9BA68831A0F2BDEDD064C9E
:103260000449246843F00103001B53600860D5E75C
:10327000701D0020AC2B002078210020002945D0B3
:103280002DE9F0410D468046FCF768FC55F8047CBA
:103290006A4927F00103A5F10804E2188E68506816
:1032A000B24220F0030062D0FE0750600BD455F804
:1032B000087CE41B01F1080EA56875453B446FD0FE
:1032C000E768EF60BD6015186D68ED0742D543F003
:1032D00001026260E350B3F5007F18D2DB085A1C8C
:1032E0004D6851F83270A76001209B1000FA03F37B
:1032F00001EBC2001D430838E0604D6041F83240E8
:10330000FC604046BDE8F041FCF72ABC70475A0A11
:10331000042A53D89A0902F139077F0002F13805CF
:1033200001EB870051F827204449083890424DD0DE
:10333000516821F003018B4202D292689042F7D18A
:10334000D068E060A2608460D4604046BDE8F0418F
:10335000FCF706BC95683A4FBD4203443FD0D068A5
:10336000E86043F0010285606260E350B3E7FF0765
:10337000034407D455F8082CA41A1344A068E26843
:10338000C26090602F4A126843F00100934260606F
:103390008C60B6D32C4B40461968FFF721FFB0E78D
:1033A00011184968C90744D49168D268CA600344B7
:1033B00043F0010091606060E350A2E7142A17D83F
:1033C00002F15C077F0002F15B05A9E7AA104B68D8
:1033D000012505FA02F213434B600246B1E743F0C0
:1033E00001024C610C61E560A5606260E35088E712
:1033F000542A06D81A0B02F16F077F0002F16E05FE
:103400008EE7B2F5AA7F06D8DA0B02F178077F00C3
:1034100002F1770584E740F25450824206D89A0CB4
:1034200002F17D077F0002F17C0579E7FE277E250A
:1034300076E743F001026260E35062E7701D00200E
:10344000781D00207C210020DC2B0020044A054B45
:103450001268506B002808BF1846F030704700BF54
:1034600080210020041C00200000000001F0FF016A
:10347000102A2BDB10F0070F08D010F8013B013A9F
:103480008B422DD010F0070F42B3F6D1F0B441EAD1
:10349000012141EA014122F007047FF000070023E7
:1034A000F0E80256083C85EA010586EA010685FA3D
:1034B00047F5A3FA87F586FA47F6A5FA87F68EB997
:1034C000EED1F0BC01F0FF0102F0070232B110F8BA
:1034D000013B013A83EA010313B1F8D100207047A0
:1034E00001387047002D06BF35460338073815F000
:1034F000010F07D1013015F4807F02BF013015F4B0
:10350000C03F0130F0BC0138704700BFC36C70B5DC
:1035100005460C464BB153F8240080B1026843F8CD
:10352000242000230361C36070BD21220421FBF726
:10353000CBFEE86403460028EDD1002070BD0121D8
:1035400001FA04F6721D28469200FBF7BDFE002822
:10355000F3D044608660E4E731B1C36C4A6853F845
:103560002200086043F82210704700BFF0B50C69D4
:1035700083B00D46064601F1140E0027DEF8000068
:1035800081B202FB01310B0C000C02FB003389B24B
:10359000013701EB0341BC424EF8041B4FEA1343D1
:1035A000ECDC3BB1AA68944207DA05EB84020134F3
:1035B00053612C61284603B0F0BD69680193013165
:1035C0003046FFF7A3FF2A69023205F10C010746D6
:1035D00092000C30F9F776F8F26C6968019B52F8AA
:1035E0002100286042F821503D46DEE7030C1B0411
:1035F000B3B90004102310F07F4F04BF000208335A
:1036000010F0704F04BF0001043310F0404F04BFAE
:1036100080000233002807DB420003D420207047DB
:103620000023E8E7581C704718467047036813F0FA
:10363000070207D0D90720D49A0720D49B0803603B
:103640000220704799B209B91B0C102213F0FF0F2A
:1036500004BF1B0A0832190704BF1B09043299076B
:1036600004BF9B080232D90704D45B0801D1202093
:1036700070470132036010467047002070475B08B6
:1036800003600120704700BF10B50C460121FFF711
:103690003DFF01224461026110BD00BF2DE9F04FE2
:1036A0000D691769BD4283B00C46164604DA2A46F6
:1036B00034463D460E461746A368616805EB070889
:1036C0009845C8BF0131FFF721FF00F1140C0CEB46
:1036D0008809CC45009005D26346002143F8041BBD
:1036E0009945FBD806F1140202EB870A04F1140392
:1036F000524503EB850E54D2CDF80490994652F80A
:10370000043B1FFA83FBBBF1000F20D000204F4683
:103710006646054600E01E4657F8044B3068A1B2E5
:1037200083B20BFB0131240C000C4B190BFB040082
:1037300000EB134099B2334641EA0041BE454FEADF
:10374000104543F8041BE6D8756052F8043C5FEA64
:10375000134B20D0DCF80030674618464D46002158
:1037600000E037462C88000C0BFB040001449CB29F
:103770003E4644EA014346F8043B786855F8044B5A
:1037800083B2240C0BFB043404EB1143AE454FEA27
:103790001341E6D87B6092450CF1040CAFD8DDF8FC
:1037A0000490B8F1000F0BDD59F8043CA9F10409AD
:1037B0001BB105E059F8043D13B9B8F10108F9D17E
:1037C0000098C0F8108003B0BDE8F08F12F003033A
:1037D0002DE9F041144607462ED10E46A4101CD008
:1037E000BD6C95B3E3074FF0000806D4641014D005
:1037F0002868A8B10546E307F8D52A463146384679
:10380000FFF74CFFB6B17268FB6C641053F82210DE
:10381000316043F822600646EAD13046BDE8F081C7
:103820002A4629463846FFF739FF2860C0F800804D
:103830000546E0E70646D9E75A1E0B4D002355F82A
:103840002220FFF793FE0646C8E701213846FFF71E
:103850005DFE40F2712101220023416102610546B3
:10386000B8640360BEE700BF5C0F00202DE9F0479D
:1038700091460A698B684FEA691404EB020808F163
:1038800001059D420E468246496804DD5B009D426B
:1038900001F10101FADC5046FFF738FE002C00F17F
:1038A000140238DD02EB8403002142F8041B93422A
:1038B000FBD1346906F1140119F01F0901EB840EE4
:1038C00021D0C9F1200200240F6807FA09FC4CEA54
:1038D00004049C4643F8044B51F8044B8E4524FAEB
:1038E00002F4F1D8CCF804400CB108F10205DAF882
:1038F0004C307268013D53F822100561316043F885
:103900002260BDE8F087043B51F8042B43F8042FF4
:103910008E45F9D8EBE71346CBE700BF02690B6988
:10392000D21A13D19B0014301431194410B403443B
:1039300001E098420CD253F8044D51F8042D944202
:10394000F7D009D301205DF8044B7047104670474B
:1039500000205DF8044B70474FF0FF30F3E700BFE5
:103960002DE9F8430B690F4611695B1A002B90464D
:1039700017D1890007F1140208F1140553182944DE
:1039800001E09A425ED253F8046D51F8044DA6420C
:10399000F7D060D23B46144647464FF0010998469F
:1039A00006E05DDB07F1140502F114044FF0000995
:1039B0007968FFF7ABFDD8F810303E69C0F80C907D
:1039C00004EB830CA64605EB860700F114040023E4
:1039D0005EF8041B55F8048B8AB213FA88F3090CBD
:1039E0009A1AC1EB184303EB224392B242EA034214
:1039F000F44544F8042B4FEA2343E9D8AF4217D9E2
:103A0000A446294651F804EB13FA8EF2131403EB83
:103A10001E4392B242EA03428F424CF8042B4FEA13
:103A20002343EFD8ED433D4425F0030504352C44F2
:103A3000043C22B954F8043D013E002BFAD0066143
:103A4000BDE8F8830021FFF761FD01220023026138
:103A50004361BDE8F8832C464FF000091546A7E7FF
:103A60003B4607F1140408F1140547464FF00109DD
:103A700098469DE72DE9F04357EC106B83B08846DC
:103A800001213C46C7F30A551746FFF73FFDC4F333
:103A9000130481460DB144F4801401941EB302A8AE
:103AA00040F8086DFFF7C2FD002834D19DE80C00F6
:103AB000C9F81420002B0CBF01210221C9F81830CD
:103AC000C9F81010DDB909EB8103A0F23240C8F843
:103AD00000001869FFF78AFDC0EB411038604846C6
:103AE00003B0BDE8F08301A8FFF7A0FD019BC9F872
:103AF000143001212030C9F81010002DE3D0A5F2B8
:103B000033450544C0F13500C8F8005038604846D8
:103B100003B0BDE8F0839DE80C00C0F1200103FA7A
:103B200001F10A43C3400193C9F81420C2E700BF62
:103B30002DE9F04F936883B09046002B72D08346F6
:103B40004FF00009166808688B680D464C46002C3B
:103B500045D09C421F469A4646D3AB8913F4906FDA
:103B60002DD06F69296907EB4707C1EB000A07EB06
:103B7000D777601C7F105044B8423A4684BF07464E
:103B80003A465B0533D511465846FBF735FC00280D
:103B900037D0524629690190F8F794FDAA89019B14
:103BA00022F4906242F08002AA81CAEB070203EB82
:103BB0000A006F612B612860AA602746A246524620
:103BC0004946FBF719FFD8F80820AB682868DB1BCB
:103BD0005044141BAB602860C8F8084014B3D6F8F2
:103BE000009074680836B2E72746A246E7E75846D1
:103BF000FCF7A8FA03460028D7D129695846FFF7F1
:103C00003DFB0C23CBF80030AB89002243F040038E
:103C10004FF0FF30AB81C8F80820C8F8042003B08B
:103C2000BDE8F08F0020C8F8040003B0BDE8F08FB5
:103C300070B515469AB0146809B1002C1AD1002449
:103C40004FF42272ADF80C20009404941A464FF6FB
:103C5000FF761E9B029469460594ADF80E60FDF751
:103C600089F8002811DB009B286000221A70049854
:103C70001AB070BD4FF4C16200910491ADF80C20F0
:103C8000E4DA8B2303600020F2E70020F0E700BFB6
:103C9000000000005FF800F0ED1D00605FF800F02C
:103CA000392900605FF800F0E52900605FF800F056
:0C3CB000292100605FF800F0E51C0060B6
:043CBC00F8B500BF98
:083CC000D0ABFF7F0100000002
:103CC80000000000000000000000000000000000EC
:103CD80000000000000000000000000000000000DC
:103CE80000000000000000000000000000000000CC
:103CF80000000000000000000000000000000000BC
:103D080000000000000000000000000000000000AB
:103D1800000000000000000000000000000000009B
:103D2800000000000000000000000000000000008B
:103D3800000000000000000000000000000000007B
:103D4800000000000000000000000000000000006B
:103D5800000000000000000000000000000000005B
:103D6800000000000000000000000000000000004B
:103D7800000000000000000000000000000000003B
:103D8800000000000000000000000000000000002B
:103D9800000000000000000000000000000000001B
:103DA800000000000000000000000000000000000B
:103DB80000000000000000000000000000000000FB
:103DC80000000000000000000000000000000000EB
:103DD80000000000000000000000000000000000DB
:103DE80000000000000000000000000000000000CB
:103DF80000000000000000000000000000000000BB
:103E080000000000000000000000000000000000AA
:103E1800000000000000000000000000000000009A
:103E2800000000000000000000000000000000008A
:103E3800000000000000000000000000000000007A
:103E4800000000000000000000000000000000006A
:103E5800000000000000000000000000000000005A
:103E6800000000000000000000000000000000004A
:103E7800000000000000000000000000000000003A
:103E8800000000000000000000000000000000002A
:103E9800000000000000000000000000000000001A
:103EA800000000000000000000000000000000000A
:103EB80000000000000000000000000000000000FA
:103EC80000000000000000000000000000000000EA
:103ED80000000000000000000000000000000000DA
:103EE80000000000000000000000000000000000CA
:103EF80000000000000000000000000000000000BA
:103F080000000000000000000000000000000000A9
:103F18000000000000000000000000000000000099
:103F28000000000000000000000000000000000089
:103F38000000000000000000000000000000000079
:103F48000000000000000000000000000000000069
:103F58000000000000000000000000000000000059
:103F68000000000000000000000000000000000049
:103F78000000000000000000000000000000000039
:103F88000000000000000000000000000000000029
:103F98000000000000000000000000000000000019
:103FA8000000000000000000000000000000000009
:103FB80000000000000000000000000000000000F9
:103FC80000000000000000000000000000000000E9
:103FD80000000000000000000000000000000000D9
:103FE80000000000000000000000000000000000C9
:103FF80000000000000000000000000000000000B9
:1040080000000000000000000000000000000000A8
:104018000000000000000000000000000000000098
:104028000000000000000000000000000000000088
:104038000000000000000000000000000000000078
:104048000000000000000000000000000000000068
:104058000000000000000000000000000000000058
:104068000000000000000000000000000000000048
:104078000000000000000000000000000000000038
:104088000000000000000000000000000000000028
:104098000000000000000000000000000000000018
:1040A8000000000000000000000000000000000008
:1040B80000000000000000000000000000000000F8
:1040C8000080E03779C34143176E05B5B5B893460C
:1040D800F5F93FE9034F384D321D30F94877825AD8
:1040E8003CBF737FDD4F1575000000000000F03FF6
:1040F80000000000000024400000000000005940BB
:104108000000000000408F40000000000088C3400D
:1041180000000000006AF8400000000080842E4182
:1041280000000000D01263410000000084D79741CE
:104138000000000065CDCD41000000205FA00242D4
:10414800000000E876483742000000A2941A6D4249
:10415800000040E59C30A2420000901EC4BCD6423C
:1041680000003426F56B0C430080E03779C34143E7
:1041780000A0D8855734764300C84E676DC1AB435D
:10418800003D9160E458E143408CB5781DAF15447B
:1041980050EFE2D6E41A4B4492D54D06CFF0804456
:1041A800F64AE1C7022DB544B49DD9794378EA446B
:1041B800FFFFFFFFFFFFFFFF0D0A00000000464260
:1041C800000000E025496242000000C0000084426F
:1041D800000000A000008442000300E06EDB96426D
:1041E800000300C066669E4200000080AE27A6421B
:1041F800000200E00000B042000300A00000B4424A
:10420800000100E035E4BD42000200C00000C642E3
:1042180000000060DBB6CD42000100C03333D3425A
:10422800000300803D8ADD42000200A00000F04249
:10423800000100A000000443000000400000044307
:10424800000300608BEC0443000200800000104370
:1042580000010080AE2726430002006000003043C2
:1042680000030040000034430001006000004643A2
:10427800000000203D8A5D430002004000007043BA
:10428800000100400000844300030020AE27A6433D
:10429800000200200000B443000100200000C643D3
:1042A800000000000000044400030000AE2726447C
:1042B80000020000000034440001000000C03D403E
:1042C80000003E4000403E4000C01D4000001E402F
:1042D80000401E4000000000000000000000000038
:1042E80000000000000000000000000000000000C6
:1042F800000000002A0000002B0000002800000039
:1043080000000000000000000000000000000000A5
:104318000000000000000000000000000000000095
:104328000000000000000000000000000000000085
:104338000000000000000000000000000000000075
:104348000000000000000000000000000000000065
:10435800000000002C0000001E0000483400004847
:10436800200000482100004822000048240000489E
:1043780034000000260000482700004825000048B7
:104388002E000048360000002D0000003700000015
:1043980038000000270000001E0000001F00000079
:1043A800200000002100000022000000230000007F
:1043B800240000002500000026000000330000480B
:1043C80033000000360000482E0000003700004887
:1043D800380000481F000048040000480500004855
:1043E8000600004807000048080000480900004887
:1043F8000A0000480B0000480C0000480D00004867
:104408000E0000480F000048100000481100004846
:104418001200004813000048140000481500004826
:104428001600004817000048180000481900004806
:104438001A0000481B0000481C0000481D000048E6
:104448002F00000031000000300000002300004869
:104458002D000048350000000400000005000000A1
:104468000600000007000000080000000900000026
:104478000A0000000B0000000C0000000D00000006
:104488000E0000000F0000001000000011000000E6
:1044980012000000130000001400000015000000C6
:1044A80016000000170000001800000019000000A6
:1044B8001A0000001B0000001C0000001D00000086
:1044C8002F000048310000483000004835000048FF
:1044D800000000000100004102000041040000410A
:1044E8000800004110000041200000414000004148
:1044F800800000415200004251000042500000423A
:104508004F0000422A0000422B00004228000042CF
:104518002900004249000042460000424C00004287
:104528004B0000424E0000424A0000424D0000424B
:1045380039000042530000423A0000423B0000426A
:104548003C0000423D0000423E0000423F00004265
:104558004000004241000042420000424300004245
:1045680044000042450000426800004269000042E1
:104578006A0000426B0000426C0000426D0000427D
:104588006E0000426F00004270000042710000425D
:104598007200004273000042620000445900004467
:1045A8005A0000445B0000445C0000445D00004485
:1045B8005E0000445F000044600000446100004465
:1045C800540000445500004456000044570000447D
:1045D8005800004463000044670000440100008064
:1045E80002000080040000800800008010000080A5
:1045F80020000080400000808000008000010080D2
:104608000002008000040080000800800010008084
:104618000020008000400080008000801F1C1F1EBA
:104628001F1E1F1F1E1F1E1F6CC00F40C000000052
:10463800504F000039BA00000CFF000013000000C2
:10464800000000000000000024851F400BFF000050
:1046580013000000000000000000000028851F4033
:104668000DFF000013000000000000000000000023
:1046780020851F400A2524001300000012000000B6
:104688001200000001020300000000001C851F400A
:104698000000000000000000000000000000000012
:1046A800410E0000750E0000890A0000690A00002A
:1046B800190A0000150700005D0A0000450A0000FD
:1046C80079070000FD090000E1090000B1090000B8
:1046D8001D070000990900003107000025080000A7
:1046E80019080000A1070000DD070000C90B000041
:1046F8006D0B00000000000000000000B10E00007B
:1047080059070000B90D00005D0D0000A50A000062
:10471800250C0000F50A00003D070000B90A00005A
:1047280011070000000000000000000031AC00008C
:1047380029AC000025AC000021AC00001DAC000035
:1047480019AC000015AC000011AC0000000000001E
:1047580000000000890C0000510C00000D0700004B
:104768004D0B00001D0D0000D10C0000D90A0000FF
:10477800A51000004D110000D8399D270054EA2AE1
:1047880000A4781F007B9A170020202020202020DA
:1047980020202828282828202020202020202020E9
:1047A80020202020202020202088101010101010F9
:1047B8001010101010101010100404040404040445
:1047C80004040410101010101010414141414141DF
:1047D80001010101010101010101010101010101C1
:1047E80001010101101010101010424242424242D1
:1047F8000202020202020202020202020202020291
:104808000202020210101010200000000000000038
:104818000000000000000000000000000000000090
:104828000000000000000000000000000000000080
:104838000000000000000000000000000000000070
:104848000000000000000000000000000000000060
:104858000000000000000000000000000000000050
:104868000000000000000000000000000000000040
:104878000000000000000000000000000000000030
:1048880000000000000000000000000018170020D1
:104898002020202020202020202020202020202010
:1048A80000000000000000000000000000000042BE
:1048B800C8801F40B8821F40080000000000004266
:1048C800C4801F40B4821F400400000000C00042A2
:1048D80024801F4014821F401000000000C00042C6
:1048E80028801F4018821F402000000000C000429E
:1048F8002C801F401C821F404000000000C0004266
:1049080034801F4024821F40000100000040004204
:1049180064811F4054831F4000040000004000428F
:1049280080811F4070831F40000002000040004249
:104938007C811F406C831F40000001000040004242
:1049480068811F4058831F40000800000040004253
:104958003C811F402C831F400100000000400042A2
:1049680044811F4034831F4004000000004000427F
:1049780040811F4030831F40020000000040004279
:1049880048811F4038831F40080000000000004293
:1049980004811F40F4821F40000004000000004210
:1049A80008811F40F8821F400000080000000042F4
:1049B80018811F4008831F4000008000000000424B
:1049C80014811F4004831F40000040000000004283
:1049D80000811F40F0821F400000020000000042DA
:1049E800FC801F40EC821F400000010000000042D4
:1049F80024811F4014831F4000000004000000426F
:104A080028811F4018831F40000000080000004252
:104A18001C811F400C831F40000000010000004261
:104A280020811F4010831F40000000020000004248
:104A3800EC801F40DC821F40001000000000004294
:104A4800F0801F40E0821F4000200000000000426C
:104A580034811F4024831F400000004000000042B2
:104A680038811F4028831F400000008000800042DA
:104A780094801F4084821F400000040000C0004250
:104A880090801F4080821F4000000080008000420C
:104A9800A8801F4098821F400000800000800042CC
:104AA800A4801F4094821F40000040000040004244
:104AB8006C811F405C831F400010000000C0004252
:104AC80030801F4020821F408000000000400042CC
:104AD800B0811F40A0831F4000000020004000421A
:104AE800AC811F409C831F40000000100040004222
:104AF80084811F4074831F4000000400004000426E
:104B080088811F4078831F40000008000000004291
:104B18002C811F401C831F40000000100000004231
:104B280030811F4020831F40000000200000004209
:104B38000C811F40FC821F40000010000000004252
:104B480010811F4000831F400000200000800042A9
:104B5800C8811F40B8831F400080000000800042C9
:104B6800C4811F40B4831F40004000000080004201
:104B7800C0811F40B0831F40002000000080004219
:104B8800BC811F40AC831F40001000000080004221
:104B9800D0811F40C0831F400000020000800042F7
:104BA800CC811F40BC831F400000010000C00042B0
:104BB80074801F4064821F400000000100C0004252
:104BC80080801F4070821F400000000800C0004223
:104BD80084801F4074821F400000001000C0004203
:104BE8006C801F405C821F400000400000C00042F3
:104BF8007C801F406C821F400000000400C00042FF
:104C080078801F4068821F400000000200C00042F8
:104C180088801F4078821F400000002005000000A7
:104C2800190000007D0000000101000401000004DB
:104C380001320101013202010110010101110101DA
:104C48000112010201030206010301060112020218
:104C5800020000010202000102010001021000012D
:104C680002220001022300010000000000000000F1
:104C780002210001022000010000000000000000E5
:104C880001300101013101010102000401030004A6
:104C980000000000000000000121020101210101C3
:104CA80000000000000000000000000001100201E8
:104CB80000000000000000000113010601130206B5
:104CC80000000000000000000000000000000000DC
:104CD80001010201010101010100020101000101BC
:104CE80001020201010201010000000000000000B1
:104CF8000000000001230201000000000000000085
:104D080001200101000000006410B71DC8206E3B9F
:104D1800AC30D9269041DC76F4516B6B5861B24DBA
:104D28003C7105502083B8ED44930FF0E8A3D6D624
:104D38008CB361CBB0C2649BD4D2D38678E20AA08C
:104D48001CF2BDBD2E0000002E2E000046443A3A4B
:104D58002073657420617474726962757465206D5E
:104D68006F646966696564206661696C65640000E2
:104D780046443A3A207365742061747472696275A6
:104D88007465206372656174696F6E206661696C11
:104D980065640000464F3A3A207365742061747464
:104DA800726962757465206372656174696F6E20DB
:104DB8006661696C65640000464F3A3A2073657411
:104DC80020617474726962757465206D6F646966B8
:104DD800696564206661696C656400002F66696CAA
:104DE8006500000043434D5F4342434D52203D2040
:104DF8002530386C5820282566204D487A290A0025
:104E0800777269746520636F756E743A20256C75C6
:104E18002C206D733A20256C662C207065725F62B9
:104E2800797465733A20256C662C204D422F733AAD
:104E380020256C660A0000004261636B7370616331
:104E48006520636C656172732052582062756666CE
:104E5800657200004261636B7370616365206973FA
:104E6800206E6F726D616C206B657900636C656193
:104E7800726564004B422064656C61792000000013
:104E88004B65792044656C61793A20256C75206DF5
:104E9800730A00005265706F727420526174653A2B
:104EA80020256C7520487A0A000000004B422070CB
:104EB8006F7320004B657920506F733A20256C750D
:104EC8000A0000004B42206C656E00004B42206DCA
:104ED8006F75736520782000506F733A20256C75C4
:104EE8002C20256C750A00004B42206C6F61640011
:104EF8004C6F6164656420256C75206279746573F4
:104F08000A0000004572726F7220436F64653A2090
:104F180025640000536176656420256420627974F5
:104F280065730A004B422072616D207465737400CA
:104F38004B422072616D2000435055204379636CC9
:104F48006573203D20256C750A0000004B422065E2
:104F58006E637279707400004164647265737320C3
:104F68006F662074785F7374722E635F737472282F
:104F780029203A2030782530386C780A0000000063
:104F880041646472657373206F662072785F73740E
:104F9800722020202020202020203A203078253020
:104FA800386C780A000000004164647265737320ED
:104FB8006F662072785F7374722E635F73747228E1
:104FC80029203A2030782530386C780A0000000013
:104FD8004C656E6774683A20256C750A00000000FD
:104FE8006C6F6164696E6700736176696E67000053
:104FF800526563656976656420256C7520627974ED
:1050080065730A0041646472657373206F66207467
:10501800785F7374722020202020202020203A20DE
:1050280030782530386C780A000000004B42207236
:105038006F746F722073687566666C650000000097
:105048004B4220626B737063000000004B42206487
:10505800656C6179000000004B4220706F7300009E
:105068004B422074657874004B42206D6F757365F0
:10507800207920004B422073617665004B422072F4
:10508800616D207370656564000000004B422072FA
:10509800616D00004572726F7220696E6974696192
:1050A8006C697A696E672046530A000046696C6528
:1050B80020446F6573204E6F74204578697374219E
:1050C8002C204372656174696E67206E657720666F
:1050D800696C650A0000000046696C6520457272BB
:1050E8006F7200006162636465666768696A6B6C09
:1050F8006D6E6F707172737475767778797A4142D4
:10510800434445464748494A4B4C4D4E4F505152EF
:10511800535455565758595A303132333435363737
:1051280038390000456E637279707465642E2054B6
:105138006F6F6B20256C75206379636C65730A004B
:10514800526573687566666C65642E20546F6F6B64
:1051580020256C75206379636C65730A0000000074
:1051680044656C61793A20256C752C205265706F06
:10517800727420526174653A20256C7520487A2C27
:1051880020435943434E543A20256C750A000000C9
:10519800253032642E2028256455203C3C203239A5
:1051A8005529207C20282564554C203C3C20385526
:1051B800292C20667271203D2025660A0000000017
:1051C800617474656D7074696E6720746F206D6F9B
:1051D800756E74206578697374696E67206D65648F
:1051E80069610000636F756C646E2774206D6F755C
:1051F8006E74206D656469612C20617474656D70CE
:10520800696E6720746F20666F726D6174000000AC
:10521800617474656D7074696E6720746F206D6F4A
:10522800756E742066726573686C7920666F726D2E
:105238006174746564206D65646961006D6F756E75
:105248007420616674657220666F726D6174206681
:1052580061696C6564203A2800000000466C61733F
:10526800685F2575000000004672616D5F25750056
:105278004E414E445F25750051466C6173680000CD
:10528800514E414E440000002F0000006C697474B8
:105298006C6566730000000043000000504F5349DE
:1052A80058000000494E4600696E66004E414E00A7
:1052B8006E616E0030313233343536373839414219
:1052C8004344454600000000303132333435363728
:1052D800383961626364656600000000286E756C89
:1052E8006C29000030000000496E66696E697479A7
:1052F800000000004E614E000001000084210020E3
:105308001200000000060000B02E00600A00000035
:1053180000020000002E0060AF000000000700003F
:10532800502D0060AF00000000220200F021002094
:105338003F00000000210200542E00600900000018
:10534800002203005822002054000000002103001E
:105358006D2E006009000000002204009821002042
:105368005500000000210400862E0060090000009E
:10537800002205003022002028000000002105003E
:105388009F2E006009000000000300004C2D006003
:105398000000000001030904342D00600000000033
:1053A80002030904082D006000000000030309043B
:1053B800CC220020000000000000000000000000D7
:1053C8000000000030303030303030303030303095
:1053D800303030300000000000000000041A0020C7
:1053E8006C1A0020D41A0020000000000000000001
:1053F80000000000000000000000000000000000A5
:105408000000000000000000000000000000000094
:105418000000000000000000000000000000000084
:105428000000000000000000000000000000000074
:105438000000000000000000000000000000000064
:105448000000000000000000000000000000000054
:105458000000000000000000000000000000000044
:105468000000000000000000000000000000000034
:105478000000000000000000000000000000000024
:1054880001000000000000000E33CDAB34126DE6C1
:10549800ECDE05000B00000000000000000000002A
:1054A80000000000000000000000000000000000F4
:1054B80000000000000000000000000000000000E4
:1054C80000000000000000000000000000000000D4
:1054D80000000000000000000000000000000000C4
:1054E80000000000000000000000000000000000B4
:1054F80000000000000000000000000000000000A4
:105508000000000000000000000000000000000093
:105518000000000000000000000000000000000083
:105528000000000000000000000000000000000073
:105538000000000000000000000000000000000063
:105548000000000000000000000000000000000053
:105558000000000000000000000000000000000043
:105568000000000000000000000000000000000033
:105578000000000000000000000000000000000023
:105588000000000000000000000000000000000013
:105598000000000000000000000000000000000003
:1055A80000000000000000000000000000000000F3
:1055B80000000000000000000000000000000000E3
:1055C80000000000000000000000000000000000D3
:1055D80000000000000000000000000000000000C3
:1055E80000000000000000000000000000000000B3
:1055F80000000000000000000000000000000000A3
:105608000000000000000000000000000000000092
:105618000000000000000000000000000000000082
:105628000000000000000000000000000000000072
:105638000000000000000000000000000000000062
:105648000000000000000000000000000000000052
:105658000000000000000000000000000000000042
:105668000000000000000000000000000000000032
:105678000000000000000000000000000000000022
:105688000000000000000000000000000000000012
:105698000000000000000000000000000000000002
:1056A80000000000000000000000000000000000F2
:1056B80000000000000000000000000000000000E2
:1056C80000000000000000000000000000000000D2
:1056D80000000000000000000000000000000000C2
:1056E80000000000000000000000000000000000B2
:1056F80000000000000000000000000000000000A2
:105708000000000000000000000000000000000091
:105718000000000000000000000000000000000081
:105728000000000000000000000000000000000071
:105738000000000000000000000000000000000061
:105748000000000000000000000000000000000051
:105758000000000000000000000000000000000041
:105768000000000000000000000000000000000031
:105778000000000000000000000000000000000021
:105788000000000000000000000000000000000011
:105798000000000000000000000000000000000001
:1057A80000000000000000000000000000000000F1
:1057B80000000000000000000000000000000000E1
:1057C80000000000000000000000000000000000D1
:1057D80000000000000000000000000000000000C1
:1057E80000000000000000000000000000000000B1
:1057F80000000000000000000000000000000000A1
:10580800000000000029DE07007B9A1700003A40DC
:1058180068090020000000000000000000000000EF
:105828000000000000000000000000000000000070
:105838000000000000000000000000000000000060
:105848000000000000000000000000000000000050
:105858000000000000000000000000006C0A0020AA
:1058680000000000E8030000000000000000000045
:1058780064000000C8000000F401000000000000FF
:105888000000000000000000000000000000000010
:105898000000000000000000000000000000000000
:1058A80000000000000000000000000000000000F0
:1058B800000000000000000000000000FFFFFFFFE4
:1058C80040442020430000000000000000000000C9
:1058D80000000000000000000000000000000000C0
:1058E800000000004300000000000000000000006D
:1058F80000000000000000000000000000000000A0
:10590800000000004300000000000000000000004C
:10591800000000000000000000000000000000007F
:10592800000000004300000000000000000000002C
:10593800000000000000000000000000000000005F
:10594800000000004300000000000000000000000C
:10595800000000000000000000000000000000003F
:1059680000000000430000000000000000000000EC
:10597800000000000000000000000000000000001F
:1059880000000000430000000000000000000000CC
:1059980000000000000000000000000000000000FF
:1059A800000000008DF40000ADCA000000000000F7
:1059B800C80A0020841000201414002014140020A9
:1059C80014140020141400201414002014140020AF
:1059D800141400201414002014140020FFFFFFFFEB
:1059E800FFFFFFFFFFFFFFFFFFFF00000100415324
:1059F80043494900000000000000000000000000CA
:105A080000000000000000000000000000004153FA
:105A180043494900000000000000000000000000A9
:105A2800000000000000000000000000000000006E
:105A38000000000000000000701D0020701D002004
:105A4800781D0020781D0020801D0020801D00206A
:105A5800881D0020881D0020901D0020901D00201A
:105A6800981D0020981D0020A01D0020A01D0020CA
:105A7800A81D0020A81D0020B01D0020B01D00207A
:105A8800B81D0020B81D0020C01D0020C01D00202A
:105A9800C81D0020C81D0020D01D0020D01D0020DA
:105AA800D81D0020D81D0020E01D0020E01D00208A
:105AB800E81D0020E81D0020F01D0020F01D00203A
:105AC800F81D0020F81D0020001E0020001E0020E8
:105AD800081E0020081E0020101E0020101E002096
:105AE800181E0020181E0020201E0020201E002046
:105AF800281E0020281E0020301E0020301E0020F6
:105B0800381E0020381E0020401E0020401E0020A5
:105B1800481E0020481E0020501E0020501E002055
:105B2800581E0020581E0020601E0020601E002005
:105B3800681E0020681E0020701E0020701E0020B5
:105B4800781E0020781E0020801E0020801E002065
:105B5800881E0020881E0020901E0020901E002015
:105B6800981E0020981E0020A01E0020A01E0020C5
:105B7800A81E0020A81E0020B01E0020B01E002075
:105B8800B81E0020B81E0020C01E0020C01E002025
:105B9800C81E0020C81E0020D01E0020D01E0020D5
:105BA800D81E0020D81E0020E01E0020E01E002085
:105BB800E81E0020E81E0020F01E0020F01E002035
:105BC800F81E0020F81E0020001F0020001F0020E3
:105BD800081F0020081F0020101F0020101F002091
:105BE800181F0020181F0020201F0020201F002041
:105BF800281F0020281F0020301F0020301F0020F1
:105C0800381F0020381F0020401F0020401F0020A0
:105C1800481F0020481F0020501F0020501F002050
:105C2800581F0020581F0020601F0020601F002000
:105C3800681F0020681F0020701F0020701F0020B0
:105C4800781F0020781F0020801F0020801F002060
:105C5800881F0020881F0020901F0020901F002010
:105C6800981F0020981F0020A01F0020A01F0020C0
:105C7800A81F0020A81F0020B01F0020B01F002070
:105C8800B81F0020B81F0020C01F0020C01F002020
:105C9800C81F0020C81F0020D01F0020D01F0020D0
:105CA800D81F0020D81F0020E01F0020E01F002080
:105CB800E81F0020E81F0020F01F0020F01F002030
:105CC800F81F0020F81F00200020002000200020DE
:105CD800082000200820002010200020102000208C
:105CE800182000201820002020200020202000203C
:105CF80028200020282000203020002030200020EC
:105D0800382000203820002040200020402000209B
:105D1800482000204820002050200020502000204B
:105D280058200020582000206020002060200020FB
:105D380068200020682000207020002070200020AB
:105D4800782000207820002080200020802000205B
:105D5800882000208820002090200020902000200B
:105D68009820002098200020A0200020A0200020BB
:105D7800A8200020A8200020B0200020B02000206B
:105D8800B8200020B8200020C0200020C02000201B
:105D9800C8200020C8200020D0200020D0200020CB
:105DA800D8200020D8200020E0200020E02000207B
:105DB800E8200020E8200020F0200020F02000202B
:105DC800F8200020F82000200021002000210020D9
:105DD8000821002008210020102100201021002087
:105DE8001821002018210020202100202021002037
:105DF80028210020282100203021002030210020E7
:105E08003821002038210020402100204021002096
:105E18004821002048210020502100205021002046
:105E280058210020582100206021002060210020F6
:105E38006821002068210020FFFFFFFF000002000A
:105E48001817002012010002EF020140C016870453
:105E5800800201020301000005010904A1011500E7
:105E680025017501952005091901292081021500D0
:105E780025073500463B01750495016514050109A0
:105E880039814205010901A100150026FF03750AA1
:105E9800950409300931093209358102C0150026F7
:105EA800FF03750A9502093609368102C000000011
:105EB80005010906A10175019508050719E029E7FB
:105EC8001500250181029501750881039505750165
:105ED8000508190129059102950175039103953E5D
:105EE80075081500257F05071900297F8100C00066
:105EF800050C0901A101750A950419002A9C0215CF
:105F080000269C028100050175089503190029B730
:105F1800150026B7008100C005010902A10185010D
:105F2800050919012908150025019508750181023F
:105F380005010930093109381581257F7508950350
:105F48008106050C0A38021581257F75089501819F
:105F580006C005010902A1018502050109300931C0
:105F6800150026FF7F751095028102C00100000010
:105F7800C939000000000000800000007FFE0B000F
:105F88005455150000FD1700ABAA2A000C030000A9
:105F980000000000000000000000000000000000F9
:105FA800000000015605000301010810010000006F
:105FB80000000000000000000000000000000000D9
:105FC80000000000000000000000000000000000C9
:105FD80000000000000000000000000000000000B9
:105FE80000000000000000000000000000000000A9
:105FF8000000000000000000000000000000000099
:106008000000000000000000000000000000000088
:106018000000000000000000000000000000000078
:106028000000000000000000000000000000000068
:106038000000000000000000000000000000000058
:106048000000000000000000000000000000000048
:106058000000000000000000000000000000000038
:106068000000000000000000000000000000000028
:106078000000000000000000000000000000000018
:106088000000000000000000000000000000000008
:1060980000000000000000000000000000000000F8
:1060A80000000000000000000000000000000000E8
:1060B80000000000000000000000000000000000D8
:1060C80000000000000000000000000000000000C8
:1060D80000000000000000000000000000000000B8
:1060E80000000000000000000000000000000000A8
:1060F8000000000000000000000000000000000098
:106108000000000000000000000000000000000087
:106118000000000000000000000000000000000077
:106128000000000000000000000000000000000067
:106138000000000000000000000000000000000057
:106148000000000000000000000000000000000047
:106158000000000000000000000000000000000037
:106168000000000000000000000000000000000027
:106178000000000000000000000000000000000017
:106188000000000000000000000000000000000007
:1061980000000000000000000000000000000000F7
:1061A80000000000000000000000000000000000E7
:1061B80000000000000000000000000000000000D7
:1061C80000000000000000000000000000000000C7
:1061D80000000000000000000000000000000000B7
:1061E80000000000000000000000000000000000A7
:1061F8000000000000000000000000000000000097
:106208000000000000000000000000000000000086
:106218000000000000000000000000000000000076
:106228000000000000000000000000000000000066
:106238000000000000000000000000000000000056
:106248000000000000000000000000000000000046
:106258000000000000000000000000000000000036
:106268000000000000000000000000000000000026
:106278000000000000000000000000000000000016
:106288000000000000000000000000000000000006
:1062980000000000000000000000000000000000F6
:1062A80000000000000000000000000000000000E6
:1062B80000000000000000000000000000000000D6
:1062C80000000000000000000000000000000000C6
:1062D80000000000000000000000000000000000B6
:1062E80000000000000000000000000000000000A6
:1062F8000000000000000000000000000000000096
:106308000000000000000000000000000000000085
:106318000000000000000000000000000000000075
:106328000000000000000000000000000000000065
:106338000000000000000000000000000000000055
:106348000000000000000000000000000000000045
:106358000000000000000000000000000000000035
:106368000000000000000000000000000000000025
:106378000000000000000000000000000000000015
:10638800FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF15
:10639800FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF05
:1063A800FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5
:1063B800FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5
:1063C800FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD5
:1063D800FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC5
:1063E800FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB5
:1063F800FFFFFFFFFFFFFFFF00000000000000009D
:106408000000000000000000000000000000000084
:106418000000000000000000000000000000000074
:106428000000000000000000000000000000000064
:106438000000000000000000000000000000000054
:106448000000000000000000000000000000000044
:106458000000000000000000000000000000000034
:106468000000000000000000000000000000000024
:106478000000000000000000000000000000000014
:106488000000000000000000000000000000000004
:1064980000000000000000000000000000000000F4
:1064A80000000000000000000000000000000000E4
:1064B80000000000000000000000000000000000D4
:1064C80000000000000000000000000000000000C4
:1064D80000000000000000000000000000000000B4
:1064E80000000000000000000000000000000000A4
:1064F8000000000000000000000000000000000094
:106508000000000000000000000000000000000083
:106518000000000000000000000000000000000073
:106528000000000000000000000000000000000063
:106538000000000000000000000000000000000053
:106548000000000000000000000000000000000043
:106558000000000000000000000000000000000033
:106568000000000000000000000000000000000023
:106578000000000000000000000000000000000013
:106588000000000000000000000000000000000003
:1065980000000000000000000000000000000000F3
:1065A80000000000000000000000000000000000E3
:1065B80000000000000000000000000000000000D3
:1065C80000000000000000000000000000000000C3
:1065D80000000000000000000000000000000000B3
:1065E80000000000000000000000000000000000A3
:1065F8000000000000000000000000000000000093
:106608000000000000000000000000000000000082
:106618000000000000000000000000000000000072
:106628000000000000000000000000000000000062
:106638000000000000000000000000000000000052
:106648000000000000000000000000000000000042
:106658000000000000000000000000000000000032
:106668000000000000000000000000000000000022
:106678000000000000000000000000000000000012
:106688000000000000000000000000000000000002
:1066980000000000000000000000000000000000F2
:1066A80000000000000000000000000000000000E2
:1066B80000000000000000000000000000000000D2
:1066C80000000000000000000000000000000000C2
:1066D80000000000000000000000000000000000B2
:1066E80000000000000000000000000000000000A2
:1066F8000000000000000000000000000000000092
:106708000000000000000000000000000000000081
:106718000000000000000000000000000000000071
:106728000000000000000000000000000000000061
:106738000000000000000000000000000000000051
:106748000000000000000000000000000000000041
:106758000000000000000000000000000000000031
:106768000000000000000000000000000000000021
:106778000000000000000000000000000000000011
:106788000000000000000000000000000000000001
:1067980000000000000000000000000000000000F1
:1067A80000000000000000000000000000000000E1
:1067B80000000000000000000000000000000000D1
:1067C80000000000000000000000000000000000C1
:1067D80000000000000000000000000000000000B1
:1067E80000000000000000000000000000000000A1
:1067F8000000000000000000000000000000000091
:106808000000000000000000000000000000000080
:106818000000000000000000000000000000000070
:106828000000000000000000000000000000000060
:106838000000000000000000000000000000000050
:106848000000000000000000000000000000000040
:106858000000000000000000000000000000000030
:106868000000000000000000000000000000000020
:106878000000000000000000000000000000000010
:106888000000000000000000000000000000000000
:1068980000000000000000000000000000000000F0
:1068A80000000000000000000000000000000000E0
:1068B80000000000000000000000000000000000D0
:1068C80000000000000000000000000000000000C0
:1068D80000000000000000000000000000000000B0
:1068E80000000000000000000000000000000000A0
:1068F8000000000000000000000000000000000090
:10690800000000000000000000000000000000007F
:10691800000000000000000000000000000000006F
:10692800000000000000000000000000000000005F
:10693800000000000000000000000000000000004F
:10694800000000000000000000000000000000003F
:10695800000000000000000000000000000000002F
:10696800000000000000000000000000000000001F
:10697800000000000000000000000000000000000F
:1069880000000000000000000000000000000000FF
:1069980000000000000000000000000000000000EF
:1069A80000000000000000000000000000000000DF
:1069B80000000000000000000000000000000000CF
:1069C80000000000000000000000000000000000BF
:1069D80000000000000000000000000000000000AF
:1069E800000000000000000000000000000000009F
:1069F800000000000000000000000000000000008F
:106A0800000000000000000000000000000000007E
:106A1800000000000000000000000000000000006E
:106A2800000000000000000000000000000000005E
:106A3800000000000000000000000000000000004E
:106A4800000000000000000000000000000000003E
:106A5800000000000000000000000000000000002E
:106A6800000000000000000000000000000000001E
:106A7800000000000000000000000000000000000E
:106A880000000000000000000000000000000000FE
:106A980000000000000000000000000000000000EE
:106AA80000000000000000000000000000000000DE
:106AB80000000000000000000000000000000000CE
:106AC80000000000000000000000000000000000BE
:106AD80000000000000000000000000000000000AE
:106AE800000000000000000000000000000000009E
:106AF800000000000000000000000000000000008E
:106B0800000000000000000000000000000000007D
:106B1800000000000000000000000000000000006D
:106B2800000000000000000000000000000000005D
:106B3800000000000000000000000000000000004D
:106B4800000000000000000000000000000000003D
:106B5800000000000000000000000000000000002D
:106B6800000000000000000000000000000000001D
:106B7800000000000000000000000000000000000D
:106B880000000000000000000000000000000000FD
:106B980000000000000000000000000000000000ED
:106BA80000000000000000000000000000000000DD
:106BB80000000000000000000000000000000000CD
:106BC80000000000000000000000000000000000BD
:106BD80000000000000000000000000000000000AD
:106BE800000000000000000000000000000000009D
:106BF800000000000000000000000000000000008D
:106C0800000000000000000000000000000000007C
:106C1800000000000000000000000000000000006C
:106C2800000000000000000000000000000000005C
:106C3800000000000000000000000000000000004C
:106C4800000000000000000000000000000000003C
:106C5800000000000000000000000000000000002C
:106C6800000000000000000000000000000000001C
:106C7800000000000000000000000000000000000C
:106C880000000000000000000000000000000000FC
:106C980000000000000000000000000000000000EC
:106CA80000000000000000000000000000000000DC
:106CB80000000000000000000000000000000000CC
:106CC80000000000000000000000000000000000BC
:106CD80000000000000000000000000000000000AC
:106CE800000000000000000000000000000000009C
:106CF800000000000000000000000000000000008C
:106D0800000000000000000000000000000000007B
:106D1800000000000000000000000000000000006B
:106D2800000000000000000000000000000000005B
:106D3800000000000000000000000000000000004B
:106D4800000000000000000000000000000000003B
:106D5800000000000000000000000000000000002B
:106D6800000000000000000000000000000000001B
:106D7800000000000000000000000000000000000B
:106D880000000000000000000000000000000000FB
:106D980000000000000000000000000000000000EB
:106DA80000000000000000000000000000000000DB
:106DB80000000000000000000000000000000000CB
:106DC80000000000000000000000000000000000BB
:106DD80000000000000000000000000000000000AB
:106DE800000000000000000000000000000000009B
:106DF800000000000000000000000000000000008B
:106E0800000000000000000000000000000000007A
:106E1800000000000000000000000000000000006A
:106E2800000000000000000000000000000000005A
:106E3800000000000000000000000000000000004A
:106E4800000000000000000000000000000000003A
:106E5800000000000000000000000000000000002A
:106E6800000000000000000000000000000000001A
:106E7800000000000000000000000000000000000A
:106E880000000000000000000000000000000000FA
:106E980000000000000000000000000000000000EA
:106EA80000000000000000000000000000000000DA
:106EB80000000000000000000000000000000000CA
:106EC80000000000000000000000000000000000BA
:106ED80000000000000000000000000000000000AA
:106EE800000000000000000000000000000000009A
:106EF800000000000000000000000000000000008A
:106F08000000000000000000000000000000000079
:106F18000000000000000000000000000000000069
:106F28000000000000000000000000000000000059
:106F38000000000000000000000000000000000049
:106F48000000000000000000000000000000000039
:106F58000000000000000000000000000000000029
:106F68000000000000000000000000000000000019
:106F78000000000000000000000000000000000009
:106F880000000000000000000000000000000000F9
:106F980000000000000000000000000000000000E9
:106FA80000000000000000000000000000000000D9
:106FB80000000000000000000000000000000000C9
:106FC80000000000000000000000000000000000B9
:106FD80000000000000000000000000000000000A9
:106FE8000000000000000000000000000000000099
:086FF800000000000000000091
:040000056000100087
:00000001FF

[@file: .vscode/c_cpp_properties.json]
//
// !!! WARNING !!! AUTO-GENERATED FILE!
// PLEASE DO NOT MODIFY IT AND USE "platformio.ini":
// https://docs.platformio.org/page/projectconf/section_env_build.html#build-flags
//
{
    "configurations": [
        {
            "name": "PlatformIO",
            "includePath": [
                "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/include",
                "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Entropy",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LittleFS/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SPI",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ADC",
                "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/lib/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/cores/teensy4",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/AccelStepper/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_NeoPixel",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_STMPE610",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_VS1053",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_nRF8001",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_nRF8001/utility",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/AltSoftSerial",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Artnet",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Audio",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Audio/utility",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Bounce",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Bounce2/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/CapacitiveSensor",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/CryptoAccel/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/DS1307RTC",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/DmxSimple",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/DogLcd",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/EEPROM",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/EasyTransfer",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/EasyTransferI2C",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Encoder",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Encoder/utility",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Ethernet/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FNET/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FastCRC",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FastLED/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexCAN",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexCAN_T4",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexIO_t4/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexiTimer2",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FreqCount",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FreqMeasure",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FreqMeasureMulti",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FrequencyTimer2",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ILI9341_t3",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ILI9488_t3/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/IRremote/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Keypad/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LedControl/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LedDisplay",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LiquidCrystal/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LiquidCrystalFast",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LowPower",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/MFRC522/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/MIDI/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Metro",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/MsTimer2",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/NXPMotionSense",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/NXPMotionSense/utility",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/NativeEthernet/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/OSC",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/OctoWS2811",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/OneWire",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PS2Keyboard",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PS2Keyboard/utility",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PWMServo",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Ping",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PulsePosition",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/QuadEncoder",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/RA8875",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/RadioHead",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ResponsiveAnalogRead/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SD/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SPIFlash",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ST7735_t3",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SdFat/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SerialFlash",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Servo",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ShiftPWM",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Snooze/src",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SoftPWM",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SoftwareSerial",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TFT_ILI9163C",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Talkie",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TeensyThreads",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Time",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TimeAlarms",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TimerOne",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TimerThree",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TinyGPS",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Tlc5940",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TouchScreen",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/USBHost_t36",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/USBHost_t36/utility",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/UTFT",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/VirtualWire",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/WS2812Serial",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Wire",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Wire/utility",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/XBee",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/XPT2046_Touchscreen",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/i2c_t3",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ks0108",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ssd1351",
                "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/x10",
                ""
            ],
            "browse": {
                "limitSymbolsToIncludedHeaders": true,
                "path": [
                    "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/include",
                    "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Entropy",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LittleFS/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SPI",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ADC",
                    "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/lib/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/cores/teensy4",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/AccelStepper/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_NeoPixel",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_STMPE610",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_VS1053",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_nRF8001",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Adafruit_nRF8001/utility",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/AltSoftSerial",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Artnet",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Audio",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Audio/utility",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Bounce",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Bounce2/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/CapacitiveSensor",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/CryptoAccel/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/DS1307RTC",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/DmxSimple",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/DogLcd",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/EEPROM",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/EasyTransfer",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/EasyTransferI2C",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Encoder",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Encoder/utility",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Ethernet/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FNET/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FastCRC",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FastLED/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexCAN",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexCAN_T4",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexIO_t4/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FlexiTimer2",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FreqCount",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FreqMeasure",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FreqMeasureMulti",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/FrequencyTimer2",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ILI9341_t3",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ILI9488_t3/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/IRremote/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Keypad/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LedControl/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LedDisplay",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LiquidCrystal/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LiquidCrystalFast",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/LowPower",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/MFRC522/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/MIDI/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Metro",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/MsTimer2",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/NXPMotionSense",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/NXPMotionSense/utility",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/NativeEthernet/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/OSC",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/OctoWS2811",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/OneWire",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PS2Keyboard",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PS2Keyboard/utility",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PWMServo",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Ping",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/PulsePosition",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/QuadEncoder",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/RA8875",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/RadioHead",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ResponsiveAnalogRead/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SD/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SPIFlash",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ST7735_t3",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SdFat/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SerialFlash",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Servo",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ShiftPWM",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Snooze/src",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SoftPWM",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/SoftwareSerial",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TFT_ILI9163C",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Talkie",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TeensyThreads",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Time",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TimeAlarms",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TimerOne",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TimerThree",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TinyGPS",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Tlc5940",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/TouchScreen",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/USBHost_t36",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/USBHost_t36/utility",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/UTFT",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/VirtualWire",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/WS2812Serial",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Wire",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/Wire/utility",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/XBee",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/XPT2046_Touchscreen",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/i2c_t3",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ks0108",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/ssd1351",
                    "C:/Users/User/.platformio/packages/framework-arduinoteensy/libraries/x10",
                    ""
                ]
            },
            "defines": [
                "PLATFORMIO=60111",
                "__IMXRT1062__",
                "ARDUINO_TEENSY41",
                "USB_SERIAL_HID",
                "ARDUINO=10805",
                "TEENSYDUINO=156",
                "CORE_TEENSY",
                "F_CPU=600000000",
                "LAYOUT_US_ENGLISH",
                ""
            ],
            "cppStandard": "gnu++14",
            "compilerPath": "C:/Users/User/.platformio/packages/toolchain-gccarmnoneeabi@1.50401.190816/bin/arm-none-eabi-gcc.exe",
            "compilerArgs": [
                "-mthumb",
                "-mcpu=cortex-m7",
                "-mfloat-abi=hard",
                "-mfpu=fpv5-d16",
                ""
            ]
        }
    ],
    "version": 4
}

[@file: .vscode/extensions.json]
{
    // See http://go.microsoft.com/fwlink/?LinkId=827846
    // for the documentation about the extensions.json format
    "recommendations": [
        "platformio.platformio-ide"
    ],
    "unwantedRecommendations": [
        "ms-vscode.cpptools-extension-pack"
    ]
}

[@file: .vscode/launch.json]
// AUTOMATICALLY GENERATED FILE. PLEASE DO NOT MODIFY IT MANUALLY
//
// PIO Unified Debugger
//
// Documentation: https://docs.platformio.org/page/plus/debugging.html
// Configuration: https://docs.platformio.org/page/projectconf/section_env_debug.html

{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "platformio-debug",
            "request": "launch",
            "name": "PIO Debug",
            "executable": "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/.pio/build/teensy41/firmware.elf",
            "projectEnvName": "teensy41",
            "toolchainBinDir": "C:/Users/User/.platformio/packages/toolchain-gccarmnoneeabi@1.50401.190816/bin",
            "internalConsoleOptions": "openOnSessionStart",
            "preLaunchTask": {
                "type": "PlatformIO",
                "task": "Pre-Debug"
            }
        },
        {
            "type": "platformio-debug",
            "request": "launch",
            "name": "PIO Debug (skip Pre-Debug)",
            "executable": "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/.pio/build/teensy41/firmware.elf",
            "projectEnvName": "teensy41",
            "toolchainBinDir": "C:/Users/User/.platformio/packages/toolchain-gccarmnoneeabi@1.50401.190816/bin",
            "internalConsoleOptions": "openOnSessionStart"
        },
        {
            "type": "platformio-debug",
            "request": "launch",
            "name": "PIO Debug (without uploading)",
            "executable": "c:/Users/User/Documents/PlatformIO/Projects/Teensy-4.1-Keyboard/.pio/build/teensy41/firmware.elf",
            "projectEnvName": "teensy41",
            "toolchainBinDir": "C:/Users/User/.platformio/packages/toolchain-gccarmnoneeabi@1.50401.190816/bin",
            "internalConsoleOptions": "openOnSessionStart",
            "loadMode": "manual"
        }
    ]
}

[@file: .vscode/settings.json]
{
    "files.associations": {
        "*.json": "json",
        "usb_mouse.h": "c"
    }
}
[@file: include/Enigma.h]
/**
 * @file Enigma.h
 * @author Demitrias Wilbert
 * @brief header file for Enigma Encryption algorithm
 * @version 0.1
 * @date 2021-08-25
 * 
 * @copyright Copyright (c) 2021
 * 
 */

#ifndef ENIGMA_H
#define ENIGMA_H

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef ROTORS
#define ROTORS 3
#endif

#ifndef TOTALROTOR
#define TOTALROTOR (ROTORS + 1)
#endif

#define SYMBOLS_SIZE 256U

//#ifndef RAND
#define RAND() rand()
//#endif

typedef struct
{
    uint8_t rotors[TOTALROTOR][SYMBOLS_SIZE];
    uint8_t plugboard[SYMBOLS_SIZE];
    uint16_t rotorpos[ROTORS];
    uint16_t ttb_in[SYMBOLS_SIZE];
    uint8_t ttb_out[SYMBOLS_SIZE];
    uint16_t n_rotors;
    uint16_t symbols;
} Rotor;

//unsigned char isTestCharEligible(char test, char* pArray, unsigned long arrayLen);
void configRotor(Rotor* pRotor, const char* chars_to_mix);
void resetrotor(Rotor* pRotor);
//void updaterotor();
uint8_t encryptChar(uint8_t In, Rotor* pRotor);
uint8_t* encryptString(uint8_t* str, size_t len, Rotor* pRotor);

#endif //ENIGMA_H
[@file: include/EXTString.h]
/*
  WEXTString.h - EXTString library for Wiring & Arduino
  ...mostly rewritten by Paul Stoffregen...
  Copyright (c) 2009-10 Hernando Barragan.  All right reserved.
  Copyright 2011, Paul Stoffregen, paul@pjrc.com

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#ifndef EXTString_class_h
#define EXTString_class_h
#ifdef __cplusplus

#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "avr_functions.h"

// Not needed here, but some libs assume WEXTString.h or Print.h
// gives them PROGMEM and other AVR stuff.
#include "avr/pgmspace.h"

// When compiling programs with this class, the following gcc parameters
// dramatically increase performance and memory (RAM) efficiency, typically
// with little or no increase in code size.
//     -felide-constructors
//     -std=c++0x

// Brian Cook's "no overhead" Flash EXTString type (message on Dec 14, 2010)
// modified by Mikal Hart for his FlashEXTString library
class __FlashEXTStringHelper;
#ifndef F
#define F(EXTString_literal) ((const __FlashEXTStringHelper *)(EXTString_literal))
#endif

// An inherited class for holding the result of a concatenation.  These
// result objects are assumed to be writable by subsequent concatenations.
class EXTStringSumHelper;

// The EXTString class
class EXTString
{
public:
    // constructors
    EXTString(const char *cstr = (const char *)NULL);
    EXTString(const __FlashEXTStringHelper *pgmstr);
    EXTString(const EXTString &str);
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    EXTString(EXTString &&rval);
    EXTString(EXTStringSumHelper &&rval);
    #endif
    EXTString(char c);
    EXTString(unsigned char c);
    EXTString(int, unsigned char base=10);
    EXTString(unsigned int, unsigned char base=10);
    EXTString(long, unsigned char base=10);
    EXTString(unsigned long, unsigned char base=10);
        EXTString(float num, unsigned char digits=2);
    EXTString(double num, unsigned char digits=2) : EXTString((float)num, digits) {}
    ~EXTString(void);

    // memory management
    unsigned char reserve(unsigned int size);
    inline unsigned int length(void) const {return len;}

    // copy and move
    EXTString & copy(const char *cstr, unsigned int length);
    EXTString & copy(const __FlashEXTStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    void move(EXTString &rhs);
    EXTString & operator = (const EXTString &rhs);
    EXTString & operator = (const char *cstr);
    EXTString & operator = (const __FlashEXTStringHelper *pgmstr);
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    EXTString & operator = (EXTString &&rval);
    EXTString & operator = (EXTStringSumHelper &&rval);
    #endif
    EXTString & operator = (char c);

    // append
    EXTString & append(const EXTString &str);
    EXTString & append(const char *cstr);
    EXTString & append(const __FlashEXTStringHelper *s)    {return append((const char *)s, strlen((const char *)s)); }
    EXTString & append(char c);
    EXTString & append(unsigned char c)        {return append((int)c);}
    EXTString & append(int num);
    EXTString & append(unsigned int num);
    EXTString & append(long num);
    EXTString & append(unsigned long num);
    EXTString & append(float num);
    EXTString & append(double num)            {return append((float)num);}
    EXTString & operator += (const EXTString &rhs)    {return append(rhs);}
    EXTString & operator += (const char *cstr)        {return append(cstr);}
    EXTString & operator += (const __FlashEXTStringHelper *pgmstr) {return append(pgmstr);}
    EXTString & operator += (char c)            {return append(c);}
    EXTString & operator += (unsigned char c)        {return append((int)c);}
    EXTString & operator += (int num)            {return append(num);}
    EXTString & operator += (unsigned int num)        {return append(num);}
    EXTString & operator += (long num)            {return append(num);}
    EXTString & operator += (unsigned long num)    {return append(num);}
    EXTString & operator += (float num)        {return append(num);}
    EXTString & operator += (double num)        {return append(num);}

    // concatenate
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, const EXTString &rhs);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, const char *cstr);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, const __FlashEXTStringHelper *pgmstr);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, char c);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, unsigned char c);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, int num);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, unsigned int num);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, long num);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, unsigned long num);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, float num);
    friend EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, double num);
    EXTString & concat(const EXTString &str)        {return append(str);}
    EXTString & concat(const char *cstr)        {return append(cstr);}
    EXTString & concat(const __FlashEXTStringHelper *pgmstr) {return append(pgmstr);}
    EXTString & concat(char c)                {return append(c);}
    EXTString & concat(unsigned char c)        {return append((int)c);}
    EXTString & concat(int num)            {return append(num);}
    EXTString & concat(unsigned int num)        {return append(num);}
    EXTString & concat(long num)            {return append(num);}
    EXTString & concat(unsigned long num)        {return append(num);}
    EXTString & concat(float num)            {return append(num);}
    EXTString & concat(double num)            {return append(num);}

    // comparison
    int compareTo(const EXTString &s) const;
    unsigned char equals(const EXTString &s) const;
    unsigned char equals(const char *cstr) const;
    //unsigned char equals(const __FlashEXTStringHelper *pgmstr) const;
    unsigned char operator == (const EXTString &rhs) const {return equals(rhs);}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
    unsigned char operator != (const EXTString &rhs) const {return !equals(rhs);}
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    unsigned char operator <  (const EXTString &rhs) const;
    unsigned char operator >  (const EXTString &rhs) const;
    unsigned char operator <= (const EXTString &rhs) const;
    unsigned char operator >= (const EXTString &rhs) const;
    unsigned char equalsIgnoreCase(const EXTString &s) const;
    unsigned char startsWith( const EXTString &prefix) const;
    unsigned char startsWith(const EXTString &prefix, unsigned int offset) const;
    unsigned char endsWith(const EXTString &suffix) const;

    // character acccess
    char charAt(unsigned int index) const;
    void setCharAt(unsigned int index, char c);
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const {
        if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
        return buffer;
    }
    char * begin() {
        if (!buffer) reserve(20);
        return buffer;
    }
    char * end() { return begin() + length(); }
    const char * begin() const { return c_str(); }
    const char * end() const { return c_str() + length(); }

    // search
    int indexOf( char ch ) const;
    int indexOf( char ch, unsigned int fromIndex ) const;
    int indexOf( const EXTString &str ) const;
    int indexOf( const EXTString &str, unsigned int fromIndex ) const;
    int lastIndexOf( char ch ) const;
    int lastIndexOf( char ch, unsigned int fromIndex ) const;
    int lastIndexOf( const EXTString &str ) const;
    int lastIndexOf( const EXTString &str, unsigned int fromIndex ) const;
    EXTString substring( unsigned int beginIndex ) const;
    EXTString substring( unsigned int beginIndex, unsigned int endIndex ) const;

    // modification
    EXTString & replace(char find, char replace);
    EXTString & replace(const EXTString& find, const EXTString& replace);
    EXTString & remove(unsigned int index);
    EXTString & remove(unsigned int index, unsigned int count);
    EXTString & toLowerCase(void);
    EXTString & toUpperCase(void);
    EXTString & trim(void);

    // parsing/conversion
    long toInt(void) const;
    float toFloat(void) const;

protected:
    char *buffer;            // the actual char array
    unsigned int capacity;  // the array length minus one (for the '\0')
    unsigned int len;       // the EXTString length (not counting the '\0')
    unsigned char flags;    // unused, for future features
protected:
    void init(void);
    unsigned char changeBuffer(unsigned int maxStrLen);
    EXTString & append(const char *cstr, unsigned int length);
private:
    // allow for "if (s)" without the complications of an operator bool().
    // for more information http://www.artima.com/cppsource/safebool.html
    typedef void (EXTString::*EXTStringIfHelperType)() const;
    void EXTStringIfHelper() const {}
    static const char zerotermination;
public:
    operator EXTStringIfHelperType() const { return buffer ? &EXTString::EXTStringIfHelper : 0; }
};

class EXTStringSumHelper : public EXTString
{
public:
    EXTStringSumHelper(const EXTString &s) : EXTString(s) {}
    EXTStringSumHelper(const char *p) : EXTString(p) {}
    EXTStringSumHelper(const __FlashEXTStringHelper *pgmstr) : EXTString(pgmstr) {}
    EXTStringSumHelper(char c) : EXTString(c) {}
    EXTStringSumHelper(unsigned char c) : EXTString(c) {}
    EXTStringSumHelper(int num) : EXTString(num, 10) {}
    EXTStringSumHelper(unsigned int num) : EXTString(num, 10) {}
    EXTStringSumHelper(long num) : EXTString(num, 10) {}
    EXTStringSumHelper(unsigned long num) : EXTString(num, 10) {}
};

#endif  // __cplusplus
#endif  // EXTString_class_h

[@file: include/filesystem.h]
#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#include <Arduino.h>

#include <LittleFS.h>
#include "EXTString.h"

extern LittleFS_Program myfs;
extern uint32_t diskSize;

#define PROG_FLASH_SIZE                                                        \
    0x780000UL // Specify size to use of onboard Teensy Program Flash chip
                    // This creates a LittleFS drive in Teensy PCB FLash.

int loadFileToStr(const char* filePath, EXTString& str, LittleFS_Program& fs = myfs);
int saveStrToFile(const char* filePath, EXTString& str, LittleFS_Program& fs = myfs);
int disk_init(uint32_t size = PROG_FLASH_SIZE, LittleFS_Program& fs = myfs);


#endif // FILESYSTEM_H
[@file: include/HIDKeyboard.h]
/*
  Keyboard.h

  Copyright (c) 2015, Arduino LLC
  Original code (pre-library): Copyright (c) 2011, Peter Barrett

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#pragma once
#include <Arduino.h>

typedef union {
    struct {
            uint8_t numlock:1;
            uint8_t capslock:1;
            uint8_t scrolllock:1;
            uint8_t compose:1;
            uint8_t kana:1;
            uint8_t reserved:3;
    };
    uint8_t leds;
} arduino_usb_hid_keyboard_event_data_t;

// Power Control
#define CONSUMER_CONTROL_POWER                             0x0030
#define CONSUMER_CONTROL_RESET                             0x0031
#define CONSUMER_CONTROL_SLEEP                             0x0032

// Screen Brightness
#define CONSUMER_CONTROL_BRIGHTNESS_INCREMENT              0x006F
#define CONSUMER_CONTROL_BRIGHTNESS_DECREMENT              0x0070

// These HID usages operate only on mobile systems (battery powered) and
// require Windows 8 (build 8302 or greater).
#define CONSUMER_CONTROL_WIRELESS_RADIO_CONTROLS           0x000C
#define CONSUMER_CONTROL_WIRELESS_RADIO_BUTTONS            0x00C6
#define CONSUMER_CONTROL_WIRELESS_RADIO_LED                0x00C7
#define CONSUMER_CONTROL_WIRELESS_RADIO_SLIDER_SWITCH      0x00C8

// Media Control
#define CONSUMER_CONTROL_PLAY_PAUSE                        0x00CD
#define CONSUMER_CONTROL_SCAN_NEXT                         0x00B5
#define CONSUMER_CONTROL_SCAN_PREVIOUS                     0x00B6
#define CONSUMER_CONTROL_STOP                              0x00B7
#define CONSUMER_CONTROL_VOLUME                            0x00E0
#define CONSUMER_CONTROL_MUTE                              0x00E2
#define CONSUMER_CONTROL_BASS                              0x00E3
#define CONSUMER_CONTROL_TREBLE                            0x00E4
#define CONSUMER_CONTROL_BASS_BOOST                        0x00E5
#define CONSUMER_CONTROL_VOLUME_INCREMENT                  0x00E9
#define CONSUMER_CONTROL_VOLUME_DECREMENT                  0x00EA
#define CONSUMER_CONTROL_BASS_INCREMENT                    0x0152
#define CONSUMER_CONTROL_BASS_DECREMENT                    0x0153
#define CONSUMER_CONTROL_TREBLE_INCREMENT                  0x0154
#define CONSUMER_CONTROL_TREBLE_DECREMENT                  0x0155

// Application Launcher
#define CONSUMER_CONTROL_CONFIGURATION                     0x0183
#define CONSUMER_CONTROL_EMAIL_READER                      0x018A
#define CONSUMER_CONTROL_CALCULATOR                        0x0192
#define CONSUMER_CONTROL_LOCAL_BROWSER                     0x0194

// Browser/Explorer Specific
#define CONSUMER_CONTROL_SEARCH                            0x0221
#define CONSUMER_CONTROL_HOME                              0x0223
#define CONSUMER_CONTROL_BACK                              0x0224
#define CONSUMER_CONTROL_FORWARD                           0x0225
#define CONSUMER_CONTROL_BR_STOP                           0x0226
#define CONSUMER_CONTROL_REFRESH                           0x0227
#define CONSUMER_CONTROL_BOOKMARKS                         0x022A

// Mouse Horizontal scroll
#define CONSUMER_CONTROL_PAN                               0x0238

#define CC_BIT_0 CONSUMER_CONTROL_SCAN_NEXT
#define CC_BIT_1 CONSUMER_CONTROL_SCAN_PREVIOUS
#define CC_BIT_2 CONSUMER_CONTROL_STOP
#define CC_BIT_3 CONSUMER_CONTROL_PLAY_PAUSE
#define CC_BIT_4 CONSUMER_CONTROL_MUTE
#define CC_BIT_5 CONSUMER_CONTROL_VOLUME_INCREMENT
#define CC_BIT_6 CONSUMER_CONTROL_VOLUME_DECREMENT
#define CC_BIT_7 CONSUMER_CONTROL_HOME
#define CC_BIT_8 CONSUMER_CONTROL_LOCAL_BROWSER
#define CC_BIT_9 CONSUMER_CONTROL_CALCULATOR
#define CC_BIT_A CONSUMER_CONTROL_BRIGHTNESS_DECREMENT
#define CC_BIT_B CONSUMER_CONTROL_BRIGHTNESS_INCREMENT
#define CC_BIT_C CONSUMER_CONTROL_BR_STOP
#define CC_BIT_D CONSUMER_CONTROL_BACK
#define CC_BIT_E CONSUMER_CONTROL_CONFIGURATION
#define CC_BIT_F CONSUMER_CONTROL_EMAIL_READER

#define M_KEY_TYPE_MASK        ((uint32_t)0xffff0000UL)
#define M_KEY_TARGET_MASK      ((uint32_t)0xC0000000UL)

#define M_KEY_TARGET_KB       ((uint32_t)0x40000000UL)
#define M_KEY_TARGET_CC       ((uint32_t)0x80000000UL)

#define M_KEY_TYPE_MODIF      (M_KEY_TARGET_KB | (uint32_t)0x01000000UL)
#define M_KEY_TYPE_NONPRINT   (M_KEY_TARGET_KB | (uint32_t)0x02000000UL)
#define M_KEY_TYPE_KEYPAD     (M_KEY_TARGET_KB | (uint32_t)0x04000000UL)
#define SHIFT               (M_KEY_TARGET_KB | (uint32_t)0x08000000UL)

#define M_KEY_LEFT_CTRL       (M_KEY_TYPE_MODIF | (uint32_t)0x01UL)
#define M_KEY_LEFT_SHIFT      (M_KEY_TYPE_MODIF | (uint32_t)0x02UL)
#define M_KEY_LEFT_ALT        (M_KEY_TYPE_MODIF | (uint32_t)0x04UL)
#define M_KEY_LEFT_GUI        (M_KEY_TYPE_MODIF | (uint32_t)0x08UL)
#define M_KEY_RIGHT_CTRL      (M_KEY_TYPE_MODIF | (uint32_t)0x10UL)
#define M_KEY_RIGHT_SHIFT     (M_KEY_TYPE_MODIF | (uint32_t)0x20UL)
#define M_KEY_RIGHT_ALT       (M_KEY_TYPE_MODIF | (uint32_t)0x40UL)
#define M_KEY_RIGHT_GUI       (M_KEY_TYPE_MODIF | (uint32_t)0x80UL)

#define M_KEY_UP_ARROW        (M_KEY_TYPE_NONPRINT | (uint32_t)0x0052UL)
#define M_KEY_DOWN_ARROW      (M_KEY_TYPE_NONPRINT | (uint32_t)0x0051UL)
#define M_KEY_LEFT_ARROW      (M_KEY_TYPE_NONPRINT | (uint32_t)0x0050UL)
#define M_KEY_RIGHT_ARROW     (M_KEY_TYPE_NONPRINT | (uint32_t)0x004fUL)
#define M_KEY_BACKSPACE       (M_KEY_TYPE_NONPRINT | (uint32_t)0x002aUL)
#define M_KEY_TAB             (M_KEY_TYPE_NONPRINT | (uint32_t)0x002bUL)
#define M_KEY_RETURN          (M_KEY_TYPE_NONPRINT | (uint32_t)0x0028UL)
#define M_KEY_ESC             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0029UL)
#define M_KEY_INSERT          (M_KEY_TYPE_NONPRINT | (uint32_t)0x0049UL)
#define M_KEY_PRTSC           (M_KEY_TYPE_NONPRINT | (uint32_t)0x0046UL)
#define M_KEY_DELETE          (M_KEY_TYPE_NONPRINT | (uint32_t)0x004cUL)
#define M_KEY_PAGE_UP         (M_KEY_TYPE_NONPRINT | (uint32_t)0x004bUL)
#define M_KEY_PAGE_DOWN       (M_KEY_TYPE_NONPRINT | (uint32_t)0x004eUL)
#define M_KEY_HOME            (M_KEY_TYPE_NONPRINT | (uint32_t)0x004aUL)
#define M_KEY_END             (M_KEY_TYPE_NONPRINT | (uint32_t)0x004dUL)
#define M_KEY_CAPS_LOCK       (M_KEY_TYPE_NONPRINT | (uint32_t)0x0039UL)
#define M_KEY_NUM_LOCK        (M_KEY_TYPE_NONPRINT | (uint32_t)0x0053UL)

#define M_KEY_F1              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003aUL)
#define M_KEY_F2              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003bUL)
#define M_KEY_F3              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003cUL)
#define M_KEY_F4              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003dUL)
#define M_KEY_F5              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003eUL)
#define M_KEY_F6              (M_KEY_TYPE_NONPRINT | (uint32_t)0x003fUL)
#define M_KEY_F7              (M_KEY_TYPE_NONPRINT | (uint32_t)0x0040UL)
#define M_KEY_F8              (M_KEY_TYPE_NONPRINT | (uint32_t)0x0041UL)
#define M_KEY_F9              (M_KEY_TYPE_NONPRINT | (uint32_t)0x0042UL)
#define M_KEY_F10             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0043UL)
#define M_KEY_F11             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0044UL)
#define M_KEY_F12             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0045UL)
#define M_KEY_PRTSC           (M_KEY_TYPE_NONPRINT | (uint32_t)0x0046UL)
#define M_KEY_F13             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0068UL)
#define M_KEY_F14             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0069UL)
#define M_KEY_F15             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006aUL)
#define M_KEY_F16             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006bUL)
#define M_KEY_F17             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006cUL)
#define M_KEY_F18             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006dUL)
#define M_KEY_F19             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006eUL)
#define M_KEY_F20             (M_KEY_TYPE_NONPRINT | (uint32_t)0x006fUL)
#define M_KEY_F21             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0070UL)
#define M_KEY_F22             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0071UL)
#define M_KEY_F23             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0072UL)
#define M_KEY_F24             (M_KEY_TYPE_NONPRINT | (uint32_t)0x0073UL)

#define M_KEY_NUM_0           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0062UL)
#define M_KEY_NUM_1           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0059UL)
#define M_KEY_NUM_2           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005aUL)
#define M_KEY_NUM_3           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005bUL)
#define M_KEY_NUM_4           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005cUL)
#define M_KEY_NUM_5           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005dUL)
#define M_KEY_NUM_6           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005eUL)
#define M_KEY_NUM_7           (M_KEY_TYPE_KEYPAD | (uint32_t)0x005fUL)
#define M_KEY_NUM_8           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0060UL)
#define M_KEY_NUM_9           (M_KEY_TYPE_KEYPAD | (uint32_t)0x0061UL)
#define M_KEY_NUM_SLASH       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0054UL)
#define M_KEY_NUM_ASTERISK    (M_KEY_TYPE_KEYPAD | (uint32_t)0x0055UL)
#define M_KEY_NUM_MINUS       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0056UL)
#define M_KEY_NUM_PLUS        (M_KEY_TYPE_KEYPAD | (uint32_t)0x0057UL)
#define M_KEY_NUM_ENTER       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0058UL)
#define M_KEY_NUM_PERIOD      (M_KEY_TYPE_KEYPAD | (uint32_t)0x0063UL)
#define M_KEY_NUM_EQUAL       (M_KEY_TYPE_KEYPAD | (uint32_t)0x0067UL)


typedef uint32_t MediaKeyReport;

#define M_KEY_MEDIA_NEXT              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x0U))
#define M_KEY_MEDIA_PREV              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x1U))
#define M_KEY_MEDIA_STOP              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x2U))
#define M_KEY_MEDIA_PAUSE             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x3U))
#define M_KEY_MEDIA_MUTE              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x4U))
#define M_KEY_MEDIA_VOLUP             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x5U))
#define M_KEY_MEDIA_VOLDN             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x6U))
#define M_KEY_MEDIA_WWW_HOME          (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x7U))

#define M_KEY_FILE_EXPLORER           (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x8U))
#define M_KEY_MEDIA_CALC              (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0x9U))
#define M_KEY_MEDIA_BRIGHTNESS_D      (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xAU))
#define M_KEY_MEDIA_BRIGHTNESS_I      (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xBU))
#define M_KEY_MEDIA_WWW_STOP          (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xCU))
#define M_KEY_MEDIA_WWW_BACK          (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xDU))
#define M_KEY_CONSUMER_CTL            (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xEU))
#define M_KEY_MEDIA_EMAIL             (M_KEY_TARGET_CC | (MediaKeyReport) (1UL << 0xFU))

#define STR_LEFT_CTRL "\x80"
#define STR_LEFT_SHIFT "\x81"
#define STR_LEFT_ALT "\x82"
#define STR_LEFT_GUI "\x83"
#define STR_RIGHT_CTRL "\x84"
#define STR_RIGHT_SHIFT "\x85"
#define STR_RIGHT_ALT "\x86"
#define STR_RIGHT_GUI "\x87"
#define STR_UP_ARROW "\x88"
#define STR_DOWN_ARROW "\x89"
#define STR_LEFT_ARROW "\x8a"
#define STR_RIGHT_ARROW "\x8b"
#define STR_BACKSPACE "\x8c"
#define STR_TAB "\x8d"
#define STR_RETURN "\x8e"
#define STR_ESC "\x8f"
#define STR_INSERT "\x90"
#define STR_PRTSC "\x91"
#define STR_DELETE "\x92"
#define STR_PAGE_UP "\x93"
#define STR_PAGE_DOWN "\x94"
#define STR_HOME "\x95"
#define STR_END "\x96"
#define STR_CAPS_LOCK "\x97"
#define STR_NUM_LOCK "\x98"
#define STR_F1 "\x99"
#define STR_F2 "\x9a"
#define STR_F3 "\x9b"
#define STR_F4 "\x9c"
#define STR_F5 "\x9d"
#define STR_F6 "\x9e"
#define STR_F7 "\x9f"
#define STR_F8 "\xa0"
#define STR_F9 "\xa1"
#define STR_F10 "\xa2"
#define STR_F11 "\xa3"
#define STR_F12 "\xa4"
#define STR_F13 "\xa5"
#define STR_F14 "\xa6"
#define STR_F15 "\xa7"
#define STR_F16 "\xa8"
#define STR_F17 "\xa9"
#define STR_F18 "\xaa"
#define STR_F19 "\xab"
#define STR_F20 "\xac"
#define STR_F21 "\xad"
#define STR_F22 "\xae"
#define STR_F23 "\xaf"
#define STR_F24 "\xb0"
#define STR_NUM_0 "\xb1"
#define STR_NUM_1 "\xb2"
#define STR_NUM_2 "\xb3"
#define STR_NUM_3 "\xb4"
#define STR_NUM_4 "\xb5"
#define STR_NUM_5 "\xb6"
#define STR_NUM_6 "\xb7"
#define STR_NUM_7 "\xb8"
#define STR_NUM_8 "\xb9"
#define STR_NUM_9 "\xba"
#define STR_NUM_SLASH "\xbb"
#define STR_NUM_ASTERISK "\xbc"
#define STR_NUM_MINUS "\xbd"
#define STR_NUM_PLUS "\xbe"
#define STR_NUM_ENTER "\xbf"
#define STR_NUM_PERIOD "\xc0"
#define STR_NUM_EQUAL "\xc1"
#define STR_MEDIA_NEXT "\xc2"
#define STR_MEDIA_PREV "\xc3"
#define STR_MEDIA_STOP "\xc4"
#define STR_MEDIA_PAUSE "\xc5"
#define STR_MEDIA_MUTE "\xc6"
#define STR_MEDIA_VOLUP "\xc7"
#define STR_MEDIA_VOLDN "\xc8"
#define STR_MEDIA_WWW_HOME "\xc9"
#define STR_FILE_EXPLORER "\xca"
#define STR_MEDIA_CALC "\xcb"
#define STR_MEDIA_BRIGHTNESS_D "\xcc"
#define STR_MEDIA_BRIGHTNESS_I "\xcd"
#define STR_MEDIA_WWW_STOP "\xce"
#define STR_MEDIA_WWW_BACK "\xcf"
#define STR_CONSUMER_CTL "\xd0"
#define STR_MEDIA_EMAIL "\xd1"

#define LED_NUMLOCK     0x01
#define LED_CAPSLOCK    0x02
#define LED_SCROLLLOCK  0x04
#define LED_COMPOSE     0x08
#define LED_KANA        0x10

//  Low level key report: up to 6 keys and shift, ctrl etc at once
typedef struct
{
  uint8_t modifiers;
  uint8_t reserved;
  uint8_t keys[62];
} KeyReport;

class Reports {
protected:
    KeyReport _keyReport;
    uint16_t _cc_report;
public:
    Reports() : _cc_report(0) {
        memset(&_keyReport, 0, sizeof(_keyReport));
    }
    const KeyReport& getKeyReport() const {return _keyReport;}
    const uint16_t& getCCReport() const {return _cc_report;}
    uint32_t pressRaw(uint32_t k);
    uint32_t releaseRaw(uint32_t k);
    uint32_t press(uint8_t data);
    uint32_t release(uint8_t data);
    uint32_t pressMulti(const uint8_t* data);
    uint32_t releaseMulti(const uint8_t* data);
    void sendKeyReport();
    void releaseAll();
};



[@file: include/kbcontrol.h]
#ifndef KBCONTROL_H
#define KBCONTROL_H

#include <Arduino.h>
#include "EXTString.h"
#include "filesystem.h"
#include "psramctrl.h"
#include <Entropy.h>
extern "C" {
#include "Enigma.h"
}

extern EXTString rx_str;
extern EXTString tx_str;
extern bool tx_lock;
extern uint32_t kb_delay;
extern uint32_t type_pos;
extern Rotor rotor[];
extern uint32_t n_rotor;

void process_char(Stream& st, char c);
void process_char_loop(Stream& st);
void memory_test(Stream& st);

#endif
[@file: include/psramctrl.h]
#ifndef PSRAMCTRL_H
#define PSRAMCTRL_H

#include <Arduino.h>
#include "static_malloc.h"
#include <vector>
#include <algorithm>

typedef struct {
    float frq;
    uint32_t mask;
} clock_info;

// EXTMEM POOL is 7.5 MB
#define EXTMEM_SIZE 0x780000UL
extern std::vector<clock_info> ram_clock_sel_psc;

#define CBCMR_BIT_MASK ((7UL << 29U) | (3UL << 8U)) 

void print_ram_speeds(Stream& st);

float clock_source(int i);

void psram_clock_speed_set(uint16_t index);

float psram_clock_speed_get();

int psram_init();

#endif // PSRAMCTRL_H
[@file: include/README]

This directory is intended for project header files.

A header file is a file containing C declarations and macro definitions
to be shared between several project source files. You request the use of a
header file in your project source file (C, C++, etc) located in `src` folder
by including it, with the C preprocessing directive `#include'.

```src/main.c

#include "header.h"

int main (void)
{
 ...
}
```

Including a header file produces the same results as copying the header file
into each source file that needs it. Such copying would be time-consuming
and error-prone. With a header file, the related declarations appear
in only one place. If they need to be changed, they can be changed in one
place, and programs that include the header file will automatically use the
new version when next recompiled. The header file eliminates the labor of
finding and changing all the copies as well as the risk that a failure to
find one copy will result in inconsistencies within a program.

In C, the usual convention is to give header files names that end with `.h'.
It is most portable to use only letters, digits, dashes, and underscores in
header file names, and at most one dot.

Read more about using header files in official GCC documentation:

* Include Syntax
* Include Operation
* Once-Only Headers
* Computed Includes

https://gcc.gnu.org/onlinedocs/cpp/Header-Files.html

[@file: include/text.h]
#ifndef TEXT_H
#define TEXT_H

#include <stdint.h>

extern unsigned char txt[];
extern unsigned long long size_txt;

#endif // TEXT_H
[@file: lib/README]

[@file: lib/src/static_malloc.h]
#pragma once

extern "C" {
#include "smalloc/smalloc.h"
}


[@file: lib/src/smalloc/COPYRIGHT]
Copyright © 2017 Andrey Rys.
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

[@file: lib/src/smalloc/README]
https://github.com/luni64/static_malloc.git
[@file: lib/src/smalloc/smalloc.h]
/*
 * SMalloc -- a *static* memory allocator.
 *
 * See README for a complete description.
 *
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 * Written during Aug2017.
 */

#ifndef _SMALLOC_H
#define _SMALLOC_H

#include <stddef.h>
#include <stdint.h>

struct smalloc_pool;

typedef size_t (*smalloc_oom_handler)(struct smalloc_pool *, size_t);

/* describes static pool, if you're going to use multiple pools at same time */
struct smalloc_pool {
    void *pool; /* pointer to your pool */
    size_t pool_size; /* it's size. Must be aligned with sm_align_pool. */
    int do_zero; /* zero pool before use and all the new allocations from it. */
    smalloc_oom_handler oomfn; /* this will be called, if non-NULL, on OOM condition in pool */
};

/* a default one which is initialised with sm_set_default_pool. */
extern struct smalloc_pool smalloc_curr_pool;

/* undefined behavior handler is called on typical malloc UB situations */
typedef void (*smalloc_ub_handler)(struct smalloc_pool *, const void *);

void sm_set_ub_handler(smalloc_ub_handler);

int sm_align_pool(struct smalloc_pool *);
int sm_set_pool(struct smalloc_pool *, void *, size_t, int, smalloc_oom_handler);
int sm_set_default_pool(void *, size_t, int, smalloc_oom_handler);
int sm_release_pool(struct smalloc_pool *);
int sm_release_default_pool(void);

/* Use these with multiple pools which you control */

void *sm_malloc_pool(struct smalloc_pool *, size_t);
void *sm_zalloc_pool(struct smalloc_pool *, size_t);
void sm_free_pool(struct smalloc_pool *, void *);

void *sm_realloc_pool(struct smalloc_pool *, void *, size_t);
void *sm_realloc_move_pool(struct smalloc_pool *, void *, size_t);
void *sm_calloc_pool(struct smalloc_pool *, size_t, size_t);

int sm_alloc_valid_pool(struct smalloc_pool *spool, const void *p);

size_t sm_szalloc_pool(struct smalloc_pool *, const void *);
int sm_malloc_stats_pool(struct smalloc_pool *, size_t *, size_t *, size_t *, int *);

/* Use these when you use just default smalloc_curr_pool pool */

void *sm_malloc(size_t);
void *sm_zalloc(size_t); /* guarantee zero memory allocation */
void sm_free(void *);

void *sm_realloc(void *, size_t);
void *sm_realloc_move(void *, size_t);
void *sm_calloc(size_t, size_t); /* calls zalloc internally */

int sm_alloc_valid(const void *p); /* verify pointer without intentional crash */

size_t sm_szalloc(const void *); /* get size of allocation */
/*
 * get stats: total used, user used, total free, nr. of allocated blocks.
 * any of pointers maybe set to NULL, but at least one must be non NULL.
 */
int sm_malloc_stats(size_t *, size_t *, size_t *, int *);

#endif

[@file: lib/src/smalloc/smalloc_i.h]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#ifndef _SMALLOC_I_H
#define _SMALLOC_I_H

#include "smalloc.h"
#include <string.h>
#include <limits.h>
#include <errno.h>

struct smalloc_hdr {
    size_t rsz; /* real allocated size with overhead (if any) */
    size_t usz; /* exact user size as reported by s_szalloc */
    uintptr_t tag; /* sum of all the above, hashed value */
};

#define HEADER_SZ (sizeof(struct smalloc_hdr))
#define MIN_POOL_SZ (HEADER_SZ*20)

#define VOID_PTR(p) ((void *)p)
#define CHAR_PTR(p) ((char *)p)
#define PTR_UINT(p) ((uintptr_t)VOID_PTR(p))
#define HEADER_PTR(p) ((struct smalloc_hdr *)p)
#define USER_TO_HEADER(p) (HEADER_PTR((CHAR_PTR(p)-HEADER_SZ)))
#define HEADER_TO_USER(p) (VOID_PTR((CHAR_PTR(p)+HEADER_SZ)))

extern smalloc_ub_handler smalloc_UB;

uintptr_t smalloc_uinthash(uintptr_t x);
uintptr_t smalloc_mktag(struct smalloc_hdr *shdr);
int smalloc_verify_pool(struct smalloc_pool *spool);
int smalloc_is_alloc(struct smalloc_pool *spool, struct smalloc_hdr *shdr);

void *sm_realloc_pool_i(struct smalloc_pool *spool, void *p, size_t n, int nomove);

#endif

[@file: lib/src/smalloc/sm_alloc_valid.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

int sm_alloc_valid_pool(struct smalloc_pool *spool, const void *p)
{
    struct smalloc_hdr *shdr;

    if (!smalloc_verify_pool(spool)) {
        errno = EINVAL;
        return 0;
    }

    if (!p) return 0;

    shdr = USER_TO_HEADER(p);
    if (smalloc_is_alloc(spool, shdr)) return 1;
    return 0;
}

int sm_alloc_valid(const void *p)
{
    return sm_alloc_valid_pool(&smalloc_curr_pool, p);
}

[@file: lib/src/smalloc/sm_calloc.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

void *sm_calloc_pool(struct smalloc_pool *spool, size_t x, size_t y)
{
    return sm_zalloc_pool(spool, x * y);
}

void *sm_calloc(size_t x, size_t y)
{
    return sm_calloc_pool(&smalloc_curr_pool, x, y);
}

[@file: lib/src/smalloc/sm_free.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

void sm_free_pool(struct smalloc_pool *spool, void *p)
{
    struct smalloc_hdr *shdr;
    char *s;

    if (!smalloc_verify_pool(spool)) {
        errno = EINVAL;
        return;
    }

    if (!p) return;

    shdr = USER_TO_HEADER(p);
    if (smalloc_is_alloc(spool, shdr)) {
        if (spool->do_zero) memset(p, 0, shdr->rsz);
        s = CHAR_PTR(p);
        s += shdr->usz;
        memset(s, 0, HEADER_SZ);
        if (spool->do_zero) memset(s+HEADER_SZ, 0, shdr->rsz - shdr->usz);
        memset(shdr, 0, HEADER_SZ);
        return;
    }

    smalloc_UB(spool, p);
    return;
}

void sm_free(void *p)
{
    sm_free_pool(&smalloc_curr_pool, p);
}

[@file: lib/src/smalloc/sm_hash.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

/* An adopted Jenkins one-at-a-time hash */
#define UIHOP(x, s) do {        \
        hash += (x >> s) & 0xff;\
        hash += hash << 10;    \
        hash ^= hash >> 6;    \
    } while (0)
uintptr_t smalloc_uinthash(uintptr_t x)
{
    uintptr_t hash = 0;

    UIHOP(x, 0);
    UIHOP(x, 8);
    UIHOP(x, 16);
    UIHOP(x, 24);

    hash += hash << 3;
    hash ^= hash >> 11;
    hash += hash << 15;

    return hash;
}
#undef UIHOP

uintptr_t smalloc_mktag(struct smalloc_hdr *shdr)
{
    uintptr_t r = smalloc_uinthash(PTR_UINT(shdr));
    r += shdr->rsz;
    r = smalloc_uinthash(r);
    r += shdr->usz;
    r = smalloc_uinthash(r);
    return r;
}

[@file: lib/src/smalloc/sm_malloc.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

void *sm_malloc_pool(struct smalloc_pool *spool, size_t n)
{
    struct smalloc_hdr *basehdr, *shdr, *dhdr;
    char *s;
    int found;
    size_t x;

again:    if (!smalloc_verify_pool(spool)) {
        errno = EINVAL;
        return NULL;
    }

    if (n == 0) n++; /* return a block successfully */
    if (n > SIZE_MAX
    || n > (spool->pool_size - HEADER_SZ)) goto oom;

    shdr = basehdr = spool->pool;
    while (CHAR_PTR(shdr)-CHAR_PTR(basehdr) < spool->pool_size) {
        /*
         * Already allocated block.
         * Skip it by jumping over it.
         */
        if (smalloc_is_alloc(spool, shdr)) {
            s = CHAR_PTR(HEADER_TO_USER(shdr));
            s += shdr->rsz + HEADER_SZ;
            shdr = HEADER_PTR(s);
            continue;
        }
        /*
         * Free blocks ahead!
         * Do a second search over them to find out if they're
         * really large enough to fit the new allocation.
         */
        else {
            dhdr = shdr; found = 0;
            while (CHAR_PTR(dhdr)-CHAR_PTR(basehdr) < spool->pool_size) {
                /* pre calculate free block size */
                x = CHAR_PTR(dhdr)-CHAR_PTR(shdr);
                /*
                 * ugh, found next allocated block.
                 * skip this candidate then.
                 */
                if (smalloc_is_alloc(spool, dhdr))
                    goto allocblock;
                /*
                 * did not see allocated block yet,
                 * but this free block is of enough size
                 * - finally, use it.
                 */
                if (n + HEADER_SZ <= x) {
                    x -= HEADER_SZ;
                    found = 1;
                    goto outfound;
                }
                dhdr++;
            }

outfound:        if (found) {
                uintptr_t tag;
                /* allocate and return this block */
                shdr->rsz = x;
                shdr->usz = n;
                shdr->tag = tag = smalloc_mktag(shdr);
                if (spool->do_zero) memset(HEADER_TO_USER(shdr), 0, shdr->rsz);
                s = CHAR_PTR(HEADER_TO_USER(shdr));
                s += shdr->usz;
                for (x = 0;
                x < sizeof(struct smalloc_hdr);
                x += sizeof(uintptr_t)) {
                    tag = smalloc_uinthash(tag);
                    memcpy(s+x, &tag, sizeof(uintptr_t));
                }
                memset(s+x, 0xff, shdr->rsz - shdr->usz);
                return HEADER_TO_USER(shdr);
            }

            /* continue first search for next free block */
allocblock:        shdr = dhdr;
            continue;
        }

        shdr++;
    }

oom:    if (spool->oomfn) {
        x = spool->oomfn(spool, n);
        if (x > spool->pool_size) {
            spool->pool_size = x;
            if (sm_align_pool(spool)) goto again;
        }
    }

    errno = ENOMEM;
    return NULL;
}

void *sm_malloc(size_t n)
{
    return sm_malloc_pool(&smalloc_curr_pool, n);
}

[@file: lib/src/smalloc/sm_malloc_stats.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

int sm_malloc_stats_pool(struct smalloc_pool *spool, size_t *total, size_t *user, size_t *free, int *nr_blocks)
{
    struct smalloc_hdr *shdr, *basehdr;
    int r = 0;

    if (!smalloc_verify_pool(spool)) {
        errno = EINVAL;
        return -1;
    }

    if (!total && !user && !free && !nr_blocks) return 0;

    if (total) *total = 0;
    if (user) *user = 0;
    if (free) *free = 0;
    if (nr_blocks) *nr_blocks = 0;

    shdr = basehdr = spool->pool;
    while (CHAR_PTR(shdr)-CHAR_PTR(basehdr) < spool->pool_size) {
        if (smalloc_is_alloc(spool, shdr)) {
            if (total) *total += HEADER_SZ + shdr->rsz + HEADER_SZ;
            if (user) *user += shdr->usz;
            if (nr_blocks) *nr_blocks += 1;
            r = 1;
        }

        shdr++;
    }

    *free = spool->pool_size - *total;

    return r;
}

int sm_malloc_stats(size_t *total, size_t *user, size_t *free, int *nr_blocks)
{
    return sm_malloc_stats_pool(&smalloc_curr_pool, total, user, free, nr_blocks);
}

[@file: lib/src/smalloc/sm_pool.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
    if (!spool->pool || !spool->pool_size) return 0;
    if (spool->pool_size % HEADER_SZ) return 0;
    return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    size_t x;

    if (smalloc_verify_pool(spool)) return 1;

    x = spool->pool_size % HEADER_SZ;
    if (x) spool->pool_size -= x;
    if (spool->pool_size <= MIN_POOL_SZ) {
        errno = ENOSPC;
        return 0;
    }

    return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    if (!spool) {
        errno = EINVAL;
        return 0;
    }

    if (!new_pool || !new_pool_size) {
        if (smalloc_verify_pool(spool)) {
            if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
            memset(spool, 0, sizeof(struct smalloc_pool));
            return 1;
        }

        errno = EINVAL;
        return 0;
    }

    spool->pool = new_pool;
    spool->pool_size = new_pool_size;
    spool->oomfn = oom_handler;
    if (!sm_align_pool(spool)) return 0;

    if (do_zero) {
        spool->do_zero = do_zero;
        memset(spool->pool, 0, spool->pool_size);
    }

    return 1;
}

int sm_set_default_pool(void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    return sm_set_pool(&smalloc_curr_pool, new_pool, new_pool_size, do_zero, oom_handler);
}

int sm_release_pool(struct smalloc_pool *spool)
{
    return sm_set_pool(spool, NULL, 0, 0, NULL);
}

int sm_release_default_pool(void)
{
    return sm_release_pool(&smalloc_curr_pool);
}

[@file: lib/src/smalloc/sm_realloc.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

void *sm_realloc_pool(struct smalloc_pool *spool, void *p, size_t n)
{
    return sm_realloc_pool_i(spool, p, n, 0);
}

void *sm_realloc(void *p, size_t n)
{
    return sm_realloc_pool_i(&smalloc_curr_pool, p, n, 0);
}

[@file: lib/src/smalloc/sm_realloc_i.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

/*
 * Please do NOT use this function directly or rely on it's presence.
 * It may go away in future SMalloc versions, or it's calling
 * signature may change. It is internal function, hence "_i" suffix.
 */
void *sm_realloc_pool_i(struct smalloc_pool *spool, void *p, size_t n, int nomove)
{
    struct smalloc_hdr *basehdr, *shdr, *dhdr;
    void *r;
    char *s;
    int found;
    size_t rsz, usz, x;
    uintptr_t tag;

    if (!smalloc_verify_pool(spool)) {
        errno = EINVAL;
        return NULL;
    }

    if (!p) return sm_malloc_pool(spool, n);
    if (!n && p) {
        sm_free_pool(spool, p);
        return NULL;
    }

    /* determine user size */
    shdr = USER_TO_HEADER(p);
    if (!smalloc_is_alloc(spool, shdr)) smalloc_UB(spool, p);
    usz = shdr->usz;
    rsz = shdr->rsz;

    /* newsize is lesser than allocated - truncate */
    if (n <= usz) {
        if (spool->do_zero) memset(p + n, 0, shdr->rsz - n);
        s = CHAR_PTR(HEADER_TO_USER(shdr));
        s += usz;
        memset(s, 0, HEADER_SZ);
        if (spool->do_zero) memset(s+HEADER_SZ, 0, rsz - usz);
        shdr->rsz = (n%HEADER_SZ)?(((n/HEADER_SZ)+1)*HEADER_SZ):n;
        shdr->usz = n;
        shdr->tag = tag = smalloc_mktag(shdr);
        s = CHAR_PTR(HEADER_TO_USER(shdr));
        s += shdr->usz;
        for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
            tag = smalloc_uinthash(tag);
            memcpy(s+x, &tag, sizeof(uintptr_t));
        }
        memset(s+x, 0xff, shdr->rsz - shdr->usz);
        return p;
    }

    /* newsize is bigger than allocated, but there is free room - modify */
    if (n > usz && n <= rsz) {
        if (spool->do_zero) {
            s = CHAR_PTR(HEADER_TO_USER(shdr));
            s += usz;
            memset(s, 0, HEADER_SZ);
        }
        shdr->usz = n;
        shdr->tag = tag = smalloc_mktag(shdr);
        s = CHAR_PTR(HEADER_TO_USER(shdr));
        s += shdr->usz;
        for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
            tag = smalloc_uinthash(tag);
            memcpy(s+x, &tag, sizeof(uintptr_t));
        }
        memset(s+x, 0xff, shdr->rsz - shdr->usz);
        return p;
    }

    /* newsize is bigger, larger than rsz but there are free blocks beyond - extend */
    basehdr = spool->pool; dhdr = shdr+(rsz/HEADER_SZ); found = 0;
    while (CHAR_PTR(dhdr)-CHAR_PTR(basehdr) < spool->pool_size) {
        x = CHAR_PTR(dhdr)-CHAR_PTR(shdr);
        if (smalloc_is_alloc(spool, dhdr))
            goto allocblock;
        if (n + HEADER_SZ <= x) {
            x -= HEADER_SZ;
            found = 1;
            goto outfound;
        }
        dhdr++;
    }

outfound:
    /* write new numbers of same allocation */
    if (found) {
        if (spool->do_zero) {
            s = CHAR_PTR(HEADER_TO_USER(shdr));
            s += usz;
            memset(s, 0, HEADER_SZ);
            memset(s+HEADER_SZ, 0, rsz - usz);
        }
        shdr->rsz = x;
        shdr->usz = n;
        shdr->tag = tag = smalloc_mktag(shdr);
        s = CHAR_PTR(HEADER_TO_USER(shdr));
        s += shdr->usz;
        for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
            tag = smalloc_uinthash(tag);
            memcpy(s+x, &tag, sizeof(uintptr_t));
        }
        memset(s+x, 0xff, shdr->rsz - shdr->usz);
        return p;
    }

allocblock:
    /* newsize is bigger than allocated and no free space - move */
    if (nomove) {
        /* fail if user asked */
        errno = ERANGE;
        return NULL;
    }
    r = sm_malloc_pool(spool, n);
    if (!r) return NULL;
    memcpy(r, p, usz);
    sm_free_pool(spool, p);

    return r;
}

[@file: lib/src/smalloc/sm_realloc_move.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

void *sm_realloc_move_pool(struct smalloc_pool *spool, void *p, size_t n)
{
    return sm_realloc_pool_i(spool, p, n, 1);
}

void *sm_realloc_move(void *p, size_t n)
{
    return sm_realloc_pool_i(&smalloc_curr_pool, p, n, 1);
}

[@file: lib/src/smalloc/sm_szalloc.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

size_t sm_szalloc_pool(struct smalloc_pool *spool, const void *p)
{
    struct smalloc_hdr *shdr;

    if (!smalloc_verify_pool(spool)) {
        errno = EINVAL;
        return ((size_t)-1);
    }

    if (!p) return 0;

    shdr = USER_TO_HEADER(p);
    if (smalloc_is_alloc(spool, shdr)) return shdr->usz;
    smalloc_UB(spool, p);
    return 0;
}

size_t sm_szalloc(const void *p)
{
    return sm_szalloc_pool(&smalloc_curr_pool, p);
}

[@file: lib/src/smalloc/sm_util.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

static int smalloc_check_bounds(struct smalloc_pool *spool, struct smalloc_hdr *shdr)
{
    if (!spool) return 0;
    if (CHAR_PTR(shdr) >= CHAR_PTR(spool->pool)
    && CHAR_PTR(shdr) <= (CHAR_PTR(spool->pool)+spool->pool_size))
        return 1;
    return 0;
}

static int smalloc_valid_tag(struct smalloc_hdr *shdr)
{
    char *s;
    uintptr_t r = smalloc_mktag(shdr);
    size_t x;

    if (shdr->tag == r) {
        s = CHAR_PTR(HEADER_TO_USER(shdr));
        s += shdr->usz;
        for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
            r = smalloc_uinthash(r);
            if (memcmp(s+x, &r, sizeof(uintptr_t)) != 0) return 0;
        }
        s += x; x = 0;
        while (x < shdr->rsz - shdr->usz) {
            if (s[x] != '\xFF') return 0;
            x++;
        }
        return 1;
    }
    return 0;
}

static void smalloc_do_crash(struct smalloc_pool *spool, const void *p)
{
    char *c = NULL;
    *c = 'X';
}

smalloc_ub_handler smalloc_UB = smalloc_do_crash;

void sm_set_ub_handler(smalloc_ub_handler handler)
{
    if (!handler) smalloc_UB = smalloc_do_crash;
    else smalloc_UB = handler;
}

int smalloc_is_alloc(struct smalloc_pool *spool, struct smalloc_hdr *shdr)
{
    if (!smalloc_check_bounds(spool, shdr)) return 0;
    if (shdr->rsz == 0) return 0;
    if (shdr->rsz > SIZE_MAX) return 0;
    if (shdr->usz > SIZE_MAX) return 0;
    if (shdr->usz > shdr->rsz) return 0;
    if (shdr->rsz % HEADER_SZ) return 0;
    if (!smalloc_valid_tag(shdr)) return 0;
    return 1;
}

[@file: lib/src/smalloc/sm_zalloc.c]
/*
 * This file is a part of SMalloc.
 * SMalloc is MIT licensed.
 * Copyright (c) 2017 Andrey Rys.
 */

#include "smalloc_i.h"

void *sm_zalloc_pool(struct smalloc_pool *spool, size_t n)
{
    void *r = sm_malloc_pool(spool, n);
    if (r) memset(r, 0, n);
    return r;
}

void *sm_zalloc(size_t n)
{
    return sm_zalloc_pool(&smalloc_curr_pool, n);
}

[@file: src/Enigma.c]
/**
 * @file Enigma.c
 * @author Demitrias Wilbert
 * @brief Source file for Enigma Encryption algorithm
 * @version 0.1
 * @date 2021-08-25
 * 
 * @copyright Copyright (c) 2021
 * 
 */

#include "Enigma.h"

static uint8_t charExists(uint8_t test, uint8_t* pArray, size_t size)
{
    for (size_t i = 0; i < size; i++) {
        if (pArray[i] == test)
            return 1;
    }
    return 0;
}

static int comp(const void *a, const void *b) {
    return (*(uint8_t *)a - *(uint8_t *)b);
}

void configRotor(Rotor* pRotor, const char* chars_to_mix)
{

    // sort characters
    size_t tmp_size = strlen(chars_to_mix);
    char* tmp_for_sort = (char*) malloc(tmp_size);
    memcpy(tmp_for_sort, chars_to_mix, tmp_size);
    qsort((void*)tmp_for_sort, tmp_size, 1, comp);

    // fill rotor struct with 0
    memset(pRotor, 0, sizeof(Rotor));

    // filter duplicates
    pRotor->symbols = 0;
    for (size_t i = 0; i < tmp_size; i++) {
        if (!pRotor->symbols) {
            pRotor->ttb_out[pRotor->symbols++] = tmp_for_sort[i];
            continue;
        }
        if (pRotor->ttb_out[pRotor->symbols-1] == tmp_for_sort[i]) // skip duplicates
            continue;
        pRotor->ttb_out[pRotor->symbols++] = tmp_for_sort[i];
    }
    free(tmp_for_sort);
    pRotor->symbols &= 0xFFFEUL;

    for (uint16_t i = 0; i < SYMBOLS_SIZE; i++)
        pRotor->ttb_in[i] = 0x100;

    // link ttb_in to ttb_out
    for (size_t i = 0; i < pRotor->symbols; i++)
        pRotor->ttb_in[pRotor->ttb_out[i]] = i;


    // how many rotors are there. (reflector counts as a rotor here)
    const uint16_t n_rotors  = sizeof(pRotor->rotors) / sizeof(pRotor->rotors[0]);
    pRotor->n_rotors     = n_rotors;

    const uint16_t n_symbols = pRotor->symbols;

    // reset rotors to initial position.
    resetrotor(pRotor);

    // loop through all rotors
    for (uint16_t j = 0; j < n_rotors; j++) {
        // loop through each symbol
        for (uint16_t i = 0; i < n_symbols; i++) {
            // fill the other one with different random alphabets
            uint8_t symbol = RAND() % n_symbols;

            // keep incrementing the current character if the character is already present in the array
            while (charExists(symbol, pRotor->rotors[j], i))
                symbol = (symbol + 1) % n_symbols;

            pRotor->rotors[j][i] = symbol;
        }
    }

    uint8_t tmp[256U];
    uint8_t* array = pRotor->rotors[n_rotors - 1];
    // reflectors need to be commutative (((int)pRotor->symbol_start) -> 'C', 'C'-> ((int)pRotor->symbol_start))
    for (uint16_t i = 0; i < n_symbols; i++) {
        // map the input rotor 180 degrees to the output rotor
        // e.g:
        // rotor[0] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        // rotor[1] = "NOPQRSTUVWXYZABCDEFGHIJKLM"
        tmp[i] = array[(i + (n_symbols / 2)) % n_symbols];
    }

    // bubble sort the refllectors (for easier indexing) while maintaining the commutative properties
    while (1) {
        uint8_t contloop = 0;
        for (uint16_t i = 0; i < n_symbols - 1; i++) {
            if (tmp[i] > tmp[i + 1]) {
                uint8_t temp0 = tmp[i];
                tmp[i] = tmp[i + 1];
                tmp[i + 1] = temp0;

                uint8_t temp1 = pRotor->rotors[n_rotors - 1][i];
                pRotor->rotors[n_rotors - 1][i] = pRotor->rotors[n_rotors - 1][i + 1];
                pRotor->rotors[n_rotors - 1][i + 1] = temp1;
                contloop = 1;
            }
        }
        if (!contloop) break;
    }

    memcpy(
        (void*)pRotor->plugboard, 
        (const void*)pRotor->rotors[n_rotors - 1], 
        sizeof(pRotor->plugboard)
    );
}

static void updaterotor(Rotor* pRotor) {
    pRotor->rotorpos[0]++;
    for (uint16_t i = 0; i < pRotor->n_rotors - 1U; i++) {
        if (pRotor->rotorpos[i] == pRotor->symbols) {
            pRotor->rotorpos[i] = 0;
            if (i + 1U < (pRotor->n_rotors - 1U))
                pRotor->rotorpos[i + 1]++;
        }
    }
}

void resetrotor(Rotor* pRotor) {
    for (uint16_t i = 0; i < pRotor->n_rotors - 1U; i++)
        pRotor->rotorpos[i] = 0;
}

uint8_t encryptChar(uint8_t In, Rotor* pRotor)
{
    uint16_t tempInEnigma     = pRotor->ttb_in[In];
    
    // if out of bound
    if (tempInEnigma >= 0x100U) return In;

    // run
    const uint16_t n_symbols = pRotor->symbols,
                   n_rotors  = sizeof(pRotor->rotors) / sizeof(pRotor->rotors[0]);

    // shift rotor pos by 1
    updaterotor(pRotor);

    // plug board
    tempInEnigma = pRotor->plugboard[tempInEnigma];

    // forward trace
    for (uint16_t i = 0; i < n_rotors - 1U; i++) {
        // calculate offset pos by rotor shift
        const uint16_t pos_rotor = pRotor->rotorpos[i];
        const uint8_t  index     = (tempInEnigma + pos_rotor) % n_symbols;
        tempInEnigma = pRotor->rotors[i][index];
    }

    // reflect
    tempInEnigma = pRotor->rotors[n_rotors - 1][tempInEnigma];

    // backtrace
    for (int i = n_rotors - 2; i >= 0; i--) {
        for (uint16_t j = 0; j < n_symbols; j++) {
            if (tempInEnigma == pRotor->rotors[i][j]) { 
                // offset by rotorpos
                const uint16_t pos_rotor = pRotor->rotorpos[i];
                tempInEnigma = (j + n_symbols - pos_rotor) % n_symbols;
                break;
            }
        }
    }

    // back to plugboard
    tempInEnigma = pRotor->plugboard[tempInEnigma];
    return pRotor->ttb_out[tempInEnigma];
}

uint8_t* encryptString(uint8_t* str, size_t len, Rotor* pRotor)
{
    for (size_t i = 0; i < len; i++) {
        *str = encryptChar(*str, pRotor);
        str++;
    }
    return str;
}
[@file: src/EXTString.cpp]
/*
  WEXTString.cpp - EXTString library for Wiring & Arduino
  ...mostly rewritten by Paul Stoffregen...
  Copyright (c) 2009-10 Hernando Barragan.  All rights reserved.
  Copyright 2011, Paul Stoffregen, paul@pjrc.com

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "EXTString.h"
#include "static_malloc.h"


/*********************************************/
/*  Constructors                             */
/*********************************************/

EXTString::EXTString(const char *cstr)
{
    init();
    if (cstr) copy(cstr, strlen(cstr));
}

EXTString::EXTString(const __FlashEXTStringHelper *pgmstr)
{
    init();
    *this = pgmstr;
}

EXTString::EXTString(const EXTString &value)
{
    init();
    *this = value;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
EXTString::EXTString(EXTString &&rval)
{
    init();
    move(rval);
}
EXTString::EXTString(EXTStringSumHelper &&rval)
{
    init();
    move(rval);
}
#endif

EXTString::EXTString(char c)
{
    init();
    *this = c;
}

EXTString::EXTString(unsigned char c)
{
    init();
    char buf[4];
    utoa(c, buf, 10);
    *this = buf;
}

EXTString::EXTString(const int value, unsigned char base)
{
    init();
    char buf[18];
    itoa(value, buf, base);
    *this = buf;
}

EXTString::EXTString(unsigned int value, unsigned char base)
{
    init();
    char buf[17];
      utoa(value, buf, base);
    *this = buf;
}

EXTString::EXTString(long value, unsigned char base)
{
    init();
    char buf[34];
    ltoa(value, buf, base);
    *this = buf;
}

EXTString::EXTString(unsigned long value, unsigned char base)
{
    init();
    char buf[33];
    ultoa(value, buf, base);
    *this = buf;
}

EXTString::EXTString(float num, unsigned char digits)
{
    init();
    char buf[40];
    *this = dtostrf(num, digits + 2, digits, buf);
}

EXTString::~EXTString()
{
    sm_free(buffer);
}

/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void EXTString::init(void)
{
    buffer = NULL;
    capacity = 0;
    len = 0;
    flags = 0;
}

unsigned char EXTString::reserve(unsigned int size)
{
    if (capacity >= size) return 1;
    if (changeBuffer(size)) {
        if (len == 0) buffer[0] = 0;
        return 1;
    }
    return 0;
}

unsigned char EXTString::changeBuffer(unsigned int maxStrLen)
{
    char *newbuffer = (char *)sm_realloc(buffer, maxStrLen + 1);
    if (newbuffer) {
        buffer = newbuffer;
        capacity = maxStrLen;
        return 1;
    }
    return 0;
}

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

EXTString & EXTString::copy(const char *cstr, unsigned int length)
{
    if (length == 0) {
        if (buffer) buffer[0] = 0;
        len = 0;
        return *this;
    }
    if (!reserve(length)) {
        if (buffer) {
            sm_free(buffer);
            buffer = NULL;
        }
        len = capacity = 0;
        return *this;
    }
    len = length;
    strcpy(buffer, cstr);
    return *this;
}

void EXTString::move(EXTString &rhs)
{
    if (&rhs == this) return;
    if (buffer) sm_free(buffer);
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = NULL;
    rhs.capacity = 0;
    rhs.len = 0;
}

EXTString & EXTString::operator = (const EXTString &rhs)
{
    if (this == &rhs) return *this;
    return copy(rhs.buffer, rhs.len);
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
EXTString & EXTString::operator = (EXTString &&rval)
{
    if (this != &rval) move(rval);
    return *this;
}

EXTString & EXTString::operator = (EXTStringSumHelper &&rval)
{
    if (this != &rval) move(rval);
    return *this;
}
#endif

EXTString & EXTString::operator = (const char *cstr)
{
    if (cstr) {
        copy(cstr, strlen(cstr));
    } else {
        len = 0;
    }
    return *this;
}

EXTString & EXTString::operator = (const __FlashEXTStringHelper *pgmstr)
{
    copy(pgmstr);
    return *this;
}

EXTString & EXTString::operator = (char c)
{
    char buf[2];
    buf[0] = c;
    buf[1] = 0;
    return copy(buf, 1);
}

/*********************************************/
/*  Append                                   */
/*********************************************/

EXTString & EXTString::append(const EXTString &s)
{
    return append(s.buffer, s.len);
}

EXTString & EXTString::append(const char *cstr, unsigned int length)
{
    unsigned int newlen = len + length;
    bool self = false;
    unsigned int buffer_offset; 
    if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
        self = true;
        buffer_offset = (unsigned int)(cstr-buffer);
    }
    if (length == 0 || !reserve(newlen)) return *this;
    if ( self ) {
        memcpy(buffer + len, buffer+buffer_offset, length);
        buffer[newlen] = 0;
        }
    else
        strcpy(buffer + len, cstr);
    len = newlen;
    return *this;
}

EXTString & EXTString::append(const char *cstr)
{
    if (cstr) append(cstr, strlen(cstr));
    return *this;
}

EXTString & EXTString::append(char c)
{
    char buf[2];
    buf[0] = c;
    buf[1] = 0;
    append(buf, 1);
    return *this;
}

EXTString & EXTString::append(int num)
{
    char buf[12];
    ltoa((long)num, buf, 10);
    append(buf, strlen(buf));
    return *this;
}

EXTString & EXTString::append(unsigned int num)
{
    char buf[11];
    ultoa((unsigned long)num, buf, 10);
    append(buf, strlen(buf));
    return *this;
}

EXTString & EXTString::append(long num)
{
    char buf[12];
    ltoa(num, buf, 10);
    append(buf, strlen(buf));
    return *this;
}

EXTString & EXTString::append(unsigned long num)
{
    char buf[11];
    ultoa(num, buf, 10);
    append(buf, strlen(buf));
    return *this;
}

EXTString & EXTString::append(float num)
{
    char buf[30];
    dtostrf(num, 4, 2, buf); 
    append(buf, strlen(buf));
    return *this;
}


/*********************************************/
/*  Concatenate                              */
/*********************************************/


EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, const EXTString &rhs)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(rhs.buffer, rhs.len);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, const char *cstr)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    if (cstr) a.append(cstr, strlen(cstr));
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, const __FlashEXTStringHelper *pgmstr)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(pgmstr);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, char c)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(c);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, unsigned char c)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(c);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, int num)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append((long)num);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, unsigned int num)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append((unsigned long)num);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, long num)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(num);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, unsigned long num)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(num);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, float num)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(num);
    return a;
}

EXTStringSumHelper & operator + (const EXTStringSumHelper &lhs, double num)
{
    EXTStringSumHelper &a = const_cast<EXTStringSumHelper&>(lhs);
    a.append(num);
    return a;
}

/*********************************************/
/*  Comparison                               */
/*********************************************/

int EXTString::compareTo(const EXTString &s) const
{
    if (!buffer || !s.buffer) {
        if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
        if (buffer && len > 0) return *(unsigned char *)buffer;
        return 0;
    }
    return strcmp(buffer, s.buffer);
}

unsigned char EXTString::equals(const EXTString &s2) const
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char EXTString::equals(const char *cstr) const
{
    if (len == 0) return (cstr == NULL || *cstr == 0);
    if (cstr == NULL) return buffer[0] == 0;
    return strcmp(buffer, cstr) == 0;
}

unsigned char EXTString::operator<(const EXTString &rhs) const
{
    return compareTo(rhs) < 0;
}

unsigned char EXTString::operator>(const EXTString &rhs) const
{
    return compareTo(rhs) > 0;
}

unsigned char EXTString::operator<=(const EXTString &rhs) const
{
    return compareTo(rhs) <= 0;
}

unsigned char EXTString::operator>=(const EXTString &rhs) const
{
    return compareTo(rhs) >= 0;
}

unsigned char EXTString::equalsIgnoreCase( const EXTString &s2 ) const
{
    if (this == &s2) return 1;
    if (len != s2.len) return 0;
    if (len == 0) return 1;
    const char *p1 = buffer;
    const char *p2 = s2.buffer;
    while (*p1) {
        if (tolower(*p1++) != tolower(*p2++)) return 0;
    } 
    return 1;
}

unsigned char EXTString::startsWith( const EXTString &s2 ) const
{
    if (len < s2.len) return 0;
    return startsWith(s2, 0);
}

unsigned char EXTString::startsWith( const EXTString &s2, unsigned int offset ) const
{
    if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char EXTString::endsWith( const EXTString &s2 ) const
{
    if ( len < s2.len || !buffer || !s2.buffer) return 0;
    return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}

/*********************************************/
/*  Character Access                         */
/*********************************************/

const char EXTString::zerotermination = 0;

char EXTString::charAt(unsigned int loc) const
{
    return operator[](loc);
}

void EXTString::setCharAt(unsigned int loc, char c) 
{
    if (loc < len) buffer[loc] = c;
}

char & EXTString::operator[](unsigned int index)
{
    static char dummy_writable_char;
    if (index >= len || !buffer) {
        dummy_writable_char = 0;
        return dummy_writable_char;
    }
    return buffer[index];
}

char EXTString::operator[]( unsigned int index ) const
{
    if (index >= len || !buffer) return 0;
    return buffer[index];
}

void EXTString::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    if (!bufsize || !buf) return;
    if (index >= len) {
        buf[0] = 0;
        return;
    }
    unsigned int n = bufsize - 1;
    if (n > len - index) n = len - index;
    strncpy((char *)buf, buffer + index, n);
    buf[n] = 0;
}

/*********************************************/
/*  Search                                   */
/*********************************************/

int EXTString::indexOf(char c) const
{
    return indexOf(c, 0);
}

int EXTString::indexOf( char ch, unsigned int fromIndex ) const
{
    if (fromIndex >= len) return -1;
    const char* temp = strchr(buffer + fromIndex, ch);
    if (temp == NULL) return -1;
    return temp - buffer;
}

int EXTString::indexOf(const EXTString &s2) const
{
    return indexOf(s2, 0);
}

int EXTString::indexOf(const EXTString &s2, unsigned int fromIndex) const
{
    if (fromIndex >= len) return -1;
    const char *found = strstr(buffer + fromIndex, s2.buffer);
    if (found == NULL) return -1;
    return found - buffer;
}

int EXTString::lastIndexOf( char theChar ) const
{
    return lastIndexOf(theChar, len - 1);
}

int EXTString::lastIndexOf(char ch, unsigned int fromIndex) const
{
    if (fromIndex >= len) return -1;
    char tempchar = buffer[fromIndex + 1];
    buffer[fromIndex + 1] = '\0';
    char* temp = strrchr( buffer, ch );
    buffer[fromIndex + 1] = tempchar;
    if (temp == NULL) return -1;
    return temp - buffer;
}

int EXTString::lastIndexOf(const EXTString &s2) const
{
    return lastIndexOf(s2, len - s2.len);
}

int EXTString::lastIndexOf(const EXTString &s2, unsigned int fromIndex) const
{
      if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    if (fromIndex >= len) fromIndex = len - 1;
    int found = -1;
    for (char *p = buffer; p <= buffer + fromIndex; p++) {
        p = strstr(p, s2.buffer);
        if (!p) break;
        if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    }
    return found;
}

EXTString EXTString::substring( unsigned int left ) const
{
    return substring(left, len);
}

EXTString EXTString::substring(unsigned int left, unsigned int right) const
{
    if (left > right) {
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    EXTString out;
    if (left > len) return out;
    if (right > len) right = len;
    char temp = buffer[right];  // save the replaced character
    buffer[right] = '\0';    
    out = buffer + left;  // pointer arithmetic
    buffer[right] = temp;  //restore character
    return out;
}

/*********************************************/
/*  Modification                             */
/*********************************************/

EXTString & EXTString::replace(char find, char replace)
{
    if (!buffer) return *this;
    for (char *p = buffer; *p; p++) {
        if (*p == find) *p = replace;
    }
    return *this;
}

EXTString & EXTString::replace(const EXTString& find, const EXTString& replace)
{
    if (len == 0 || find.len == 0) return *this;
    int diff = replace.len - find.len;
    char *readFrom = buffer;
    char *foundAt;
    if (diff == 0) {
        while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
            memcpy(foundAt, replace.buffer, replace.len);
            readFrom = foundAt + replace.len;
        }
    } else if (diff < 0) {
        char *writeTo = buffer;
        while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
            unsigned int n = foundAt - readFrom;
            memcpy(writeTo, readFrom, n);
            writeTo += n;
            memcpy(writeTo, replace.buffer, replace.len);
            writeTo += replace.len;
            readFrom = foundAt + find.len;
            len += diff;
        }
        strcpy(writeTo, readFrom);
    } else {
        unsigned int size = len; // compute size needed for result
        while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
            readFrom = foundAt + find.len;
            size += diff;
        }
        if (size == len) return *this;
        if (size > capacity && !changeBuffer(size)) return *this;
        int index = len - 1;
        while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
            readFrom = buffer + index + find.len;
            memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
            len += diff;
            buffer[len] = 0;
            memcpy(buffer + index, replace.buffer, replace.len);
            index--;
        }
    }
    return *this;
}

EXTString & EXTString::remove(unsigned int index)
{
    if (index < len) {
        len = index;
        buffer[len] = 0;
    }
    return *this;
}

EXTString & EXTString::remove(unsigned int index, unsigned int count)
{
    if (index < len && count > 0) {
          if (index + count > len) count = len - index;
        len = len - count;
        memmove(buffer + index, buffer + index + count, len - index);
        buffer[len] = 0;
    }
    return *this;
}

EXTString & EXTString::toLowerCase(void)
{
    if (!buffer) return *this;
    for (char *p = buffer; *p; p++) {
        *p = tolower(*p);
    }
    return *this;
}

EXTString & EXTString::toUpperCase(void)
{
    if (!buffer) return *this;
    for (char *p = buffer; *p; p++) {
        *p = toupper(*p);
    }
    return *this;
}

EXTString & EXTString::trim(void)
{
    if (!buffer || len == 0) return *this;
    char *begin = buffer;
    while (isspace(*begin)) begin++;
    char *end = buffer + len - 1;
    while (isspace(*end) && end >= begin) end--;
    len = end + 1 - begin;
    if (begin > buffer) memcpy(buffer, begin, len);
    buffer[len] = 0;
    return *this;
}

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long EXTString::toInt(void) const
{
    if (buffer) return atol(buffer);
    return 0;
}

float EXTString::toFloat(void) const
{
    if (buffer) return strtof(buffer, (char **)NULL);
    return 0.0;
}



[@file: src/filesystem.cpp]
#include "filesystem.h"

LittleFS_Program myfs;
uint32_t diskSize;

/**
 * @brief Load from file to string
 * 
 * @param fs file system
 * @param filePath path to file
 * @param str string to load file to
 * @return int 
 */
int loadFileToStr(const char* filePath, EXTString& str, LittleFS_Program& fs) {
    // open file
    File file = fs.open(filePath, FILE_READ);

    if (file) { // if file exists
        str = "";
        for (int c = file.read(); c >= 0; c = file.read()) 
            str += (char)c;
        file.close();
        return str.length();

    } else { // if file doesn't exist
        // create new file
        file = fs.open(filePath, FILE_WRITE_BEGIN);
        if (!file) return -2;

        file.close();
        return -1;
    }
}

/**
 * @brief save from string to file
 * 
 * @param fs file system 
 * @param filePath path to file
 * @param str string to save
 * @return int 
 */
int saveStrToFile(const char* filePath, EXTString& str, LittleFS_Program& fs) {
    
    // delete previous file
    fs.remove("/file");

    // open new file
    File file = fs.open("/file", FILE_WRITE_BEGIN);

    // write to file
    if (file) {
        file.write((const uint8_t*)str.c_str(), str.length());
        file.flush();
        int position = file.position();
        file.close();
        return position;
    } 
    
    // file error
    return -1;
}

/**
 * @brief Initialize FS
 * 
 * @param size size of FS in flash, default = PROG_FLASH_SIZE
 * @return int (0: fail, >0: success)
 */
int disk_init(uint32_t size, LittleFS_Program& fs) {
    diskSize = size;
    int cnt = 5;
    for (; cnt > 0; cnt--) {
        if (fs.begin(diskSize)) 
            return cnt;
        delay(100);
    }
    return 0;
}
[@file: src/HIDKeyboard.cpp]
/*
  Keyboard.cpp

  Copyright (c) 2015, Arduino LLC
  Original code (pre-library): Copyright (c) 2011, Peter Barrett

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "HIDKeyboard.h"
#include "usb_keyboard.h"

const uint32_t _asciimap[] =
{
    0x00U, // NUL
    0x00U, // SOH
    0x00U, // STX
    0x00U, // ETX
    0x00U, // EOT
    0x00U, // ENQ
    0x00U, // ACK
    0x00U, // BEL
    0x2aU, // BS    Backspace
    0x2bU, // TAB   Tab
    0x28U, // LF    Enter
    0x00U, // VT
    0x00U, // FF
    0x00U, // CR
    0x00U, // SO
    0x00U, // SI
    0x00U, // DEL
    0x00U, // DC1
    0x00U, // DC2
    0x00U, // DC3
    0x00U, // DC4
    0x00U, // NAK
    0x00U, // SYN
    0x00U, // ETB
    0x00U, // CAN
    0x00U, // EM
    0x00U, // SUB
    0x00U, // ESC
    0x00U, // FS
    0x00U, // GS
    0x00U, // RS
    0x00U, // US
    0x2cU,         //  ' '
    0x1eU | SHIFT, // !
    0x34U | SHIFT, // "
    0x20U | SHIFT, // #
    0x21U | SHIFT, // $
    0x22U | SHIFT, // %
    0x24U | SHIFT, // &
    0x34U,         // '
    0x26U | SHIFT, // (
    0x27U | SHIFT, // )
    0x25U | SHIFT, // *
    0x2eU | SHIFT, // +
    0x36U,         // ,
    0x2dU,         // -
    0x37U,         // .
    0x38U,         // /
    0x27U,         // 0
    0x1eU,         // 1
    0x1fU,         // 2
    0x20U,         // 3
    0x21U,         // 4
    0x22U,         // 5
    0x23U,         // 6
    0x24U,         // 7
    0x25U,         // 8
    0x26U,         // 9
    0x33U | SHIFT, // :
    0x33U,         // ;
    0x36U | SHIFT, // <
    0x2eU,         // =
    0x37U | SHIFT, // >
    0x38U | SHIFT, // ?
    0x1fU | SHIFT, // @
    0x04U | SHIFT, // A
    0x05U | SHIFT, // B
    0x06U | SHIFT, // C
    0x07U | SHIFT, // D
    0x08U | SHIFT, // E
    0x09U | SHIFT, // F
    0x0aU | SHIFT, // G
    0x0bU | SHIFT, // H
    0x0cU | SHIFT, // I
    0x0dU | SHIFT, // J
    0x0eU | SHIFT, // K
    0x0fU | SHIFT, // L
    0x10U | SHIFT, // M
    0x11U | SHIFT, // N
    0x12U | SHIFT, // O
    0x13U | SHIFT, // P
    0x14U | SHIFT, // Q
    0x15U | SHIFT, // R
    0x16U | SHIFT, // S
    0x17U | SHIFT, // T
    0x18U | SHIFT, // U
    0x19U | SHIFT, // V
    0x1aU | SHIFT, // W
    0x1bU | SHIFT, // X
    0x1cU | SHIFT, // Y
    0x1dU | SHIFT, // Z
    0x2fU,         // [
    0x31U,         // bslash
    0x30U,         // ]
    0x23U | SHIFT, // ^
    0x2dU | SHIFT, // _
    0x35U,         // `
    0x04U,         // a
    0x05U,         // b
    0x06U,         // c
    0x07U,         // d
    0x08U,         // e
    0x09U,         // f
    0x0aU,         // g
    0x0bU,         // h
    0x0cU,         // i
    0x0dU,         // j
    0x0eU,         // k
    0x0fU,         // l
    0x10U,         // m
    0x11U,         // n
    0x12U,         // o
    0x13U,         // p
    0x14U,         // q
    0x15U,         // r
    0x16U,         // s
    0x17U,         // t
    0x18U,         // u
    0x19U,         // v
    0x1aU,         // w
    0x1bU,         // x
    0x1cU,         // y
    0x1dU,         // z
    0x2fU | SHIFT, // {
    0x31U | SHIFT, // |
    0x30U | SHIFT, // }
    0x35U | SHIFT, // ~
    0x00U,         // DEL
    // MODIFIER
    M_KEY_LEFT_CTRL,
    M_KEY_LEFT_SHIFT,
    M_KEY_LEFT_ALT, 
    M_KEY_LEFT_GUI, 
    M_KEY_RIGHT_CTRL, 
    M_KEY_RIGHT_SHIFT, 
    M_KEY_RIGHT_ALT, 
    M_KEY_RIGHT_GUI, 
    // NONPRINT
    M_KEY_UP_ARROW,
    M_KEY_DOWN_ARROW,
    M_KEY_LEFT_ARROW,
    M_KEY_RIGHT_ARROW,
    M_KEY_BACKSPACE,
    M_KEY_TAB,
    M_KEY_RETURN,
    M_KEY_ESC,
    M_KEY_INSERT,
    M_KEY_PRTSC,
    M_KEY_DELETE,
    M_KEY_PAGE_UP,
    M_KEY_PAGE_DOWN,
    M_KEY_HOME,
    M_KEY_END,
    M_KEY_CAPS_LOCK,
    M_KEY_NUM_LOCK,

    // F Keys
    M_KEY_F1, 
    M_KEY_F2, 
    M_KEY_F3, 
    M_KEY_F4, 
    M_KEY_F5, 
    M_KEY_F6, 
    M_KEY_F7, 
    M_KEY_F8, 
    M_KEY_F9, 
    M_KEY_F10, 
    M_KEY_F11, 
    M_KEY_F12, 
    M_KEY_F13, 
    M_KEY_F14, 
    M_KEY_F15, 
    M_KEY_F16, 
    M_KEY_F17, 
    M_KEY_F18, 
    M_KEY_F19, 
    M_KEY_F20, 
    M_KEY_F21, 
    M_KEY_F22, 
    M_KEY_F23, 
    M_KEY_F24, 

    // KEYPAD
    M_KEY_NUM_0,
    M_KEY_NUM_1,
    M_KEY_NUM_2,
    M_KEY_NUM_3,
    M_KEY_NUM_4,
    M_KEY_NUM_5,
    M_KEY_NUM_6,
    M_KEY_NUM_7,
    M_KEY_NUM_8,
    M_KEY_NUM_9,
    M_KEY_NUM_SLASH,
    M_KEY_NUM_ASTERISK,
    M_KEY_NUM_MINUS,
    M_KEY_NUM_PLUS,
    M_KEY_NUM_ENTER,
    M_KEY_NUM_PERIOD,
    M_KEY_NUM_EQUAL,

    // MEDIA 1
    M_KEY_MEDIA_NEXT,
    M_KEY_MEDIA_PREV, 
    M_KEY_MEDIA_STOP, 
    M_KEY_MEDIA_PAUSE, 
    M_KEY_MEDIA_MUTE, 
    M_KEY_MEDIA_VOLUP, 
    M_KEY_MEDIA_VOLDN, 
    M_KEY_MEDIA_WWW_HOME, 
    
    // MEDIA 2
    M_KEY_FILE_EXPLORER, 
    M_KEY_MEDIA_CALC, 
    M_KEY_MEDIA_BRIGHTNESS_D, 
    M_KEY_MEDIA_BRIGHTNESS_I, 
    M_KEY_MEDIA_WWW_STOP, 
    M_KEY_MEDIA_WWW_BACK, 
    M_KEY_CONSUMER_CTL, 
    M_KEY_MEDIA_EMAIL, 
};

uint32_t Reports::pressRaw(uint32_t k) {
    uint8_t i; uint32_t retVal = k;
    if ((k & M_KEY_TYPE_MASK) == M_KEY_TYPE_MODIF)
    { // it's a modifier key
        _keyReport.modifiers |= (k & 0xff);
        return retVal;
    }
    else if ((k & M_KEY_TYPE_MASK) == 0x0U)
    { // ascii
        k = _asciimap[k & 0xffU] | M_KEY_TARGET_KB;
        if ((k & M_KEY_TYPE_MASK) == SHIFT)
            _keyReport.modifiers |= (M_KEY_LEFT_SHIFT & 0xff);
    }
    else if ((k & M_KEY_TYPE_MASK) == M_KEY_TARGET_CC)
    { // media
        _cc_report |= (k & 0xFFFFU);
        return k;
    }
    else if (!k)
        return 0;

    for (i = 0; i < sizeof(_keyReport.keys); i++)
    {
        if (_keyReport.keys[i] == 0x00)
        {
            _keyReport.keys[i] = (uint8_t)k;
            return k;
        }
    }
    return 0;
}

uint32_t Reports::press(uint8_t data) {
    uint32_t k = (data > 127)? _asciimap[data] : data;
    return pressRaw(k);
}

uint32_t Reports::release(uint8_t data) {
    uint32_t k = (data > 127)? _asciimap[data] : data;
    return releaseRaw(k);
}

uint32_t Reports::pressMulti(const uint8_t* data) {
    if (data == NULL) return 0;
    int i = 0;
    uint32_t retval = 0;
    while (data[i]) {
        retval |= press((const uint8_t)data[i]) & M_KEY_TARGET_MASK;
        i++;
    }
    return retval;
}

uint32_t Reports::releaseMulti(const uint8_t* data) {
    if (data == NULL) return 0;
    int i = 0;
    uint32_t retval = 0;
    while (data[i]) {
        retval |= release((const uint8_t)data[i]) & M_KEY_TARGET_MASK;
        i++;
    }
    return retval;
}

uint32_t Reports::releaseRaw(uint32_t k) {
    uint8_t i; uint32_t retVal = k;
    if ((k & M_KEY_TYPE_MASK) == M_KEY_TYPE_MODIF)
    { // it's a modifier key
        _keyReport.modifiers &= ~(k & 0xff);
        return retVal;
    }
    else if ((k & M_KEY_TYPE_MASK) == 0x0U)
    { // ascii
        k = _asciimap[k & 0xffU] | M_KEY_TARGET_KB;
        if ((k & M_KEY_TYPE_MASK) == SHIFT)
            _keyReport.modifiers &= ~(M_KEY_LEFT_SHIFT & 0xff);
    }
    else if ((k & M_KEY_TYPE_MASK) == M_KEY_TARGET_CC)
    { // media
        _cc_report &= ~(k & 0xFFFFU);
        return k;
    }
    else if (!k)
        return 0;

    for (i = 0; i < sizeof(_keyReport.keys); i++)
    {
        if (_keyReport.keys[i] == (uint8_t)k)
        {
            _keyReport.keys[i] = 0;
            return k;
        }
    }
    return 0;
}

void Reports::releaseAll(void)
{
    memset(&_keyReport, 0, sizeof(_keyReport));
    _cc_report = 0;
}


void Reports::sendKeyReport() {
    usb_keyboard_transmit(KEYBOARD_ENDPOINT, (uint8_t*)&_keyReport, KEYBOARD_SIZE);
}
[@file: src/kbcontrol.cpp]
#include "kbcontrol.h"

// keyboard params
EXTString rx_str = "";
EXTString tx_str = "";
bool tx_lock = false;
uint32_t kb_delay = 0;
uint32_t type_pos = 0;

void memory_test(Stream& st) {
    // calculate clock frq
    float frequency = psram_clock_speed_get();

    st.printf("CCM_CBCMR = %08lX (%f MHz)\n", CCM_CBCMR, frequency);

    // allocate memory
    uint32_t str_size = 0x200000UL;
    char* str = (char*)sm_malloc(str_size);

    // test memset speed
    uint32_t arm_cyccnt_write = ARM_DWT_CYCCNT;
    memset(str, 'U', str_size);
    arm_cyccnt_write = ARM_DWT_CYCCNT - arm_cyccnt_write;

    // check integrity
    bool mem_ok = true;
    for (char* i = str; i < str + str_size && *i == 'U'; i++) {
        if (*i != 'U') {
            mem_ok = false;
            break;
        }
    }

    // log
    if (mem_ok) {
        st.printf(
            "write count: %lu, ms: %lf, per_bytes: %lf, MB/s: %lf\n",
            str_size, (double)arm_cyccnt_write / F_CPU_ACTUAL,
            (double)arm_cyccnt_write / str_size,
            (double)((uint64_t)F_CPU_ACTUAL * str_size) /
                arm_cyccnt_write / 1000000.0);
    } else {
        st.printf("Memory Error\n");
    }

    // free allocated memory
    sm_free(str);
}

/**
 * @brief Process received character from serial
 *
 * @param c
 */
void process_char(Stream& st, char c) {

    /** @brief Clear received string */
    static bool enable_backspace_clear = true;
    if (c == '\b' && enable_backspace_clear) {
        rx_str = "";
        st.println("cleared");
        return;
    }

    /**
     * @brief received Escape char (\033)
     *
     * start processing received string
     * when received Escape char
     *
     */
    if (c == '\033') {
        st.println();

        /**
         * @brief Toggle backspace clear
         *
         * Toggles whether backspace char clears
         * rx_str or be treated as a normal character
         *
         */
        if (strncmp(rx_str.c_str(), "KB bkspc", 8) == 0 &&
            rx_str.length() == 8) {
            rx_str = "";
            enable_backspace_clear = !enable_backspace_clear;
            st.println((enable_backspace_clear) ? "Backspace clears RX buffer"
                                                : "Backspace is normal key");
            return;
        }

        /**
         * @brief set keyboard report delay
         * MAX allowed: 1000000us (1 second)
         */
        if (strncmp(rx_str.c_str(), "KB delay ", 9) == 0 &&
            rx_str.length() > 9 && rx_str.length() < 19) {

            EXTString kb_delay_str(rx_str.substring(9).c_str());
            kb_delay_str.trim();

            kb_delay = kb_delay_str.toInt();
            kb_delay = (kb_delay > 1000000) ? 1000000 : kb_delay;

            rx_str = "";
            st.printf("Key Delay: %lu ms\n", kb_delay);
            st.printf("Report Rate: %lu Hz\n",
                      (1000000UL / (kb_delay > 125U ? kb_delay : 125U)));
            return;
        }

        /**
         * @brief retrieves keyboard report delay
         */
        if (strncmp(rx_str.c_str(), "KB delay", 8) == 0 &&
            rx_str.length() == 8) {

            rx_str = "";
            st.printf("Key Delay: %lu ms\n", kb_delay);
            st.printf("Report Rate: %lu Hz\n",
                      (1000000UL / (kb_delay > 125U ? kb_delay : 125U)));
            return;
        }

        /**
         * @brief set keyboard autotype position
         */
        if (strncmp(rx_str.c_str(), "KB pos ", 7) == 0 && rx_str.length() > 7 &&
            rx_str.length() < 17) {

            EXTString kb_pos_str(rx_str.substring(7).c_str());
            kb_pos_str.trim();

            type_pos = kb_pos_str.toInt();
            type_pos = (type_pos >= tx_str.length()) ? (tx_str.length() - 1)
                                                     : type_pos;

            rx_str = "";
            st.printf("Key Pos: %lu\n", type_pos);
            return;
        }

        /**
         * @brief get keyboard autotype position
         */
        if (strncmp(rx_str.c_str(), "KB pos", 6) == 0 && rx_str.length() == 6) {

            rx_str = "";
            st.printf("Key Pos: %lu\n", type_pos);
            return;
        }

        /**
         * @brief get keyboard autotype text length
         *
         */
        if (strncmp(rx_str.c_str(), "KB len", 6) == 0 && rx_str.length() == 6) {

            rx_str = "";
            st.printf("Length: %lu\n", tx_str.length());
            return;
        }

        /**
         * @brief get keyboard autotype text length
         *
         */
        if (strncmp(rx_str.c_str(), "KB text", 7) == 0 && rx_str.length() == 7) {

            rx_str = "";
            st.write(tx_str.c_str(), tx_str.length());
            return;
        }

        /**
         * @brief mouse position
         *
         */
        static int mouse_x = 0;
        static int mouse_y = 0;

        /**
         * @brief set mouse x position
         *
         */
        if (strncmp(rx_str.c_str(), "KB mouse x ", 11) == 0 &&
            rx_str.length() > 11 && rx_str.length() < 18) {

            EXTString kb_pos_str(rx_str.substring(11).c_str());
            kb_pos_str.trim();
            mouse_x = kb_pos_str.toInt();
            rx_str = "";
            usb_mouse_position(mouse_x, mouse_y);
            st.printf("Pos: %lu, %lu\n", mouse_x, mouse_y);
            return;
        }

        /**
         * @brief set mouse y position
         *
         */
        if (strncmp(rx_str.c_str(), "KB mouse y ", 11) == 0 &&
            rx_str.length() > 11 && rx_str.length() < 18) {

            EXTString kb_pos_str(rx_str.substring(11).c_str());
            kb_pos_str.trim();
            mouse_y = kb_pos_str.toInt();
            rx_str = "";
            usb_mouse_position(mouse_x, mouse_y);
            st.printf("Pos: %lu, %lu\n", mouse_x, mouse_y);
            return;
        }

        /**
         * @brief Load data from file to tx_str
         *
         */
        if (strncmp(rx_str.c_str(), "KB load", 7) == 0 &&
            rx_str.length() == 7) {

            rx_str = "";
            st.println("loading");

            int loaded = loadFileToStr("/file", tx_str);

            if (loaded >= 0)
                st.printf("Loaded %lu bytes\n", loaded);
            else
                st.printf("Error Code: %d", loaded);

            return;
        }

        /**
         * @brief save data from tx_str to file
         *
         */
        if (strncmp(rx_str.c_str(), "KB save", 7) == 0 &&
            rx_str.length() == 7) {

            st.println("saving");
            rx_str = "";

            int saved = saveStrToFile("/file", tx_str);

            if (saved >= 0)
                st.printf("Saved %d bytes\n", saved);
            else
                st.printf("Error Code: %d", saved);

            return;
        }

        /**
         * @brief Test PSRAM Speed
         *
         */
        if (strncmp(rx_str.c_str(), "KB ram test", 11) == 0 &&
            rx_str.length() == 11) {

            rx_str = "";

            memory_test(st);

            return;
        }

        /**
         * @brief Test PSRAM Speed
         *
         */
        if (strncmp(rx_str.c_str(), "KB ram speed", 12) == 0 &&
            rx_str.length() == 12) {

            rx_str = "";

            print_ram_speeds(st);

            return;
        }

        // set EXT RAM speed
        if (strncmp(rx_str.c_str(), "KB ram ", 7) == 0 && rx_str.length() > 7 &&
            rx_str.length() < 10) {

            EXTString kb_pos_str(rx_str.substring(7).c_str());
            kb_pos_str.trim();
            rx_str = "";

            // get clock speed index
            uint32_t index = kb_pos_str.toInt();

            // set clock speed
            psram_clock_speed_set(index);

            // calculate clock frq
            float frequency = psram_clock_speed_get();

            st.printf("CCM_CBCMR = %08lX (%f MHz)\n", CCM_CBCMR, frequency);

            return;
        }
        // get EXT RAM speed
        if (strncmp(rx_str.c_str(), "KB ram", 6) == 0 && rx_str.length() == 6) {

            rx_str = "";

            // calculate clock frq
            float frequency = psram_clock_speed_get();

            st.printf("CCM_CBCMR = %08lX (%f MHz)\n", CCM_CBCMR, frequency);

            return;
        }

        // reshuffle enigma rotor
        if (strncmp(rx_str.c_str(), "KB rotor shuffle", 16) == 0 && rx_str.length() == 16) {

            rx_str = "";

            // new pseudo random seed
            srand(Entropy.random());

            // reshuffle rotor
            uint32_t cyccnt = ARM_DWT_CYCCNT;
            for (unsigned int i = 0; i < n_rotor; i++)
                configRotor(&rotor[i], (const char*)rotor[i].ttb_out);
            cyccnt = ARM_DWT_CYCCNT - cyccnt;

            // count cpu cycles
            st.printf("CPU Cycles = %lu\n", cyccnt);

            return;
        }

        // run tx_str through enigma rotor
        if (strncmp(rx_str.c_str(), "KB encrypt", 10) == 0 && rx_str.length() == 10) {

            rx_str = "";

            // reset each rotor
            for (unsigned int i = 0; i < n_rotor; i++)
                resetrotor(&rotor[i]);
            
            // run through each rotor
            uint32_t cyccnt = ARM_DWT_CYCCNT;
            for (unsigned int i = 0; i < n_rotor; i++)
                encryptString((uint8_t*)&tx_str[0], tx_str.length(), &rotor[i]);
            cyccnt = ARM_DWT_CYCCNT - cyccnt;

            // count cpy cycles
            st.printf("CPU Cycles = %lu\n", cyccnt);

            return;
        }

        // change string
        if (!tx_lock && rx_str.length()) {
            tx_lock = true;
            tx_str.move(rx_str);
            type_pos = 0UL;
            tx_lock = false;
            st.printf("Received %lu bytes\n", (uint32_t)tx_str.length());
            st.printf("Address of tx_str         : 0x%08lx\n", &tx_str);
            st.printf("Address of tx_str.c_str() : 0x%08lx\n", tx_str.c_str());
            st.printf("Address of rx_str         : 0x%08lx\n", &rx_str);
            st.printf("Address of rx_str.c_str() : 0x%08lx\n", rx_str.c_str());
        }
    } else {
        rx_str += (char)c;
        st.print(c);
    }
}

/**
 * @brief wrapper function for process_char
 *
 * loops process_char on Stream::available()
 *
 * @param st stream to process
 */
void process_char_loop(Stream& st) {
    while (st.available()) {
        process_char(st, st.read());
    }
}

[@file: src/main.cpp]
#include "EXTString.h"
#include "HIDKeyboard.h"
#include "filesystem.h"
#include "text.h"
#include <Arduino.h>
#include <math.h>
#include "psramctrl.h"
#include "kbcontrol.h"
#include <ADC.h>

#define USB_LED_NUM_LOCK    (1U << 0U)
#define USB_LED_CAPS_LOCK   (1U << 1U)
#define USB_LED_SCROLL_LOCK (1U << 2U)
#define USB_LED_COMPOSE     (1U << 3U)
#define USB_LED_KANA        (1U << 4U)

Rotor rotor[1];
uint32_t n_rotor = sizeof(rotor) / sizeof(rotor[0]);
ADC* adc;
IntervalTimer timer; 
const int bufferSize = 1024; // Adjust based on your needs
volatile uint16_t adcBuffer[bufferSize]; // Use volatile for shared data in interrupt context
volatile bool adcComplete = false;

#define DELAY_WRAP(STATEMENT, DELAY)                                           \
    {                                                                          \
        uint32_t begin = ARM_DWT_CYCCNT,                                       \
                 cycles = F_CPU_ACTUAL / 1000000UL * ((uint32_t)DELAY);        \
        STATEMENT;                                                             \
        while (ARM_DWT_CYCCNT - begin < cycles)                                \
            ;                                                                  \
    }

static uint32_t ms_table[20] = {0, 100, 200, 500};

static uint16_t max_pwm = 1023;

void timerCallback() {
    // KB output LEDs
    // int analog_val = adc->adc0->analogReadContinuous();
    int analog_val = (keyboard_leds & USB_LED_CAPS_LOCK)? 1023 : 0;
    static int analog_output_val = 0;
    if (analog_output_val != analog_val) {
        analog_output_val = (analog_output_val > analog_val)? analog_output_val-1 : analog_output_val + 1;
        analogWrite(13, analog_output_val);
    }
}

/**
 * @brief Get the dip switch value for KB delay
 *
 * DIP Switch is on pins (16, 17, 18, 19, 20, 21, 22, 23)
 *
 * @return uint8_t
 */
__attribute__((optimize("O3")))
__attribute__((hot))
static uint32_t dip_val_read() {
    const uint32_t reg = GPIO6_PSR;
    uint32_t val;
    val = (reg & CORE_PIN16_BITMASK) > 0;
    val = (val << 1U) | ((reg & CORE_PIN17_BITMASK) > 0);
    val = (val << 1U) | ((reg & CORE_PIN18_BITMASK) > 0);
    val = (val << 1U) | ((reg & CORE_PIN19_BITMASK) > 0);
    val = (val << 1U) | ((reg & CORE_PIN20_BITMASK) > 0);
    val = (val << 1U) | ((reg & CORE_PIN21_BITMASK) > 0);
    val = (val << 1U) | ((reg & CORE_PIN22_BITMASK) > 0);
    val = (val << 1U) | ((reg & CORE_PIN23_BITMASK) > 0);
    return val;
}

void setup() {
    
    // set ram speed to 133 MHz
    psram_clock_speed_set(17);

    // init psram
    psram_init();

    // set screen size for mouse position functions
    usb_mouse_screen_size(1920, 1080, false);

    // initialize USB CDC
    Serial.begin(0);
    delay(1000);

    // config type pin and reset pin
    pinMode(5, INPUT_PULLUP);
    pinMode(4, INPUT_PULLUP);

    // config CAPS LOCK LED pin
    pinMode(LED_BUILTIN, OUTPUT);

    // config dip switch pin
    for (int i = 16; i < 24; i++)
        pinMode(i, INPUT_PULLDOWN);
    
    // init FS
    if (!disk_init()) Serial.printf("Error initializing FS\n");

    // Load saved file to tx_str
    int loaded = loadFileToStr("/file", tx_str);
    if (loaded >= 0) {
        Serial.printf("Loaded %lu bytes\n", loaded);
    } else if (loaded == -1) {
        Serial.printf("File Does Not Exist!, Creating new file\n");
    } else {
        Serial.printf("File Error");
    }

    // init delay table
    for (int i = 4; i < 20; i++) {
        ms_table[i] = ms_table[i - 3] * 10;
    }

    // setup enigma machine rotor
    Entropy.Initialize();
    srand(Entropy.random());
    configRotor(&rotor[0], "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");

    pinMode(14, INPUT_PULLUP);
    pinMode(15, INPUT_PULLUP);

    // adc = new ADC();
    // adc->adc0->setAveraging(32);
    // adc->adc0->setResolution(12);
    // adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::VERY_HIGH_SPEED);
    // adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::VERY_HIGH_SPEED);
    // adc->adc0->startContinuous(A0);
    analogWriteRes(10);
    analogWriteFrequency(13, ((float)F_BUS_ACTUAL)/max_pwm);
    timer.begin(timerCallback, 1000);
}


void loop() {

    uint32_t cyccnt = ARM_DWT_CYCCNT;
    // process any input from USB CDC
    process_char_loop(Serial);

    // Keyboard report struct
    static Reports report;

    // read type pin and reset pin state
    static bool type_pin_pressed = false;
    static uint32_t type_pin_ms = 0;
    bool type_pin = (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) > 0;
    bool reset_pin = (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) > 0;

    
    static bool encrypt_pin_pressed = false;
    static bool reshuffle_pin_pressed = false;
    static uint32_t encrypt_pin_ms = 0;
    static uint32_t reshuffle_pin_ms = 0;
    bool encrypt_pin = (CORE_PIN15_PINREG & CORE_PIN15_BITMASK) > 0;
    bool reshuffle_pin = (CORE_PIN14_PINREG & CORE_PIN14_BITMASK) > 0;

    // Debounce encrypt pin
    if (!encrypt_pin && !encrypt_pin_pressed) { 
        // if type pin is pressed

        if (millis() - encrypt_pin_ms > 100) {
            // 10ms debounce

            encrypt_pin_pressed = true;
            encrypt_pin_ms = millis();
                
            uint32_t encrypt_cyccnt = ARM_DWT_CYCCNT;
            for (size_t i = 0; i < n_rotor; i++) {
                resetrotor(&rotor[i]);
                encryptString((uint8_t*)tx_str.c_str(), tx_str.length(), &rotor[i]);
            }
            encrypt_cyccnt = ARM_DWT_CYCCNT - encrypt_cyccnt;
            Serial.printf("Encrypted. Took %lu cycles\n", encrypt_cyccnt);
        }
    } else if (encrypt_pin && encrypt_pin_pressed) { 
        // if type pin is released
        if (millis() - encrypt_pin_ms > 100) {
            // 10ms debounce
            encrypt_pin_pressed = false;
            encrypt_pin_ms = millis();
        }
    }

    // Debounce encrypt pin
    if (!reshuffle_pin && !reshuffle_pin_pressed) { 
        // if type pin is pressed

        if (millis() - reshuffle_pin_ms > 100) {
            // 10ms debounce

            reshuffle_pin_pressed = true;
            reshuffle_pin_ms = millis();
            srand(Entropy.random());
            // reshuffle rotor
            uint32_t reshuffle_cyccnt = ARM_DWT_CYCCNT;
            for (size_t i = 0; i < n_rotor; i++)
                configRotor(&rotor[i], (const char*)rotor[i].ttb_out);
            reshuffle_cyccnt = ARM_DWT_CYCCNT - reshuffle_cyccnt;
            Serial.printf("Reshuffled. Took %lu cycles\n", reshuffle_cyccnt);
        }
    } else if (reshuffle_pin && reshuffle_pin_pressed) { 
        // if type pin is released
        if (millis() - reshuffle_pin_ms > 100) {
            // 10ms debounce
            reshuffle_pin_pressed = false;
            reshuffle_pin_ms = millis();
        }
    }



    // reset type pos when reset pin is pressed, but type pin isnt
    type_pos = (!reset_pin && !type_pin_pressed) ? 0 : type_pos;

    // digitalWriteFast(LED_BUILTIN, keyboard_leds & USB_LED_CAPS_LOCK);

    // Debounce
    if (!type_pin && !type_pin_pressed) { 
        // if type pin is pressed

        if (millis() - type_pin_ms > 10) {
            // 10ms debounce

            type_pin_pressed = true;
            type_pin_ms = millis();
            if (type_pos < tx_str.length()) {
                DELAY_WRAP(
                    report.press(tx_str[type_pos++]); 
                    report.sendKeyReport();
                , kb_delay);
            }
        }
    } else if (type_pin && type_pin_pressed) { 
        // if type pin is released

        if (millis() - type_pin_ms > 10) {
            // 10ms debounce

            type_pin_pressed = false;
            type_pin_ms = millis();

            // release the keys
            DELAY_WRAP(
                report.releaseAll(); 
                report.sendKeyReport();
            , kb_delay);

            // reset type pos if reached end of text
            if (type_pos == tx_str.length()) type_pos = 0;
        }
    } else if (!type_pin && type_pin_pressed && (millis() - type_pin_ms >= 500)) { 
        // autotype if key is pressed for longer than 500ms

        // release previously pressed key
        static bool clear_report = true;
        if (clear_report || type_pos < tx_str.length()) {
            DELAY_WRAP(
                report.releaseAll(); 
                report.sendKeyReport();
            , kb_delay);
            clear_report = false;
        }

        // press key
        if (type_pos < tx_str.length()) {
            DELAY_WRAP(report.press(tx_str[type_pos++]); report.sendKeyReport();
                       , kb_delay);
            clear_report = true;
        }

        // continuous mode: reset type pos when autotyping has reached end of the text
        if (!reset_pin && (type_pos == tx_str.length())) type_pos = 0;
    }

    // KB delay from DIP switch state
    static uint32_t dip_ms = 0;
    static uint16_t dip_last = 0x100U;
    uint16_t dip_val = dip_val_read();
    
    cyccnt = ARM_DWT_CYCCNT - cyccnt;

    // 20ms debounce
    if (dip_val != dip_last && (millis() - dip_ms > 20)) {
        dip_last = dip_val;
        dip_ms = millis();

        // get delay value from delay table
        kb_delay = ms_table[(dip_val & 0x0f) > 12 ? 12 : (dip_val & 0x0f)];

        // log
        Serial.printf("Delay: %lu, Report Rate: %lu Hz, CYCCNT: %lu\n", kb_delay,
                      (1000000UL / (kb_delay > 125U ? kb_delay : 125U)), cyccnt);
        memory_test(Serial);
    }

    // cap all ms difference at 1000ms (prevent overflow)
    dip_ms = millis() - dip_ms > 1000 ? 
                millis() - 1000 : dip_ms;

    type_pin_ms = millis() - type_pin_ms > 1000 ? 
                    millis() - 1000 : type_pin_ms;
}
[@file: src/psramctrl.cpp]
#include "psramctrl.h"

static EXTMEM uint8_t extmem_pool[EXTMEM_SIZE];

/**
 * @brief RAM speed data
 *
 */

float clock_source(int i) {
    float clocks[] = {
        (float)(24 * 22 * 18) / ((CCM_ANALOG_PFD_528 >> 16) & 0x3fU),
        (float)(24 * 20 * 18) / ((CCM_ANALOG_PFD_480 >> 0) & 0x3fU),
        (float)(24 * 20 * 18) / ((CCM_ANALOG_PFD_480 >> 8) & 0x3fU),
        (float)(24 * 22)
    };
    return clocks[i];
}

std::vector<clock_info> ram_clock_sel_psc = {
    {49.5      , ((7UL << 29UL) | (0UL << 8UL))}, // 0.  
    {56.57143  , ((6UL << 29UL) | (0UL << 8UL))}, // 1.  
    {66.0      , ((5UL << 29UL) | (0UL << 8UL))}, // 2.  
    {66.0      , ((7UL << 29UL) | (3UL << 8UL))}, // 3.  
    {75.428574 , ((6UL << 29UL) | (3UL << 8UL))}, // 4.  
    {79.199997 , ((4UL << 29UL) | (0UL << 8UL))}, // 5.  
    {83.077499 , ((7UL << 29UL) | (2UL << 8UL))}, // 6.  
    {88.0      , ((5UL << 29UL) | (3UL << 8UL))}, // 7.  
    {90.0      , ((7UL << 29UL) | (1UL << 8UL))}, // 8.  
    {94.945717 , ((6UL << 29UL) | (2UL << 8UL))}, // 9.  
    {99.0      , ((3UL << 29UL) | (0UL << 8UL))}, // 10. 
    {102.85714 , ((6UL << 29UL) | (1UL << 8UL))}, // 11. 
    {105.599998, ((4UL << 29UL) | (3UL << 8UL))}, // 12. 
    {110.769997, ((5UL << 29UL) | (2UL << 8UL))}, // 13. 
    {120.0     , ((5UL << 29UL) | (1UL << 8UL))}, // 14. 
    {132.0     , ((2UL << 29UL) | (0UL << 8UL))}, // 15. 
    {132.0     , ((3UL << 29UL) | (3UL << 8UL))}, // 16. 
    {132.923996, ((4UL << 29UL) | (2UL << 8UL))}, // 17. 
    {144.0     , ((4UL << 29UL) | (1UL << 8UL))}, // 18. 
    {166.154999, ((3UL << 29UL) | (2UL << 8UL))}, // 19. 
    {176.0     , ((2UL << 29UL) | (3UL << 8UL))}, // 20. 
    {180.0     , ((3UL << 29UL) | (1UL << 8UL))}, // 21. 
    {198.0     , ((1UL << 29UL) | (0UL << 8UL))}, // 22. 
    {221.539993, ((2UL << 29UL) | (2UL << 8UL))}, // 23. 
    {240.0     , ((2UL << 29UL) | (1UL << 8UL))}, // 24. 
    {264.0     , ((1UL << 29UL) | (3UL << 8UL))}, // 25. 
    {332.309998, ((1UL << 29UL) | (2UL << 8UL))}, // 26. 
    {360.0     , ((1UL << 29UL) | (1UL << 8UL))}, // 27. 
    {396.0     , ((0UL << 29UL) | (0UL << 8UL))}, // 28. 
    {528.0     , ((0UL << 29UL) | (3UL << 8UL))}, // 29. 
    {664.619995, ((0UL << 29UL) | (2UL << 8UL))}, // 30. 
    {720.0     , ((0UL << 29UL) | (1UL << 8UL))}, // 31. 
};

// const uint32_t ram_clock_sel_psc_size =
//     ram_clock_sel_psc.size();//sizeof(ram_clock_sel_psc) / sizeof(ram_clock_sel_psc[0]);

static void ram_clock_sel_psc_refresh() {
    ram_clock_sel_psc.clear();
    for (uint32_t clk_src = 0; clk_src < 4; clk_src++) {
        for (uint32_t psc = 0; psc < 8; psc++) {
            float frq = clock_source(clk_src)/(psc + 1);
            uint32_t cbcmr_mask = (psc << 29U) | (clk_src << 8U);
            ram_clock_sel_psc.push_back({frq, cbcmr_mask});
        }
    }
    std::sort(ram_clock_sel_psc.begin(), ram_clock_sel_psc.end(), 
            [](clock_info& a, clock_info& b) {return b.frq > a.frq;});
}

int psram_init() {
    // set default psram pool
    ram_clock_sel_psc_refresh();
    return sm_set_default_pool(extmem_pool, EXTMEM_SIZE, true, nullptr);
}


void psram_clock_speed_set(uint16_t index) {
    ram_clock_sel_psc_refresh();
    index = (index < ram_clock_sel_psc.size())?
            index : ram_clock_sel_psc.size() - 1;
    CCM_CBCMR = (CCM_CBCMR & ~CBCMR_BIT_MASK) |
                    ram_clock_sel_psc[index].mask;
}

void print_ram_speeds(Stream& st) {
    ram_clock_sel_psc_refresh();
    for (uint32_t i = 0; i < ram_clock_sel_psc.size(); i++) {
        st.printf("%02d. (%dU << 29U) | (%dUL << 8U), frq = %f\n", i,
                    (ram_clock_sel_psc[i].mask >> 29U) & 7U, 
                    (ram_clock_sel_psc[i].mask >> 8U) & 7U, 
                    ram_clock_sel_psc[i].frq);
    }
}

float psram_clock_speed_get() {
    ram_clock_sel_psc_refresh();
    return (clock_source((CCM_CBCMR >> 8) & 3) /
            (float)(((CCM_CBCMR >> 29) & 7) + 1));
}
[@file: src/text.c]
unsigned char txt[] = "#include <Arduino.h>\r\n#include \"text.h\"\r\n#include \"HIDKeyboard.h\"\r\n#include <usb_keyboard.h>\r\n\r\n#define USB_LED_NUM_LOCK 0\r\n#define USB_LED_CAPS_LOCK 1\r\n#define USB_LED_SCROLL_LOCK 2\r\n#define USB_LED_COMPOSE 3\r\n#define USB_LED_KANA 4\r\n\r\nextern int usb_keyboard_transmit(int endpoint, const uint8_t *data, uint32_t len);\r\nstatic Reports report;\r\n\r\nvoid setup() {\r\n    // put your setup code here, to run once:\r\n    Keyboard.begin();\r\n    pinMode(5, INPUT_PULLUP);\r\n    pinMode(LED_BUILTIN, OUTPUT);\r\n}\r\n\r\nvoid loop() {\r\n    static uint32_t ms = 0;\r\n    static uint32_t i = 0;\r\n    static bool pressed = false;\r\n    bool pin_now = (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) > 0;\r\n    digitalWriteFast(LED_BUILTIN, keyboard_leds & 0x02U);\r\n    if (!pin_now && !pressed) {\r\n        // char tmpp[] = \"1234567890-=qwertyuiop[]\\\\asdfghjkl;\'zxcvbnm,./\\b\\n\\t\";\r\n        // min time before press\r\n        if (millis() - ms > 10) {\r\n            // report.pressMulti((uint8_t*)\"abcdefghijklmnopqrstuvwxyz1234567890-=[]\\\\;\'\\n,./`\\b\\t \" STR_CAPS_LOCK STR_DELETE STR_PAGE_UP STR_PAGE_DOWN STR_NUM_LOCK);\r\n            if (i < size_txt) {\r\n                report.press(txt[i++]);\r\n                report.sendKeyReport();\r\n            }\r\n            pressed = true;\r\n            ms = millis();\r\n        }\r\n    } else if (pin_now && pressed) {\r\n        // release min time\r\n        if (millis() - ms > 10) {\r\n            report.releaseAll();\r\n            report.sendKeyReport();\r\n            if (i == size_txt) i = 0;\r\n            pressed = false;\r\n            ms = millis();\r\n        }\r\n    } else if (!pin_now && pressed && (millis() - ms >= 500)) {\r\n        static bool clear = false;\r\n        if (i < size_txt) {\r\n            report.releaseAll();\r\n            report.sendKeyReport();\r\n            report.press(txt[i++]);\r\n            report.sendKeyReport();\r\n            clear = true;\r\n        } else if (clear) {\r\n            report.releaseAll();\r\n            report.sendKeyReport();\r\n            clear = false;\r\n        }\r\n    }\r\n    ms = millis() - ms > 1000? millis() - 1000: ms;\r\n}"; unsigned long long size_txt = sizeof(txt) - 1;
[@file: test/README]

This directory is intended for PlatformIO Test Runner and project tests.

Unit Testing is a software testing method by which individual units of
source code, sets of one or more MCU program modules together with associated
control data, usage procedures, and operating procedures, are tested to
determine whether they are fit for use. Unit testing finds problems early
in the development cycle.

More information about PlatformIO Unit Testing:
- https://docs.platformio.org/en/latest/advanced/unit-testing/index.html

[@file: to_replace/memory_test.cpp]
#include <Arduino.h>
uint32_t rTime;
uint32_t rTCnt = 0;
extern "C" uint8_t external_psram_size;

bool memory_ok = false;
uint32_t *memory_begin, *memory_end;

bool check_fixed_pattern(uint32_t pattern);
bool check_lfsr_pattern(uint32_t seed);

void setup() {
    while (!Serial)
        ; // wait
    pinMode(13, OUTPUT);
    uint8_t size = external_psram_size;
    Serial.printf("EXTMEM Memory Test, %d Mbyte\n", size);
    if (size == 0) return;
    const float clocks[4] = {396.0f, 720.0f, 664.62f, 528.0f};
    CCM_CBCMR = (CCM_CBCMR & ~(7UL << 29UL) & ~(3UL << 8UL)) | (3UL << 29UL) |
                (1UL << 8UL);
    float frequency =
        clocks[(CCM_CBCMR >> 8) & 3] / (float)(((CCM_CBCMR >> 29) & 7) + 1);
    Serial.printf(" CCM_CBCMR=%08X (%.1f MHz)\n", CCM_CBCMR, frequency);
    memory_begin = (uint32_t*)(0x70000000);
    memory_end = (uint32_t*)(0x70000000 + size * 1048576);
    elapsedMillis msec = 0;
    if (!check_fixed_pattern(0x5A698421)) return;
    if (!check_lfsr_pattern(2976674124ul)) return;
    if (!check_lfsr_pattern(1438200953ul)) return;
    if (!check_lfsr_pattern(3413783263ul)) return;
    if (!check_lfsr_pattern(1900517911ul)) return;
    if (!check_lfsr_pattern(1227909400ul)) return;
    if (!check_lfsr_pattern(276562754ul)) return;
    if (!check_lfsr_pattern(146878114ul)) return;
    if (!check_lfsr_pattern(615545407ul)) return;
    if (!check_lfsr_pattern(110497896ul)) return;
    if (!check_lfsr_pattern(74539250ul)) return;
    if (!check_lfsr_pattern(4197336575ul)) return;
    if (!check_lfsr_pattern(2280382233ul)) return;
    if (!check_lfsr_pattern(542894183ul)) return;
    if (!check_lfsr_pattern(3978544245ul)) return;
    if (!check_lfsr_pattern(2315909796ul)) return;
    if (!check_lfsr_pattern(3736286001ul)) return;
    if (!check_lfsr_pattern(2876690683ul)) return;
    if (!check_lfsr_pattern(215559886ul)) return;
    if (!check_lfsr_pattern(539179291ul)) return;
    if (!check_lfsr_pattern(537678650ul)) return;
    if (!check_lfsr_pattern(4001405270ul)) return;
    if (!check_lfsr_pattern(2169216599ul)) return;
    if (!check_lfsr_pattern(4036891097ul)) return;
    if (!check_lfsr_pattern(1535452389ul)) return;
    if (!check_lfsr_pattern(2959727213ul)) return;
    if (!check_lfsr_pattern(4219363395ul)) return;
    if (!check_lfsr_pattern(1036929753ul)) return;
    if (!check_lfsr_pattern(2125248865ul)) return;
    if (!check_lfsr_pattern(3177905864ul)) return;
    if (!check_lfsr_pattern(2399307098ul)) return;
    if (!check_lfsr_pattern(3847634607ul)) return;
    if (!check_lfsr_pattern(27467969ul)) return;
    if (!check_lfsr_pattern(520563506ul)) return;
    if (!check_lfsr_pattern(381313790ul)) return;
    if (!check_lfsr_pattern(4174769276ul)) return;
    if (!check_lfsr_pattern(3932189449ul)) return;
    if (!check_lfsr_pattern(4079717394ul)) return;
    if (!check_lfsr_pattern(868357076ul)) return;
    if (!check_lfsr_pattern(2474062993ul)) return;
    if (!check_lfsr_pattern(1502682190ul)) return;
    if (!check_lfsr_pattern(2471230478ul)) return;
    if (!check_lfsr_pattern(85016565ul)) return;
    if (!check_lfsr_pattern(1427530695ul)) return;
    if (!check_lfsr_pattern(1100533073ul)) return;
    if (!check_fixed_pattern(0x55555555)) return;
    if (!check_fixed_pattern(0x33333333)) return;
    if (!check_fixed_pattern(0x0F0F0F0F)) return;
    if (!check_fixed_pattern(0x00FF00FF)) return;
    if (!check_fixed_pattern(0x0000FFFF)) return;
    if (!check_fixed_pattern(0xAAAAAAAA)) return;
    if (!check_fixed_pattern(0xCCCCCCCC)) return;
    if (!check_fixed_pattern(0xF0F0F0F0)) return;
    if (!check_fixed_pattern(0xFF00FF00)) return;
    if (!check_fixed_pattern(0xFFFF0000)) return;
    if (!check_fixed_pattern(0xFFFFFFFF)) return;
    if (!check_fixed_pattern(0x00000000)) return;
    Serial.printf(" test ran for %.2f seconds\n", (float)msec / 1000.0f);
    Serial.printf(" %d MB's test ran at %.2f MB/sec overall\n",
                  2 * rTCnt * external_psram_size,
                  2 * rTCnt * external_psram_size * 1024.0 / (float)msec);
    Serial.println("All memory tests passed :-)");
    memory_ok = true;
}

bool fail_message(volatile uint32_t* location, uint32_t actual,
                  uint32_t expected) {
    Serial.printf(" Error at %08X, read %08X but expected %08X\n",
                  (uint32_t)location, actual, expected);
    return false;
}

// fill the entire RAM with a fixed pattern, then check it
bool check_fixed_pattern(uint32_t pattern) {
    volatile uint32_t* p;
    Serial.printf("testing with fixed pattern %08X\t", pattern);
    rTime = micros();
    for (p = memory_begin; p < memory_end; p++) {
        *p = pattern;
    }
    rTime = micros() - rTime;
    Serial.printf("\tfill us:%d MB/s:%.2f\t", rTime,
                  external_psram_size * 1024 * 1024.0 / rTime);
    arm_dcache_flush_delete((void*)memory_begin,
                            (uint32_t)memory_end - (uint32_t)memory_begin);
    rTime = micros();
    for (p = memory_begin; p < memory_end; p++) {
        uint32_t actual = *p;
        if (actual != pattern) return fail_message(p, actual, pattern);
    }
    rTime = micros() - rTime;
    Serial.printf("\ttest us:%d MB/s:%.2f\n", rTime,
                  external_psram_size * 1024 * 1024.0 / rTime);
    rTCnt++;
    return true;
}

// fill the entire RAM with a pseudo-random sequence, then check it
bool check_lfsr_pattern(uint32_t seed) {
    volatile uint32_t* p;
    uint32_t reg;

    Serial.printf("testing with pseudo-random sequence, seed=%u\t", seed);
    reg = seed;
    uint32_t rTime;
    rTime = micros();
    for (p = memory_begin; p < memory_end; p++) {
        *p = reg;
        for (int i = 0; i < 3; i++) {
            if (reg & 1) {
                reg >>= 1;
                reg ^= 0x7A5BC2E3;
            } else {
                reg >>= 1;
            }
        }
    }
    rTime = micros() - rTime;
    Serial.printf("\tfill us:%d MB/s:%.2f\t", rTime,
                  external_psram_size * 1024 * 1024.0 / rTime);
    arm_dcache_flush_delete((void*)memory_begin,
                            (uint32_t)memory_end - (uint32_t)memory_begin);
    reg = seed;
    rTime = micros();
    for (p = memory_begin; p < memory_end; p++) {
        uint32_t actual = *p;
        if (actual != reg) return fail_message(p, actual, reg);
        // Serial.printf(" reg=%08X\n", reg);
        for (int i = 0; i < 3; i++) {
            if (reg & 1) {
                reg >>= 1;
                reg ^= 0x7A5BC2E3;
            } else {
                reg >>= 1;
            }
        }
    }
    rTime = micros() - rTime;
    Serial.printf("\ttest us:%d MB/s:%.2f\n", rTime,
                  external_psram_size * 1024 * 1024.0 / rTime);
    rTCnt++;
    return true;
}

void loop() {
    digitalWrite(13, HIGH);
    delay(100);
    if (!memory_ok) digitalWrite(13, LOW); // rapid blink if any test fails
    delay(100);
}
[@file: to_replace/usb_desc.c]
/* Teensyduino Core Library
 * http://www.pjrc.com/teensy/
 * Copyright (c) 2019 PJRC.COM, LLC.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * 2. If the Software is incorporated into a build system that allows
 * selection among a list of target devices, then similar target
 * devices manufactured by PJRC.COM must be included in the list of
 * target devices and selectable in the same manner.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

//#if F_CPU >= 20000000

#define USB_DESC_LIST_DEFINE
#include "usb_desc.h"
#ifdef NUM_ENDPOINTS
#include "usb_names.h"
#include "imxrt.h"
#include "avr_functions.h"
#include "avr/pgmspace.h"

// At very slow CPU speeds, the OCRAM just isn't fast enough for
// USB to work reliably.  But the precious/limited DTCM is.  So
// as an ugly workaround, undefine DMAMEM so all buffers which
// would normally be allocated in OCRAM are placed in DTCM.
#if defined(F_CPU) && F_CPU < 30000000
#undef DMAMEM
#endif

// USB Descriptors are binary data which the USB host reads to
// automatically detect a USB device's capabilities.  The format
// and meaning of every field is documented in numerous USB
// standards.  When working with USB descriptors, despite the
// complexity of the standards and poor writing quality in many
// of those documents, remember descriptors are nothing more
// than constant binary data that tells the USB host what the
// device can do.  Computers will load drivers based on this data.
// Those drivers then communicate on the endpoints specified by
// the descriptors.

// To configure a new combination of interfaces or make minor
// changes to existing configuration (eg, change the name or ID
// numbers), usually you would edit "usb_desc.h".  This file
// is meant to be configured by the header, so generally it is
// only edited to add completely new USB interfaces or features.



// **************************************************************
//   USB Device
// **************************************************************

#define LSB(n) ((n) & 255)
#define MSB(n) (((n) >> 8) & 255)

#ifdef CDC_IAD_DESCRIPTOR
#ifndef DEVICE_CLASS
#define DEVICE_CLASS 0xEF
#endif
#ifndef DEVICE_SUBCLASS
#define DEVICE_SUBCLASS 0x02
#endif
#ifndef DEVICE_PROTOCOL
#define DEVICE_PROTOCOL 0x01
#endif
#endif


// USB Device Descriptor.  The USB host reads this first, to learn
// what type of device is connected.
static uint8_t device_descriptor[] = {
        18,                                     // bLength
        1,                                      // bDescriptorType
        0x00, 0x02,                             // bcdUSB
#ifdef DEVICE_CLASS
        DEVICE_CLASS,                           // bDeviceClass
#else
    0,
#endif
#ifdef DEVICE_SUBCLASS
        DEVICE_SUBCLASS,                        // bDeviceSubClass
#else
    0,
#endif
#ifdef DEVICE_PROTOCOL
        DEVICE_PROTOCOL,                        // bDeviceProtocol
#else
    0,
#endif
        EP0_SIZE,                               // bMaxPacketSize0
        LSB(VENDOR_ID), MSB(VENDOR_ID),         // idVendor
        LSB(PRODUCT_ID), MSB(PRODUCT_ID),       // idProduct
#ifdef BCD_DEVICE
    LSB(BCD_DEVICE), MSB(BCD_DEVICE),       // bcdDevice
#else
  // For USB types that don't explicitly define BCD_DEVICE,
  // use the minor version number to help teensy_ports
  // identify which Teensy model is used.
  #if defined(__IMXRT1062__) && defined(ARDUINO_TEENSY40)
        0x79, 0x02, // Teensy 4.0
  #elif defined(__IMXRT1062__) && defined(ARDUINO_TEENSY41)
        0x80, 0x02, // Teensy 4.1
  #elif defined(__IMXRT1062__) && defined(ARDUINO_TEENSY_MICROMOD)
        0x81, 0x02, // Teensy MicroMod
  #else
        0x00, 0x02,
  #endif
#endif
        1,                                      // iManufacturer
        2,                                      // iProduct
        3,                                      // iSerialNumber
        1                                       // bNumConfigurations
};

PROGMEM static const uint8_t qualifier_descriptor[] = {    // 9.6.2 Device_Qualifier, page 264
    10,                    // bLength
    6,                    // bDescriptorType
    0x00, 0x02,                // bcdUSB
#ifdef DEVICE_CLASS
        DEVICE_CLASS,                           // bDeviceClass
#else
    0,
#endif
#ifdef DEVICE_SUBCLASS
        DEVICE_SUBCLASS,                        // bDeviceSubClass
#else
    0,
#endif
#ifdef DEVICE_PROTOCOL
        DEVICE_PROTOCOL,                        // bDeviceProtocol
#else
    0,
#endif
        EP0_SIZE,                               // bMaxPacketSize0
        1,                    // bNumConfigurations
        0                                       // bReserved
};

// These descriptors must NOT be "const", because the USB DMA
// has trouble accessing flash memory with enough bandwidth
// while the processor is executing from flash.



// **************************************************************
//   HID Report Descriptors
// **************************************************************

// Each HID interface needs a special report descriptor that tells
// the meaning and format of the data.

#ifdef KEYBOARD_INTERFACE
// Keyboard Protocol 1, HID 1.11 spec, Appendix B, page 59-60
static uint8_t keyboard_report_desc[] = {
        0x05, 0x01,                     // Usage Page (Generic Desktop),
        0x09, 0x06,                     // Usage (Keyboard),
        0xA1, 0x01,                     // Collection (Application),
        0x75, 0x01,                     //   Report Size (1),
        0x95, 0x08,                     //   Report Count (8),
        0x05, 0x07,                     //   Usage Page (Key Codes),
        0x19, 0xE0,                     //   Usage Minimum (224),
        0x29, 0xE7,                     //   Usage Maximum (231),
        0x15, 0x00,                     //   Logical Minimum (0),
        0x25, 0x01,                     //   Logical Maximum (1),
        0x81, 0x02,                     //   Input (Data, Variable, Absolute), ;Modifier keys
        0x95, 0x01,                     //   Report Count (1),
        0x75, 0x08,                     //   Report Size (8),
        0x81, 0x03,                     //   Input (Constant),          ;Reserved byte
        0x95, 0x05,                     //   Report Count (5),
        0x75, 0x01,                     //   Report Size (1),
        0x05, 0x08,                     //   Usage Page (LEDs),
        0x19, 0x01,                     //   Usage Minimum (1),
        0x29, 0x05,                     //   Usage Maximum (5),
        0x91, 0x02,                     //   Output (Data, Variable, Absolute), ;LED report
        0x95, 0x01,                     //   Report Count (1),
        0x75, 0x03,                     //   Report Size (3),
        0x91, 0x03,                     //   Output (Constant),         ;LED report padding
        0x95, KEYBOARD_SIZE-2,          //   Report Count (62),
        0x75, 0x08,                     //   Report Size (8),
        0x15, 0x00,                     //   Logical Minimum (0),
        0x25, 0x7F,                     //   Logical Maximum(104),
        0x05, 0x07,                     //   Usage Page (Key Codes),
        0x19, 0x00,                     //   Usage Minimum (0),
        0x29, 0x7F,                     //   Usage Maximum (104),
        0x81, 0x00,                     //   Input (Data, Array),       ;Normal keys
        0xC0                            // End Collection
};
#endif

#ifdef KEYMEDIA_INTERFACE
static uint8_t keymedia_report_desc[] = {
        0x05, 0x0C,                     // Usage Page (Consumer)
        0x09, 0x01,                     // Usage (Consumer Controls)
        0xA1, 0x01,                     // Collection (Application)
        0x75, 0x0A,                     //   Report Size (10)
        0x95, 0x04,                     //   Report Count (4)
        0x19, 0x00,                     //   Usage Minimum (0)
        0x2A, 0x9C, 0x02,               //   Usage Maximum (0x29C)
        0x15, 0x00,                     //   Logical Minimum (0)
        0x26, 0x9C, 0x02,               //   Logical Maximum (0x29C)
        0x81, 0x00,                     //   Input (Data, Array)
        0x05, 0x01,                     //   Usage Page (Generic Desktop)
        0x75, 0x08,                     //   Report Size (8)
        0x95, 0x03,                     //   Report Count (3)
        0x19, 0x00,                     //   Usage Minimum (0)
        0x29, 0xB7,                     //   Usage Maximum (0xB7)
        0x15, 0x00,                     //   Logical Minimum (0)
        0x26, 0xB7, 0x00,               //   Logical Maximum (0xB7)
        0x81, 0x00,                     //   Input (Data, Array)
        0xC0                            // End Collection
};
#endif

#ifdef MOUSE_INTERFACE
// Mouse Protocol 1, HID 1.11 spec, Appendix B, page 59-60, with wheel extension
static uint8_t mouse_report_desc[] = {
        0x05, 0x01,                     // Usage Page (Generic Desktop)
        0x09, 0x02,                     // Usage (Mouse)
        0xA1, 0x01,                     // Collection (Application)
        0x85, 0x01,                     //   REPORT_ID (1)
        0x05, 0x09,                     //   Usage Page (Button)
        0x19, 0x01,                     //   Usage Minimum (Button #1)
        0x29, 0x08,                     //   Usage Maximum (Button #8)
        0x15, 0x00,                     //   Logical Minimum (0)
        0x25, 0x01,                     //   Logical Maximum (1)
        0x95, 0x08,                     //   Report Count (8)
        0x75, 0x01,                     //   Report Size (1)
        0x81, 0x02,                     //   Input (Data, Variable, Absolute)
        0x05, 0x01,                     //   Usage Page (Generic Desktop)
        0x09, 0x30,                     //   Usage (X)
        0x09, 0x31,                     //   Usage (Y)
        0x09, 0x38,                     //   Usage (Wheel)
        0x15, 0x81,                     //   Logical Minimum (-127)
        0x25, 0x7F,                     //   Logical Maximum (127)
        0x75, 0x08,                     //   Report Size (8),
        0x95, 0x03,                     //   Report Count (3),
        0x81, 0x06,                     //   Input (Data, Variable, Relative)
        0x05, 0x0C,                     //   Usage Page (Consumer)
        0x0A, 0x38, 0x02,               //   Usage (AC Pan)
        0x15, 0x81,                     //   Logical Minimum (-127)
        0x25, 0x7F,                     //   Logical Maximum (127)
        0x75, 0x08,                     //   Report Size (8),
        0x95, 0x01,                     //   Report Count (1),
        0x81, 0x06,                     //   Input (Data, Variable, Relative)
        0xC0,                           // End Collection
        0x05, 0x01,                     // Usage Page (Generic Desktop)
        0x09, 0x02,                     // Usage (Mouse)
        0xA1, 0x01,                     // Collection (Application)
        0x85, 0x02,                     //   REPORT_ID (2)
        0x05, 0x01,                     //   Usage Page (Generic Desktop)
        0x09, 0x30,                     //   Usage (X)
        0x09, 0x31,                     //   Usage (Y)
        0x15, 0x00,                     //   Logical Minimum (0)
        0x26, 0xFF, 0x7F,               //   Logical Maximum (32767)
        0x75, 0x10,                     //   Report Size (16),
        0x95, 0x02,                     //   Report Count (2),
        0x81, 0x02,                     //   Input (Data, Variable, Absolute)
        0xC0                            // End Collection
};
#endif

#ifdef JOYSTICK_INTERFACE
#if JOYSTICK_SIZE == 12
static uint8_t joystick_report_desc[] = {
        0x05, 0x01,                     // Usage Page (Generic Desktop)
        0x09, 0x04,                     // Usage (Joystick)
        0xA1, 0x01,                     // Collection (Application)
        0x15, 0x00,                     //   Logical Minimum (0)
        0x25, 0x01,                     //   Logical Maximum (1)
        0x75, 0x01,                     //   Report Size (1)
        0x95, 0x20,                     //   Report Count (32)
        0x05, 0x09,                     //   Usage Page (Button)
        0x19, 0x01,                     //   Usage Minimum (Button #1)
        0x29, 0x20,                     //   Usage Maximum (Button #32)
        0x81, 0x02,                     //   Input (variable,absolute)
        0x15, 0x00,                     //   Logical Minimum (0)
        0x25, 0x07,                     //   Logical Maximum (7)
        0x35, 0x00,                     //   Physical Minimum (0)
        0x46, 0x3B, 0x01,               //   Physical Maximum (315)
        0x75, 0x04,                     //   Report Size (4)
        0x95, 0x01,                     //   Report Count (1)
        0x65, 0x14,                     //   Unit (20)
        0x05, 0x01,                     //   Usage Page (Generic Desktop)
        0x09, 0x39,                     //   Usage (Hat switch)
        0x81, 0x42,                     //   Input (variable,absolute,null_state)
        0x05, 0x01,                     //   Usage Page (Generic Desktop)
        0x09, 0x01,                     //   Usage (Pointer)
        0xA1, 0x00,                     //   Collection ()
        0x15, 0x00,                     //     Logical Minimum (0)
        0x26, 0xFF, 0x03,               //     Logical Maximum (1023)
        0x75, 0x0A,                     //     Report Size (10)
        0x95, 0x04,                     //     Report Count (4)
        0x09, 0x30,                     //     Usage (X)
        0x09, 0x31,                     //     Usage (Y)
        0x09, 0x32,                     //     Usage (Z)
        0x09, 0x35,                     //     Usage (Rz)
        0x81, 0x02,                     //     Input (variable,absolute)
        0xC0,                           //   End Collection
        0x15, 0x00,                     //   Logical Minimum (0)
        0x26, 0xFF, 0x03,               //   Logical Maximum (1023)
        0x75, 0x0A,                     //   Report Size (10)
        0x95, 0x02,                     //   Report Count (2)
        0x09, 0x36,                     //   Usage (Slider)
        0x09, 0x36,                     //   Usage (Slider)
        0x81, 0x02,                     //   Input (variable,absolute)
        0xC0                            // End Collection
};
#elif JOYSTICK_SIZE == 64
// extreme joystick  (to use this, edit JOYSTICK_SIZE to 64 in usb_desc.h)
//  128 buttons   16
//    6 axes      12
//   17 sliders   34
//    4 pov        2
static uint8_t joystick_report_desc[] = {
        0x05, 0x01,                     // Usage Page (Generic Desktop)
        0x09, 0x04,                     // Usage (Joystick)
        0xA1, 0x01,                     // Collection (Application)
        0x15, 0x00,                     // Logical Minimum (0)
        0x25, 0x01,                     // Logical Maximum (1)
        0x75, 0x01,                     // Report Size (1)
        0x95, 0x80,                     // Report Count (128)
        0x05, 0x09,                     // Usage Page (Button)
        0x19, 0x01,                     // Usage Minimum (Button #1)
        0x29, 0x80,                     // Usage Maximum (Button #128)
        0x81, 0x02,                     // Input (variable,absolute)
        0x05, 0x01,                     // Usage Page (Generic Desktop)
        0x09, 0x01,                     // Usage (Pointer)
        0xA1, 0x00,                     // Collection ()
        0x15, 0x00,                     // Logical Minimum (0)
        0x27, 0xFF, 0xFF, 0, 0,         // Logical Maximum (65535)
        0x75, 0x10,                     // Report Size (16)
        0x95, 23,                       // Report Count (23)
        0x09, 0x30,                     // Usage (X)
        0x09, 0x31,                     // Usage (Y)
        0x09, 0x32,                     // Usage (Z)
        0x09, 0x33,                     // Usage (Rx)
        0x09, 0x34,                     // Usage (Ry)
        0x09, 0x35,                     // Usage (Rz)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x09, 0x36,                     // Usage (Slider)
        0x81, 0x02,                     // Input (variable,absolute)
        0xC0,                           // End Collection
        0x15, 0x00,                     // Logical Minimum (0)
        0x25, 0x07,                     // Logical Maximum (7)
        0x35, 0x00,                     // Physical Minimum (0)
        0x46, 0x3B, 0x01,               // Physical Maximum (315)
        0x75, 0x04,                     // Report Size (4)
        0x95, 0x04,                     // Report Count (4)
        0x65, 0x14,                     // Unit (20)
        0x05, 0x01,                     // Usage Page (Generic Desktop)
        0x09, 0x39,                     // Usage (Hat switch)
        0x09, 0x39,                     // Usage (Hat switch)
        0x09, 0x39,                     // Usage (Hat switch)
        0x09, 0x39,                     // Usage (Hat switch)
        0x81, 0x42,                     // Input (variable,absolute,null_state)
        0xC0                            // End Collection
};
#endif // JOYSTICK_SIZE
#endif // JOYSTICK_INTERFACE

#ifdef MULTITOUCH_INTERFACE
// https://forum.pjrc.com/threads/32331-USB-HID-Touchscreen-support-needed
// https://msdn.microsoft.com/en-us/library/windows/hardware/jj151563%28v=vs.85%29.aspx
// https://msdn.microsoft.com/en-us/library/windows/hardware/jj151565%28v=vs.85%29.aspx
// https://msdn.microsoft.com/en-us/library/windows/hardware/ff553734%28v=vs.85%29.aspx
// https://msdn.microsoft.com/en-us/library/windows/hardware/jj151564%28v=vs.85%29.aspx
// download.microsoft.com/download/a/d/f/adf1347d-08dc-41a4-9084-623b1194d4b2/digitizerdrvs_touch.docx
static uint8_t multitouch_report_desc[] = {
        0x05, 0x0D,                     // Usage Page (Digitizer)
        0x09, 0x04,                     // Usage (Touch Screen)
        0xa1, 0x01,                     // Collection (Application)
        0x09, 0x22,                     //   Usage (Finger)
        0xA1, 0x02,                     //   Collection (Logical)
        0x09, 0x42,                     //     Usage (Tip Switch)
        0x15, 0x00,                     //     Logical Minimum (0)
        0x25, 0x01,                     //     Logical Maximum (1)
        0x75, 0x01,                     //     Report Size (1)
        0x95, 0x01,                     //     Report Count (1)
        0x81, 0x02,                     //     Input (variable,absolute)
        0x09, 0x51,                     //     Usage (Contact Identifier)
        0x25, 0x7F,                     //     Logical Maximum (127)
        0x75, 0x07,                     //     Report Size (7)
        0x95, 0x01,                     //     Report Count (1)
        0x81, 0x02,                     //     Input (variable,absolute)
        0x09, 0x30,                     //     Usage (Pressure)
        0x26, 0xFF, 0x00,               //     Logical Maximum (255)
        0x75, 0x08,                     //     Report Size (8)
        0x95, 0x01,                     //     Report Count (1)
        0x81, 0x02,                     //     Input (variable,absolute)
        0x05, 0x01,                     //     Usage Page (Generic Desktop)
        0x09, 0x30,                     //     Usage (X)
        0x09, 0x31,                     //     Usage (Y)
        0x26, 0xFF, 0x7F,               //     Logical Maximum (32767)
        0x65, 0x00,                     //     Unit (None)  <-- probably needs real units?
        0x75, 0x10,                     //     Report Size (16)
        0x95, 0x02,                     //     Report Count (2)
        0x81, 0x02,                     //     Input (variable,absolute)
        0xC0,                           //   End Collection
        0x05, 0x0D,                     //   Usage Page (Digitizer)
        0x27, 0xFF, 0xFF, 0, 0,         //   Logical Maximum (65535)
        0x75, 0x10,                     //   Report Size (16)
        0x95, 0x01,                     //   Report Count (1)
        0x09, 0x56,                     //   Usage (Scan Time)
        0x81, 0x02,                     //   Input (variable,absolute)
        0x09, 0x54,                     //   USAGE (Contact count)
        0x25, 0x7f,                     //   LOGICAL_MAXIMUM (127)
        0x95, 0x01,                     //   REPORT_COUNT (1)
        0x75, 0x08,                     //   REPORT_SIZE (8)
        0x81, 0x02,                     //   INPUT (Data,Var,Abs)
        0x05, 0x0D,                     //   Usage Page (Digitizers)
        0x09, 0x55,                     //   Usage (Contact Count Maximum)
        0x25, MULTITOUCH_FINGERS,       //   Logical Maximum (10)
        0x75, 0x08,                     //   Report Size (8)
        0x95, 0x01,                     //   Report Count (1)
        0xB1, 0x02,                     //   Feature (variable,absolute)
        0xC0                            // End Collection
};
#endif

#ifdef SEREMU_INTERFACE
static uint8_t seremu_report_desc[] = {
        0x06, 0xC9, 0xFF,               // Usage Page 0xFFC9 (vendor defined)
        0x09, 0x04,                     // Usage 0x04
        0xA1, 0x5C,                     // Collection 0x5C
        0x75, 0x08,                     //   report size = 8 bits (global)
        0x15, 0x00,                     //   logical minimum = 0 (global)
        0x26, 0xFF, 0x00,               //   logical maximum = 255 (global)
        0x95, SEREMU_TX_SIZE,           //   report count (global)
        0x09, 0x75,                     //   usage (local)
        0x81, 0x02,                     //   Input
        0x95, SEREMU_RX_SIZE,           //   report count (global)
        0x09, 0x76,                     //   usage (local)
        0x91, 0x02,                     //   Output
        0x95, 0x04,                     //   report count (global)
        0x09, 0x76,                     //   usage (local)
        0xB1, 0x02,                     //   Feature
        0xC0                            // end collection
};
#endif

#ifdef RAWHID_INTERFACE
static uint8_t rawhid_report_desc[] = {
        0x06, LSB(RAWHID_USAGE_PAGE), MSB(RAWHID_USAGE_PAGE),
        0x0A, LSB(RAWHID_USAGE), MSB(RAWHID_USAGE),
        0xA1, 0x01,                     // Collection 0x01
        0x75, 0x08,                     //   report size = 8 bits
        0x15, 0x00,                     //   logical minimum = 0
        0x26, 0xFF, 0x00,               //   logical maximum = 255
        0x95, RAWHID_TX_SIZE,           //   report count
        0x09, 0x01,                     //   usage
        0x81, 0x02,                     //   Input (array)
        0x95, RAWHID_RX_SIZE,           //   report count
        0x09, 0x02,                     //   usage
        0x91, 0x02,                     //   Output (array)
        0xC0                            // end collection
};
#endif

#ifdef FLIGHTSIM_INTERFACE
static uint8_t flightsim_report_desc[] = {
        0x06, 0x1C, 0xFF,               // Usage page = 0xFF1C
        0x0A, 0x39, 0xA7,               // Usage = 0xA739
        0xA1, 0x01,                     // Collection 0x01
        0x75, 0x08,                     //   report size = 8 bits
        0x15, 0x00,                     //   logical minimum = 0
        0x26, 0xFF, 0x00,               //   logical maximum = 255
        0x95, FLIGHTSIM_TX_SIZE,        //   report count
        0x09, 0x01,                     //   usage
        0x81, 0x02,                     //   Input (array)
        0x95, FLIGHTSIM_RX_SIZE,        //   report count
        0x09, 0x02,                     //   usage
        0x91, 0x02,                     //   Output (array)
        0xC0                            // end collection
};
#endif


// **************************************************************
//   USB Descriptor Sizes
// **************************************************************

// pre-compute the size and position of everything in the config descriptor
//
#define CONFIG_HEADER_DESCRIPTOR_SIZE    9

#define CDC_IAD_DESCRIPTOR_POS        CONFIG_HEADER_DESCRIPTOR_SIZE
#ifdef  CDC_IAD_DESCRIPTOR
#define CDC_IAD_DESCRIPTOR_SIZE        8
#else
#define CDC_IAD_DESCRIPTOR_SIZE        0
#endif

#define CDC_DATA_INTERFACE_DESC_POS    CDC_IAD_DESCRIPTOR_POS+CDC_IAD_DESCRIPTOR_SIZE
#ifdef  CDC_DATA_INTERFACE
#define CDC_DATA_INTERFACE_DESC_SIZE    9+5+5+4+5+7+9+7+7
#else
#define CDC_DATA_INTERFACE_DESC_SIZE    0
#endif

#define CDC2_DATA_INTERFACE_DESC_POS    CDC_DATA_INTERFACE_DESC_POS+CDC_DATA_INTERFACE_DESC_SIZE
#ifdef  CDC2_DATA_INTERFACE
#define CDC2_DATA_INTERFACE_DESC_SIZE   8 + 9+5+5+4+5+7+9+7+7
#else
#define CDC2_DATA_INTERFACE_DESC_SIZE   0
#endif

#define CDC3_DATA_INTERFACE_DESC_POS    CDC2_DATA_INTERFACE_DESC_POS+CDC2_DATA_INTERFACE_DESC_SIZE
#ifdef  CDC3_DATA_INTERFACE
#define CDC3_DATA_INTERFACE_DESC_SIZE   8 + 9+5+5+4+5+7+9+7+7
#else
#define CDC3_DATA_INTERFACE_DESC_SIZE   0
#endif

#define MIDI_INTERFACE_DESC_POS        CDC3_DATA_INTERFACE_DESC_POS+CDC3_DATA_INTERFACE_DESC_SIZE
#ifdef  MIDI_INTERFACE
  #if !defined(MIDI_NUM_CABLES) || MIDI_NUM_CABLES < 1 || MIDI_NUM_CABLES > 16
  #error "MIDI_NUM_CABLES must be defined between 1 to 16"
  #endif
#define MIDI_INTERFACE_DESC_SIZE    9+7+((6+6+9+9)*MIDI_NUM_CABLES)+(9+4+MIDI_NUM_CABLES)*2
#else
#define MIDI_INTERFACE_DESC_SIZE    0
#endif

#define KEYBOARD_INTERFACE_DESC_POS    MIDI_INTERFACE_DESC_POS+MIDI_INTERFACE_DESC_SIZE
#ifdef  KEYBOARD_INTERFACE
#define KEYBOARD_INTERFACE_DESC_SIZE    9+9+7
#define KEYBOARD_HID_DESC_OFFSET    KEYBOARD_INTERFACE_DESC_POS+9
#else
#define KEYBOARD_INTERFACE_DESC_SIZE    0
#endif

#define MOUSE_INTERFACE_DESC_POS    KEYBOARD_INTERFACE_DESC_POS+KEYBOARD_INTERFACE_DESC_SIZE
#ifdef  MOUSE_INTERFACE
#define MOUSE_INTERFACE_DESC_SIZE    9+9+7
#define MOUSE_HID_DESC_OFFSET        MOUSE_INTERFACE_DESC_POS+9
#else
#define MOUSE_INTERFACE_DESC_SIZE    0
#endif

#define RAWHID_INTERFACE_DESC_POS    MOUSE_INTERFACE_DESC_POS+MOUSE_INTERFACE_DESC_SIZE
#ifdef  RAWHID_INTERFACE
#define RAWHID_INTERFACE_DESC_SIZE    9+9+7+7
#define RAWHID_HID_DESC_OFFSET        RAWHID_INTERFACE_DESC_POS+9
#else
#define RAWHID_INTERFACE_DESC_SIZE    0
#endif

#define FLIGHTSIM_INTERFACE_DESC_POS    RAWHID_INTERFACE_DESC_POS+RAWHID_INTERFACE_DESC_SIZE
#ifdef  FLIGHTSIM_INTERFACE
#define FLIGHTSIM_INTERFACE_DESC_SIZE    9+9+7+7
#define FLIGHTSIM_HID_DESC_OFFSET    FLIGHTSIM_INTERFACE_DESC_POS+9
#else
#define FLIGHTSIM_INTERFACE_DESC_SIZE    0
#endif

#define SEREMU_INTERFACE_DESC_POS    FLIGHTSIM_INTERFACE_DESC_POS+FLIGHTSIM_INTERFACE_DESC_SIZE
#ifdef  SEREMU_INTERFACE
#define SEREMU_INTERFACE_DESC_SIZE    9+9+7+7
#define SEREMU_HID_DESC_OFFSET        SEREMU_INTERFACE_DESC_POS+9
#else
#define SEREMU_INTERFACE_DESC_SIZE    0
#endif

#define JOYSTICK_INTERFACE_DESC_POS    SEREMU_INTERFACE_DESC_POS+SEREMU_INTERFACE_DESC_SIZE
#ifdef  JOYSTICK_INTERFACE
#define JOYSTICK_INTERFACE_DESC_SIZE    9+9+7
#define JOYSTICK_HID_DESC_OFFSET    JOYSTICK_INTERFACE_DESC_POS+9
#else
#define JOYSTICK_INTERFACE_DESC_SIZE    0
#endif

#define MTP_INTERFACE_DESC_POS        JOYSTICK_INTERFACE_DESC_POS+JOYSTICK_INTERFACE_DESC_SIZE
#ifdef  MTP_INTERFACE
#define MTP_INTERFACE_DESC_SIZE        9+7+7+7
#else
#define MTP_INTERFACE_DESC_SIZE    0
#endif

#define KEYMEDIA_INTERFACE_DESC_POS    MTP_INTERFACE_DESC_POS+MTP_INTERFACE_DESC_SIZE
#ifdef  KEYMEDIA_INTERFACE
#define KEYMEDIA_INTERFACE_DESC_SIZE    9+9+7
#define KEYMEDIA_HID_DESC_OFFSET    KEYMEDIA_INTERFACE_DESC_POS+9
#else
#define KEYMEDIA_INTERFACE_DESC_SIZE    0
#endif

#define AUDIO_INTERFACE_DESC_POS    KEYMEDIA_INTERFACE_DESC_POS+KEYMEDIA_INTERFACE_DESC_SIZE
#ifdef  AUDIO_INTERFACE
#define AUDIO_INTERFACE_DESC_SIZE    8 + 9+10+12+9+12+10+9 + 9+9+7+11+9+7 + 9+9+7+11+9+7+9
#else
#define AUDIO_INTERFACE_DESC_SIZE    0
#endif

#define MULTITOUCH_INTERFACE_DESC_POS    AUDIO_INTERFACE_DESC_POS+AUDIO_INTERFACE_DESC_SIZE
#ifdef  MULTITOUCH_INTERFACE
#define MULTITOUCH_INTERFACE_DESC_SIZE    9+9+7
#define MULTITOUCH_HID_DESC_OFFSET    MULTITOUCH_INTERFACE_DESC_POS+9
#else
#define MULTITOUCH_INTERFACE_DESC_SIZE    0
#endif

#define EXPERIMENTAL_INTERFACE_DESC_POS    MULTITOUCH_INTERFACE_DESC_POS+MULTITOUCH_INTERFACE_DESC_SIZE
#ifdef  EXPERIMENTAL_INTERFACE
#define EXPERIMENTAL_INTERFACE_DESC_SIZE 9+7+7
#define EXPERIMENTAL_HID_DESC_OFFSET    MULTITOUCH_INTERFACE_DESC_POS+9
#else
#define EXPERIMENTAL_INTERFACE_DESC_SIZE 0
#endif

#define CONFIG_DESC_SIZE        EXPERIMENTAL_INTERFACE_DESC_POS+EXPERIMENTAL_INTERFACE_DESC_SIZE



// **************************************************************
//   USB Configuration
// **************************************************************

// USB Configuration Descriptor.  This huge descriptor tells all
// of the devices capabilities.

PROGMEM const uint8_t usb_config_descriptor_480[CONFIG_DESC_SIZE] = {
        // configuration descriptor, USB spec 9.6.3, page 264-266, Table 9-10
        9,                                      // bLength;
        2,                                      // bDescriptorType;
        LSB(CONFIG_DESC_SIZE),                 // wTotalLength
        MSB(CONFIG_DESC_SIZE),
        NUM_INTERFACE,                          // bNumInterfaces
        1,                                      // bConfigurationValue
        0,                                      // iConfiguration
        0xC0,                                   // bmAttributes
        50,                                     // bMaxPower

#ifdef CDC_IAD_DESCRIPTOR
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        CDC_STATUS_INTERFACE,                   // bFirstInterface
        2,                                      // bInterfaceCount
        0x02,                                   // bFunctionClass
        0x02,                                   // bFunctionSubClass
        0x01,                                   // bFunctionProtocol
        0,                                      // iFunction
#endif

#ifdef CDC_DATA_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC_STATUS_INTERFACE,            // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x02,                                   // bInterfaceClass
        0x02,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x00,                                   // bDescriptorSubtype
        0x10, 0x01,                             // bcdCDC
        // Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x01,                                   // bDescriptorSubtype
        0x01,                                   // bmCapabilities
        1,                                      // bDataInterface
        // Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC_STATUS_INTERFACE,                   // bMasterInterface
        CDC_DATA_INTERFACE,                     // bSlaveInterface0
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_ACM_ENDPOINT | 0x80,                // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        LSB(CDC_ACM_SIZE),MSB(CDC_ACM_SIZE),    // wMaxPacketSize
        5,                                      // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC_DATA_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x0A,                                   // bInterfaceClass
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_RX_ENDPOINT,                        // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_RX_SIZE_480),MSB(CDC_RX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_TX_ENDPOINT | 0x80,                 // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_TX_SIZE_480),MSB(CDC_TX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
#endif // CDC_DATA_INTERFACE

#ifdef CDC2_DATA_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        CDC2_STATUS_INTERFACE,                  // bFirstInterface
        2,                                      // bInterfaceCount
        0x02,                                   // bFunctionClass
        0x02,                                   // bFunctionSubClass
        0x01,                                   // bFunctionProtocol
        0,                                      // iFunction
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC2_STATUS_INTERFACE,                  // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x02,                                   // bInterfaceClass
        0x02,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x00,                                   // bDescriptorSubtype
        0x10, 0x01,                             // bcdCDC
        // Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x01,                                   // bDescriptorSubtype
        0x01,                                   // bmCapabilities
        1,                                      // bDataInterface
        // Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC2_STATUS_INTERFACE,                  // bMasterInterface
        CDC2_DATA_INTERFACE,                    // bSlaveInterface0
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC2_ACM_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        CDC_ACM_SIZE, 0,                        // wMaxPacketSize
        5,                                      // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC2_DATA_INTERFACE,                    // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x0A,                                   // bInterfaceClass
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC2_RX_ENDPOINT,                       // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_RX_SIZE_480),MSB(CDC_RX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC2_TX_ENDPOINT | 0x80,                // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_TX_SIZE_480),MSB(CDC_TX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
#endif // CDC2_DATA_INTERFACE

#ifdef CDC3_DATA_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        CDC3_STATUS_INTERFACE,                  // bFirstInterface
        2,                                      // bInterfaceCount
        0x02,                                   // bFunctionClass
        0x02,                                   // bFunctionSubClass
        0x01,                                   // bFunctionProtocol
        0,                                      // iFunction
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC3_STATUS_INTERFACE,                  // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x02,                                   // bInterfaceClass
        0x02,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x00,                                   // bDescriptorSubtype
        0x10, 0x01,                             // bcdCDC
        // Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x01,                                   // bDescriptorSubtype
        0x01,                                   // bmCapabilities
        1,                                      // bDataInterface
        // Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC3_STATUS_INTERFACE,                  // bMasterInterface
        CDC3_DATA_INTERFACE,                    // bSlaveInterface0
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC3_ACM_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        CDC_ACM_SIZE, 0,                        // wMaxPacketSize
        5,                                      // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC3_DATA_INTERFACE,                    // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x0A,                                   // bInterfaceClass
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC3_RX_ENDPOINT,                       // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_RX_SIZE_480),MSB(CDC_RX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC3_TX_ENDPOINT | 0x80,                // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_TX_SIZE_480),MSB(CDC_TX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
#endif // CDC3_DATA_INTERFACE

#ifdef MIDI_INTERFACE
    // configuration for 480 Mbit/sec speed
        // Standard MS Interface Descriptor,
        9,                                      // bLength
        4,                                      // bDescriptorType
        MIDI_INTERFACE,                         // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x01,                                   // bInterfaceClass (0x01 = Audio)
        0x03,                                   // bInterfaceSubClass (0x03 = MIDI)
        0x00,                                   // bInterfaceProtocol (unused for MIDI)
        0,                                      // iInterface
        // MIDI MS Interface Header, USB MIDI 6.1.2.1, page 21, Table 6-2
        7,                                      // bLength
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x01,                                   // bDescriptorSubtype = MS_HEADER
        0x00, 0x01,                             // bcdMSC = revision 01.00
    LSB(7+(6+6+9+9)*MIDI_NUM_CABLES),       // wTotalLength
    MSB(7+(6+6+9+9)*MIDI_NUM_CABLES),
        // MIDI IN Jack Descriptor, B.4.3, Table B-7 (embedded), page 40
        6,                                      // bLength
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x02,                                   // bDescriptorSubtype = MIDI_IN_JACK
        0x01,                                   // bJackType = EMBEDDED
        1,                                      // bJackID, ID = 1
        0,                                      // iJack
        // MIDI IN Jack Descriptor, B.4.3, Table B-8 (external), page 40
        6,                                      // bLength
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x02,                                   // bDescriptorSubtype = MIDI_IN_JACK
        0x02,                                   // bJackType = EXTERNAL
        2,                                      // bJackID, ID = 2
        0,                                      // iJack
        // MIDI OUT Jack Descriptor, B.4.4, Table B-9, page 41
        9,
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x03,                                   // bDescriptorSubtype = MIDI_OUT_JACK
        0x01,                                   // bJackType = EMBEDDED
        3,                                      // bJackID, ID = 3
        1,                                      // bNrInputPins = 1 pin
        2,                                      // BaSourceID(1) = 2
        1,                                      // BaSourcePin(1) = first pin
        0,                                      // iJack
        // MIDI OUT Jack Descriptor, B.4.4, Table B-10, page 41
        9,
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x03,                                   // bDescriptorSubtype = MIDI_OUT_JACK
        0x02,                                   // bJackType = EXTERNAL
        4,                                      // bJackID, ID = 4
        1,                                      // bNrInputPins = 1 pin
        1,                                      // BaSourceID(1) = 1
        1,                                      // BaSourcePin(1) = first pin
        0,                                      // iJack
  #if MIDI_NUM_CABLES >= 2
    #define MIDI_INTERFACE_JACK_PAIR(a, b, c, d) \
        6, 0x24, 0x02, 0x01, (a), 0, \
        6, 0x24, 0x02, 0x02, (b), 0, \
        9, 0x24, 0x03, 0x01, (c), 1, (b), 1, 0, \
        9, 0x24, 0x03, 0x02, (d), 1, (a), 1, 0,
    MIDI_INTERFACE_JACK_PAIR(5, 6, 7, 8)
  #endif
  #if MIDI_NUM_CABLES >= 3
    MIDI_INTERFACE_JACK_PAIR(9, 10, 11, 12)
  #endif
  #if MIDI_NUM_CABLES >= 4
    MIDI_INTERFACE_JACK_PAIR(13, 14, 15, 16)
  #endif
  #if MIDI_NUM_CABLES >= 5
    MIDI_INTERFACE_JACK_PAIR(17, 18, 19, 20)
  #endif
  #if MIDI_NUM_CABLES >= 6
    MIDI_INTERFACE_JACK_PAIR(21, 22, 23, 24)
  #endif
  #if MIDI_NUM_CABLES >= 7
    MIDI_INTERFACE_JACK_PAIR(25, 26, 27, 28)
  #endif
  #if MIDI_NUM_CABLES >= 8
    MIDI_INTERFACE_JACK_PAIR(29, 30, 31, 32)
  #endif
  #if MIDI_NUM_CABLES >= 9
    MIDI_INTERFACE_JACK_PAIR(33, 34, 35, 36)
  #endif
  #if MIDI_NUM_CABLES >= 10
    MIDI_INTERFACE_JACK_PAIR(37, 38, 39, 40)
  #endif
  #if MIDI_NUM_CABLES >= 11
    MIDI_INTERFACE_JACK_PAIR(41, 42, 43, 44)
  #endif
  #if MIDI_NUM_CABLES >= 12
    MIDI_INTERFACE_JACK_PAIR(45, 46, 47, 48)
  #endif
  #if MIDI_NUM_CABLES >= 13
    MIDI_INTERFACE_JACK_PAIR(49, 50, 51, 52)
  #endif
  #if MIDI_NUM_CABLES >= 14
    MIDI_INTERFACE_JACK_PAIR(53, 54, 55, 56)
  #endif
  #if MIDI_NUM_CABLES >= 15
    MIDI_INTERFACE_JACK_PAIR(57, 58, 59, 60)
  #endif
  #if MIDI_NUM_CABLES >= 16
    MIDI_INTERFACE_JACK_PAIR(61, 62, 63, 64)
  #endif
        // Standard Bulk OUT Endpoint Descriptor, B.5.1, Table B-11, pae 42
        9,                                      // bLength
        5,                                      // bDescriptorType = ENDPOINT
        MIDI_RX_ENDPOINT,                       // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MIDI_RX_SIZE_480),MSB(MIDI_RX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
        0,                                      // bRefresh
        0,                                      // bSynchAddress
        // Class-specific MS Bulk OUT Endpoint Descriptor, B.5.2, Table B-12, page 42
        4+MIDI_NUM_CABLES,                      // bLength
        0x25,                                   // bDescriptorSubtype = CS_ENDPOINT
        0x01,                                   // bJackType = MS_GENERAL
        MIDI_NUM_CABLES,                        // bNumEmbMIDIJack = number of jacks
        1,                                      // BaAssocJackID(1) = jack ID #1
  #if MIDI_NUM_CABLES >= 2
        5,
  #endif
  #if MIDI_NUM_CABLES >= 3
        9,
  #endif
  #if MIDI_NUM_CABLES >= 4
        13,
  #endif
  #if MIDI_NUM_CABLES >= 5
        17,
  #endif
  #if MIDI_NUM_CABLES >= 6
        21,
  #endif
  #if MIDI_NUM_CABLES >= 7
        25,
  #endif
  #if MIDI_NUM_CABLES >= 8
        29,
  #endif
  #if MIDI_NUM_CABLES >= 9
        33,
  #endif
  #if MIDI_NUM_CABLES >= 10
        37,
  #endif
  #if MIDI_NUM_CABLES >= 11
        41,
  #endif
  #if MIDI_NUM_CABLES >= 12
        45,
  #endif
  #if MIDI_NUM_CABLES >= 13
        49,
  #endif
  #if MIDI_NUM_CABLES >= 14
        53,
  #endif
  #if MIDI_NUM_CABLES >= 15
        57,
  #endif
  #if MIDI_NUM_CABLES >= 16
        61,
  #endif
        // Standard Bulk IN Endpoint Descriptor, B.5.1, Table B-11, pae 42
        9,                                      // bLength
        5,                                      // bDescriptorType = ENDPOINT
        MIDI_TX_ENDPOINT | 0x80,                // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MIDI_TX_SIZE_480),MSB(MIDI_TX_SIZE_480),// wMaxPacketSize
        0,                                      // bInterval
        0,                                      // bRefresh
        0,                                      // bSynchAddress
        // Class-specific MS Bulk IN Endpoint Descriptor, B.5.2, Table B-12, page 42
        4+MIDI_NUM_CABLES,                      // bLength
        0x25,                                   // bDescriptorSubtype = CS_ENDPOINT
        0x01,                                   // bJackType = MS_GENERAL
        MIDI_NUM_CABLES,                        // bNumEmbMIDIJack = number of jacks
        3,                                      // BaAssocJackID(1) = jack ID #3
  #if MIDI_NUM_CABLES >= 2
        7,
  #endif
  #if MIDI_NUM_CABLES >= 3
        11,
  #endif
  #if MIDI_NUM_CABLES >= 4
        15,
  #endif
  #if MIDI_NUM_CABLES >= 5
        19,
  #endif
  #if MIDI_NUM_CABLES >= 6
        23,
  #endif
  #if MIDI_NUM_CABLES >= 7
        27,
  #endif
  #if MIDI_NUM_CABLES >= 8
        31,
  #endif
  #if MIDI_NUM_CABLES >= 9
        35,
  #endif
  #if MIDI_NUM_CABLES >= 10
        39,
  #endif
  #if MIDI_NUM_CABLES >= 11
        43,
  #endif
  #if MIDI_NUM_CABLES >= 12
        47,
  #endif
  #if MIDI_NUM_CABLES >= 13
        51,
  #endif
  #if MIDI_NUM_CABLES >= 14
        55,
  #endif
  #if MIDI_NUM_CABLES >= 15
        59,
  #endif
  #if MIDI_NUM_CABLES >= 16
        63,
  #endif
#endif // MIDI_INTERFACE

#ifdef KEYBOARD_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        KEYBOARD_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x01,                                   // bInterfaceSubClass (0x01 = Boot)
        0x01,                                   // bInterfaceProtocol (0x01 = Keyboard)
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(keyboard_report_desc)),      // wDescriptorLength
        MSB(sizeof(keyboard_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        KEYBOARD_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        KEYBOARD_SIZE, 0,                       // wMaxPacketSize
        KEYBOARD_INTERVAL,                      // bInterval
#endif // KEYBOARD_INTERFACE

#ifdef MOUSE_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        MOUSE_INTERFACE,                        // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass (0x01 = Boot)
        0x00,                                   // bInterfaceProtocol (0x02 = Mouse)
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(mouse_report_desc)),         // wDescriptorLength
        MSB(sizeof(mouse_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MOUSE_ENDPOINT | 0x80,                  // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        MOUSE_SIZE, 0,                          // wMaxPacketSize
        MOUSE_INTERVAL,                         // bInterval
#endif // MOUSE_INTERFACE

#ifdef RAWHID_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        RAWHID_INTERFACE,                       // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(rawhid_report_desc)),        // wDescriptorLength
        MSB(sizeof(rawhid_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        RAWHID_TX_ENDPOINT | 0x80,              // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        RAWHID_TX_SIZE, 0,                      // wMaxPacketSize
        RAWHID_TX_INTERVAL,                     // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        RAWHID_RX_ENDPOINT,                     // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        RAWHID_RX_SIZE, 0,                      // wMaxPacketSize
        RAWHID_RX_INTERVAL,            // bInterval
#endif // RAWHID_INTERFACE

#ifdef FLIGHTSIM_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        FLIGHTSIM_INTERFACE,                    // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(flightsim_report_desc)),     // wDescriptorLength
        MSB(sizeof(flightsim_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        FLIGHTSIM_TX_ENDPOINT | 0x80,           // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        FLIGHTSIM_TX_SIZE, 0,                   // wMaxPacketSize
        FLIGHTSIM_TX_INTERVAL,                  // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        FLIGHTSIM_RX_ENDPOINT,                  // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        FLIGHTSIM_RX_SIZE, 0,                   // wMaxPacketSize
        FLIGHTSIM_RX_INTERVAL,            // bInterval
#endif // FLIGHTSIM_INTERFACE

#ifdef SEREMU_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        SEREMU_INTERFACE,                       // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(seremu_report_desc)),        // wDescriptorLength
        MSB(sizeof(seremu_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        SEREMU_TX_ENDPOINT | 0x80,              // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        SEREMU_TX_SIZE, 0,                      // wMaxPacketSize
        SEREMU_TX_INTERVAL,                     // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        SEREMU_RX_ENDPOINT,                     // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        SEREMU_RX_SIZE, 0,                      // wMaxPacketSize
        SEREMU_RX_INTERVAL,            // bInterval
#endif // SEREMU_INTERFACE

#ifdef JOYSTICK_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        JOYSTICK_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(joystick_report_desc)),      // wDescriptorLength
        MSB(sizeof(joystick_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        JOYSTICK_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        JOYSTICK_SIZE, 0,                       // wMaxPacketSize
        JOYSTICK_INTERVAL,                      // bInterval
#endif // JOYSTICK_INTERFACE

#ifdef MTP_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        MTP_INTERFACE,                          // bInterfaceNumber
        0,                                      // bAlternateSetting
        3,                                      // bNumEndpoints
        0x06,                                   // bInterfaceClass (0x06 = still image)
        0x01,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        4,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MTP_TX_ENDPOINT | 0x80,                 // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MTP_TX_SIZE_480),MSB(MTP_TX_SIZE_480), // wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MTP_RX_ENDPOINT,                        // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MTP_RX_SIZE_480),MSB(MTP_RX_SIZE_480), // wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MTP_EVENT_ENDPOINT | 0x80,              // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        MTP_EVENT_SIZE, 0,                      // wMaxPacketSize
        MTP_EVENT_INTERVAL_480,                 // bInterval
#endif // MTP_INTERFACE

#ifdef KEYMEDIA_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        KEYMEDIA_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(keymedia_report_desc)),      // wDescriptorLength
        MSB(sizeof(keymedia_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        KEYMEDIA_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        KEYMEDIA_SIZE, 0,                       // wMaxPacketSize
        KEYMEDIA_INTERVAL,                      // bInterval
#endif // KEYMEDIA_INTERFACE

#ifdef AUDIO_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        AUDIO_INTERFACE,                        // bFirstInterface
        3,                                      // bInterfaceCount
        0x01,                                   // bFunctionClass
        0x01,                                   // bFunctionSubClass
        0x00,                                   // bFunctionProtocol
        0,                                      // iFunction
    // Standard AudioControl (AC) Interface Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-1, page 36
    9,                    // bLength
    4,                    // bDescriptorType, 4 = INTERFACE
    AUDIO_INTERFACE,            // bInterfaceNumber
    0,                    // bAlternateSetting
    0,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    1,                    // bInterfaceSubclass, 1 = AUDIO_CONTROL
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Class-specific AC Interface Header Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-2, page 37-38
    10,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    0x01,                    // bDescriptorSubtype, 1 = HEADER
    0x00, 0x01,                // bcdADC (version 1.0)
    LSB(62), MSB(62),            // wTotalLength
    2,                    // bInCollection
    AUDIO_INTERFACE+1,            // baInterfaceNr(1) - Transmit to PC
    AUDIO_INTERFACE+2,            // baInterfaceNr(2) - Receive from PC
    // Input Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-3, page 39
    12,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    0x02,                    // bDescriptorSubType, 2 = INPUT_TERMINAL
    1,                    // bTerminalID
    //0x01, 0x02,                // wTerminalType, 0x0201 = MICROPHONE
    //0x03, 0x06,                // wTerminalType, 0x0603 = Line Connector
    0x02, 0x06,                // wTerminalType, 0x0602 = Digital Audio
    0,                    // bAssocTerminal, 0 = unidirectional
    2,                    // bNrChannels
    0x03, 0x00,                // wChannelConfig, 0x0003 = Left & Right Front
    0,                    // iChannelNames
    0,                     // iTerminal
    // Output Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-4, page 40
    9,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    3,                    // bDescriptorSubtype, 3 = OUTPUT_TERMINAL
    2,                    // bTerminalID
    0x01, 0x01,                // wTerminalType, 0x0101 = USB_STREAMING
    0,                    // bAssocTerminal, 0 = unidirectional
    1,                    // bCSourceID, connected to input terminal, ID=1
    0,                    // iTerminal
    // Input Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-3, page 39
    12,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    2,                    // bDescriptorSubType, 2 = INPUT_TERMINAL
    3,                    // bTerminalID
    0x01, 0x01,                // wTerminalType, 0x0101 = USB_STREAMING
    0,                    // bAssocTerminal, 0 = unidirectional
    2,                    // bNrChannels
    0x03, 0x00,                // wChannelConfig, 0x0003 = Left & Right Front
    0,                    // iChannelNames
    0,                     // iTerminal
    // Volume feature descriptor
    10,                    // bLength
    0x24,                 // bDescriptorType = CS_INTERFACE
    0x06,                 // bDescriptorSubType = FEATURE_UNIT
    0x31,                 // bUnitID
    0x03,                 // bSourceID (Input Terminal)
    0x01,                 // bControlSize (each channel is 1 byte, 3 channels)
    0x01,                 // bmaControls(0) Master: Mute
    0x02,                 // bmaControls(1) Left: Volume
    0x02,                 // bmaControls(2) Right: Volume
    0x00,                // iFeature
    // Output Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-4, page 40
    9,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    3,                    // bDescriptorSubtype, 3 = OUTPUT_TERMINAL
    4,                    // bTerminalID
    //0x02, 0x03,                // wTerminalType, 0x0302 = Headphones
    0x02, 0x06,                // wTerminalType, 0x0602 = Digital Audio
    0,                    // bAssocTerminal, 0 = unidirectional
    0x31,                // bCSourceID, connected to feature, ID=31
    0,                    // iTerminal
    // Standard AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.1, Table 4-18, page 59
    // Alternate 0: default setting, disabled zero bandwidth
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+1,            // bInterfaceNumber
    0,                    // bAlternateSetting
    0,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Alternate 1: streaming data
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+1,            // bInterfaceNumber
    1,                    // bAlternateSetting
    1,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Class-Specific AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.2, Table 4-19, page 60
    7,                     // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    1,                    // bDescriptorSubtype, 1 = AS_GENERAL
    2,                    // bTerminalLink: Terminal ID = 2
    3,                    // bDelay (approx 3ms delay, audio lib updates)
    0x01, 0x00,                // wFormatTag, 0x0001 = PCM
    // Type I Format Descriptor
    // USB DCD for Audio Data Formats 1.0, Section 2.2.5, Table 2-1, page 10
    11,                    // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    2,                    // bDescriptorSubtype = FORMAT_TYPE
    1,                    // bFormatType = FORMAT_TYPE_I
    2,                    // bNrChannels = 2
    2,                    // bSubFrameSize = 2 byte
    16,                    // bBitResolution = 16 bits
    1,                    // bSamFreqType = 1 frequency
    LSB(44100), MSB(44100), 0,        // tSamFreq
    // Standard AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.1, Table 4-20, page 61-62
    9,                     // bLength
    5,                     // bDescriptorType, 5 = ENDPOINT_DESCRIPTOR
    AUDIO_TX_ENDPOINT | 0x80,        // bEndpointAddress
    0x09,                     // bmAttributes = isochronous, adaptive
    LSB(AUDIO_TX_SIZE), MSB(AUDIO_TX_SIZE),    // wMaxPacketSize
    4,                     // bInterval, 4 = every 8 micro-frames
    0,                    // bRefresh
    0,                    // bSynchAddress
    // Class-Specific AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.2, Table 4-21, page 62-63
    7,                      // bLength
    0x25,                      // bDescriptorType, 0x25 = CS_ENDPOINT
    1,                      // bDescriptorSubtype, 1 = EP_GENERAL
    0x00,                      // bmAttributes
    0,                      // bLockDelayUnits, 1 = ms
    0x00, 0x00,                  // wLockDelay
    // Standard AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.1, Table 4-18, page 59
    // Alternate 0: default setting, disabled zero bandwidth
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+2,            // bInterfaceNumber
    0,                    // bAlternateSetting
    0,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Alternate 1: streaming data
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+2,            // bInterfaceNumber
    1,                    // bAlternateSetting
    2,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Class-Specific AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.2, Table 4-19, page 60
    7,                     // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    1,                    // bDescriptorSubtype, 1 = AS_GENERAL
    3,                    // bTerminalLink: Terminal ID = 3
    3,                    // bDelay (approx 3ms delay, audio lib updates)
    0x01, 0x00,                // wFormatTag, 0x0001 = PCM
    // Type I Format Descriptor
    // USB DCD for Audio Data Formats 1.0, Section 2.2.5, Table 2-1, page 10
    11,                    // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    2,                    // bDescriptorSubtype = FORMAT_TYPE
    1,                    // bFormatType = FORMAT_TYPE_I
    2,                    // bNrChannels = 2
    2,                    // bSubFrameSize = 2 byte
    16,                    // bBitResolution = 16 bits
    1,                    // bSamFreqType = 1 frequency
    LSB(44100), MSB(44100), 0,        // tSamFreq
    // Standard AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.1, Table 4-20, page 61-62
    9,                     // bLength
    5,                     // bDescriptorType, 5 = ENDPOINT_DESCRIPTOR
    AUDIO_RX_ENDPOINT,            // bEndpointAddress
    0x05,                     // bmAttributes = isochronous, asynchronous
    LSB(AUDIO_RX_SIZE), MSB(AUDIO_RX_SIZE),    // wMaxPacketSize
    4,                     // bInterval, 4 = every 8 micro-frames
    0,                    // bRefresh
    AUDIO_SYNC_ENDPOINT | 0x80,        // bSynchAddress
    // Class-Specific AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.2, Table 4-21, page 62-63
    7,                      // bLength
    0x25,                      // bDescriptorType, 0x25 = CS_ENDPOINT
    1,                      // bDescriptorSubtype, 1 = EP_GENERAL
    0x00,                      // bmAttributes
    0,                      // bLockDelayUnits, 1 = ms
    0x00, 0x00,                  // wLockDelay
    // Standard AS Isochronous Audio Synch Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.2.1, Table 4-22, page 63-64
    9,                     // bLength
    5,                     // bDescriptorType, 5 = ENDPOINT_DESCRIPTOR
    AUDIO_SYNC_ENDPOINT | 0x80,        // bEndpointAddress
    0x11,                     // bmAttributes = isochronous, feedback
    4, 0,                    // wMaxPacketSize, 4 bytes
    4,                     // bInterval, 4 = 4 = every 8 micro-frames
    7,                    // bRefresh,
    0,                    // bSynchAddress
#endif

#ifdef MULTITOUCH_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        MULTITOUCH_INTERFACE,                   // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(multitouch_report_desc)),    // wDescriptorLength
        MSB(sizeof(multitouch_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MULTITOUCH_ENDPOINT | 0x80,             // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        MULTITOUCH_SIZE, 0,                     // wMaxPacketSize
        4,                                      // bInterval, 4 = 1ms
#endif // MULTITOUCH_INTERFACE

#ifdef EXPERIMENTAL_INTERFACE
    // configuration for 480 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        EXPERIMENTAL_INTERFACE,                 // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0xFF,                                   // bInterfaceClass (0xFF = Vendor)
        0x6A,                                   // bInterfaceSubClass
        0xFF,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        1 | 0x80,                               // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(512), MSB(512),                     // wMaxPacketSize
        1,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        1,                                      // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(512), MSB(512),                     // wMaxPacketSize
        1,                                      // bInterval
#endif // EXPERIMENTAL_INTERFACE
};


PROGMEM const uint8_t usb_config_descriptor_12[CONFIG_DESC_SIZE] = {
        // configuration descriptor, USB spec 9.6.3, page 264-266, Table 9-10
        9,                                      // bLength;
        2,                                      // bDescriptorType;
        LSB(CONFIG_DESC_SIZE),                 // wTotalLength
        MSB(CONFIG_DESC_SIZE),
        NUM_INTERFACE,                          // bNumInterfaces
        1,                                      // bConfigurationValue
        0,                                      // iConfiguration
        0xC0,                                   // bmAttributes
        50,                                     // bMaxPower

#ifdef CDC_IAD_DESCRIPTOR
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        CDC_STATUS_INTERFACE,                   // bFirstInterface
        2,                                      // bInterfaceCount
        0x02,                                   // bFunctionClass
        0x02,                                   // bFunctionSubClass
        0x01,                                   // bFunctionProtocol
        0,                                      // iFunction
#endif

#ifdef CDC_DATA_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC_STATUS_INTERFACE,            // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x02,                                   // bInterfaceClass
        0x02,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x00,                                   // bDescriptorSubtype
        0x10, 0x01,                             // bcdCDC
        // Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x01,                                   // bDescriptorSubtype
        0x01,                                   // bmCapabilities
        1,                                      // bDataInterface
        // Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC_STATUS_INTERFACE,                   // bMasterInterface
        CDC_DATA_INTERFACE,                     // bSlaveInterface0
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_ACM_ENDPOINT | 0x80,                // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        CDC_ACM_SIZE, 0,                        // wMaxPacketSize
        16,                                     // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC_DATA_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x0A,                                   // bInterfaceClass
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_RX_ENDPOINT,                        // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_RX_SIZE_12),MSB(CDC_RX_SIZE_12),// wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_TX_ENDPOINT | 0x80,                 // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(CDC_TX_SIZE_12),MSB(CDC_TX_SIZE_12),// wMaxPacketSize
        0,                                      // bInterval
#endif // CDC_DATA_INTERFACE

#ifdef CDC2_DATA_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        CDC2_STATUS_INTERFACE,                  // bFirstInterface
        2,                                      // bInterfaceCount
        0x02,                                   // bFunctionClass
        0x02,                                   // bFunctionSubClass
        0x01,                                   // bFunctionProtocol
        0,                                      // iFunction
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC2_STATUS_INTERFACE,                  // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x02,                                   // bInterfaceClass
        0x02,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x00,                                   // bDescriptorSubtype
        0x10, 0x01,                             // bcdCDC
        // Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x01,                                   // bDescriptorSubtype
        0x01,                                   // bmCapabilities
        1,                                      // bDataInterface
        // Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC2_STATUS_INTERFACE,                  // bMasterInterface
        CDC2_DATA_INTERFACE,                    // bSlaveInterface0
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC2_ACM_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        CDC_ACM_SIZE, 0,                        // wMaxPacketSize
        64,                                     // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC2_DATA_INTERFACE,                    // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x0A,                                   // bInterfaceClass
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC2_RX_ENDPOINT,                       // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        CDC_RX_SIZE_12, 0,                      // wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC2_TX_ENDPOINT | 0x80,                // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        CDC_TX_SIZE_12, 0,                      // wMaxPacketSize
        0,                                      // bInterval
#endif // CDC2_DATA_INTERFACE

#ifdef CDC3_DATA_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        CDC3_STATUS_INTERFACE,                  // bFirstInterface
        2,                                      // bInterfaceCount
        0x02,                                   // bFunctionClass
        0x02,                                   // bFunctionSubClass
        0x01,                                   // bFunctionProtocol
        0,                                      // iFunction
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC3_STATUS_INTERFACE,                  // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x02,                                   // bInterfaceClass
        0x02,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x00,                                   // bDescriptorSubtype
        0x10, 0x01,                             // bcdCDC
        // Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x01,                                   // bDescriptorSubtype
        0x01,                                   // bmCapabilities
        1,                                      // bDataInterface
        // Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC3_STATUS_INTERFACE,                  // bMasterInterface
        CDC3_DATA_INTERFACE,                    // bSlaveInterface0
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC3_ACM_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        CDC_ACM_SIZE, 0,                        // wMaxPacketSize
        64,                                     // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC3_DATA_INTERFACE,                    // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x0A,                                   // bInterfaceClass
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC3_RX_ENDPOINT,                       // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        CDC_RX_SIZE_12, 0,                      // wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC3_TX_ENDPOINT | 0x80,                // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        CDC_TX_SIZE_12, 0,                      // wMaxPacketSize
        0,                                      // bInterval
#endif // CDC3_DATA_INTERFACE

#ifdef MIDI_INTERFACE
    // configuration for 12 Mbit/sec speed
        // Standard MS Interface Descriptor,
        9,                                      // bLength
        4,                                      // bDescriptorType
        MIDI_INTERFACE,                         // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x01,                                   // bInterfaceClass (0x01 = Audio)
        0x03,                                   // bInterfaceSubClass (0x03 = MIDI)
        0x00,                                   // bInterfaceProtocol (unused for MIDI)
        0,                                      // iInterface
        // MIDI MS Interface Header, USB MIDI 6.1.2.1, page 21, Table 6-2
        7,                                      // bLength
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x01,                                   // bDescriptorSubtype = MS_HEADER
        0x00, 0x01,                             // bcdMSC = revision 01.00
    LSB(7+(6+6+9+9)*MIDI_NUM_CABLES),       // wTotalLength
    MSB(7+(6+6+9+9)*MIDI_NUM_CABLES),
        // MIDI IN Jack Descriptor, B.4.3, Table B-7 (embedded), page 40
        6,                                      // bLength
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x02,                                   // bDescriptorSubtype = MIDI_IN_JACK
        0x01,                                   // bJackType = EMBEDDED
        1,                                      // bJackID, ID = 1
        0,                                      // iJack
        // MIDI IN Jack Descriptor, B.4.3, Table B-8 (external), page 40
        6,                                      // bLength
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x02,                                   // bDescriptorSubtype = MIDI_IN_JACK
        0x02,                                   // bJackType = EXTERNAL
        2,                                      // bJackID, ID = 2
        0,                                      // iJack
        // MIDI OUT Jack Descriptor, B.4.4, Table B-9, page 41
        9,
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x03,                                   // bDescriptorSubtype = MIDI_OUT_JACK
        0x01,                                   // bJackType = EMBEDDED
        3,                                      // bJackID, ID = 3
        1,                                      // bNrInputPins = 1 pin
        2,                                      // BaSourceID(1) = 2
        1,                                      // BaSourcePin(1) = first pin
        0,                                      // iJack
        // MIDI OUT Jack Descriptor, B.4.4, Table B-10, page 41
        9,
        0x24,                                   // bDescriptorType = CS_INTERFACE
        0x03,                                   // bDescriptorSubtype = MIDI_OUT_JACK
        0x02,                                   // bJackType = EXTERNAL
        4,                                      // bJackID, ID = 4
        1,                                      // bNrInputPins = 1 pin
        1,                                      // BaSourceID(1) = 1
        1,                                      // BaSourcePin(1) = first pin
        0,                                      // iJack
  #if MIDI_NUM_CABLES >= 2
    #define MIDI_INTERFACE_JACK_PAIR(a, b, c, d) \
        6, 0x24, 0x02, 0x01, (a), 0, \
        6, 0x24, 0x02, 0x02, (b), 0, \
        9, 0x24, 0x03, 0x01, (c), 1, (b), 1, 0, \
        9, 0x24, 0x03, 0x02, (d), 1, (a), 1, 0,
    MIDI_INTERFACE_JACK_PAIR(5, 6, 7, 8)
  #endif
  #if MIDI_NUM_CABLES >= 3
    MIDI_INTERFACE_JACK_PAIR(9, 10, 11, 12)
  #endif
  #if MIDI_NUM_CABLES >= 4
    MIDI_INTERFACE_JACK_PAIR(13, 14, 15, 16)
  #endif
  #if MIDI_NUM_CABLES >= 5
    MIDI_INTERFACE_JACK_PAIR(17, 18, 19, 20)
  #endif
  #if MIDI_NUM_CABLES >= 6
    MIDI_INTERFACE_JACK_PAIR(21, 22, 23, 24)
  #endif
  #if MIDI_NUM_CABLES >= 7
    MIDI_INTERFACE_JACK_PAIR(25, 26, 27, 28)
  #endif
  #if MIDI_NUM_CABLES >= 8
    MIDI_INTERFACE_JACK_PAIR(29, 30, 31, 32)
  #endif
  #if MIDI_NUM_CABLES >= 9
    MIDI_INTERFACE_JACK_PAIR(33, 34, 35, 36)
  #endif
  #if MIDI_NUM_CABLES >= 10
    MIDI_INTERFACE_JACK_PAIR(37, 38, 39, 40)
  #endif
  #if MIDI_NUM_CABLES >= 11
    MIDI_INTERFACE_JACK_PAIR(41, 42, 43, 44)
  #endif
  #if MIDI_NUM_CABLES >= 12
    MIDI_INTERFACE_JACK_PAIR(45, 46, 47, 48)
  #endif
  #if MIDI_NUM_CABLES >= 13
    MIDI_INTERFACE_JACK_PAIR(49, 50, 51, 52)
  #endif
  #if MIDI_NUM_CABLES >= 14
    MIDI_INTERFACE_JACK_PAIR(53, 54, 55, 56)
  #endif
  #if MIDI_NUM_CABLES >= 15
    MIDI_INTERFACE_JACK_PAIR(57, 58, 59, 60)
  #endif
  #if MIDI_NUM_CABLES >= 16
    MIDI_INTERFACE_JACK_PAIR(61, 62, 63, 64)
  #endif
        // Standard Bulk OUT Endpoint Descriptor, B.5.1, Table B-11, pae 42
        9,                                      // bLength
        5,                                      // bDescriptorType = ENDPOINT
        MIDI_RX_ENDPOINT,                       // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MIDI_RX_SIZE_12),MSB(MIDI_RX_SIZE_12),// wMaxPacketSize
        0,                                      // bInterval
        0,                                      // bRefresh
        0,                                      // bSynchAddress
        // Class-specific MS Bulk OUT Endpoint Descriptor, B.5.2, Table B-12, page 42
        4+MIDI_NUM_CABLES,                      // bLength
        0x25,                                   // bDescriptorSubtype = CS_ENDPOINT
        0x01,                                   // bJackType = MS_GENERAL
        MIDI_NUM_CABLES,                        // bNumEmbMIDIJack = number of jacks
        1,                                      // BaAssocJackID(1) = jack ID #1
  #if MIDI_NUM_CABLES >= 2
        5,
  #endif
  #if MIDI_NUM_CABLES >= 3
        9,
  #endif
  #if MIDI_NUM_CABLES >= 4
        13,
  #endif
  #if MIDI_NUM_CABLES >= 5
        17,
  #endif
  #if MIDI_NUM_CABLES >= 6
        21,
  #endif
  #if MIDI_NUM_CABLES >= 7
        25,
  #endif
  #if MIDI_NUM_CABLES >= 8
        29,
  #endif
  #if MIDI_NUM_CABLES >= 9
        33,
  #endif
  #if MIDI_NUM_CABLES >= 10
        37,
  #endif
  #if MIDI_NUM_CABLES >= 11
        41,
  #endif
  #if MIDI_NUM_CABLES >= 12
        45,
  #endif
  #if MIDI_NUM_CABLES >= 13
        49,
  #endif
  #if MIDI_NUM_CABLES >= 14
        53,
  #endif
  #if MIDI_NUM_CABLES >= 15
        57,
  #endif
  #if MIDI_NUM_CABLES >= 16
        61,
  #endif
        // Standard Bulk IN Endpoint Descriptor, B.5.1, Table B-11, pae 42
        9,                                      // bLength
        5,                                      // bDescriptorType = ENDPOINT
        MIDI_TX_ENDPOINT | 0x80,                // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MIDI_TX_SIZE_12),MSB(MIDI_TX_SIZE_12),// wMaxPacketSize
        0,                                      // bInterval
        0,                                      // bRefresh
        0,                                      // bSynchAddress
        // Class-specific MS Bulk IN Endpoint Descriptor, B.5.2, Table B-12, page 42
        4+MIDI_NUM_CABLES,                      // bLength
        0x25,                                   // bDescriptorSubtype = CS_ENDPOINT
        0x01,                                   // bJackType = MS_GENERAL
        MIDI_NUM_CABLES,                        // bNumEmbMIDIJack = number of jacks
        3,                                      // BaAssocJackID(1) = jack ID #3
  #if MIDI_NUM_CABLES >= 2
        7,
  #endif
  #if MIDI_NUM_CABLES >= 3
        11,
  #endif
  #if MIDI_NUM_CABLES >= 4
        15,
  #endif
  #if MIDI_NUM_CABLES >= 5
        19,
  #endif
  #if MIDI_NUM_CABLES >= 6
        23,
  #endif
  #if MIDI_NUM_CABLES >= 7
        27,
  #endif
  #if MIDI_NUM_CABLES >= 8
        31,
  #endif
  #if MIDI_NUM_CABLES >= 9
        35,
  #endif
  #if MIDI_NUM_CABLES >= 10
        39,
  #endif
  #if MIDI_NUM_CABLES >= 11
        43,
  #endif
  #if MIDI_NUM_CABLES >= 12
        47,
  #endif
  #if MIDI_NUM_CABLES >= 13
        51,
  #endif
  #if MIDI_NUM_CABLES >= 14
        55,
  #endif
  #if MIDI_NUM_CABLES >= 15
        59,
  #endif
  #if MIDI_NUM_CABLES >= 16
        63,
  #endif
#endif // MIDI_INTERFACE

#ifdef KEYBOARD_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        KEYBOARD_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x01,                                   // bInterfaceSubClass (0x01 = Boot)
        0x01,                                   // bInterfaceProtocol (0x01 = Keyboard)
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(keyboard_report_desc)),      // wDescriptorLength
        MSB(sizeof(keyboard_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        KEYBOARD_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        KEYBOARD_SIZE, 0,                       // wMaxPacketSize
        KEYBOARD_INTERVAL,                      // bInterval
#endif // KEYBOARD_INTERFACE

#ifdef MOUSE_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        MOUSE_INTERFACE,                        // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass (0x01 = Boot)
        0x00,                                   // bInterfaceProtocol (0x02 = Mouse)
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(mouse_report_desc)),         // wDescriptorLength
        MSB(sizeof(mouse_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MOUSE_ENDPOINT | 0x80,                  // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        MOUSE_SIZE, 0,                          // wMaxPacketSize
        MOUSE_INTERVAL,                         // bInterval
#endif // MOUSE_INTERFACE

#ifdef RAWHID_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        RAWHID_INTERFACE,                       // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(rawhid_report_desc)),        // wDescriptorLength
        MSB(sizeof(rawhid_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        RAWHID_TX_ENDPOINT | 0x80,              // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        RAWHID_TX_SIZE, 0,                      // wMaxPacketSize
        RAWHID_TX_INTERVAL,                     // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        RAWHID_RX_ENDPOINT,                     // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        RAWHID_RX_SIZE, 0,                      // wMaxPacketSize
        RAWHID_RX_INTERVAL,            // bInterval
#endif // RAWHID_INTERFACE

#ifdef FLIGHTSIM_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        FLIGHTSIM_INTERFACE,                    // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(flightsim_report_desc)),     // wDescriptorLength
        MSB(sizeof(flightsim_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        FLIGHTSIM_TX_ENDPOINT | 0x80,           // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        FLIGHTSIM_TX_SIZE, 0,                   // wMaxPacketSize
        FLIGHTSIM_TX_INTERVAL,                  // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        FLIGHTSIM_RX_ENDPOINT,                  // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        FLIGHTSIM_RX_SIZE, 0,                   // wMaxPacketSize
        FLIGHTSIM_RX_INTERVAL,            // bInterval
#endif // FLIGHTSIM_INTERFACE

#ifdef SEREMU_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        SEREMU_INTERFACE,                       // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(seremu_report_desc)),        // wDescriptorLength
        MSB(sizeof(seremu_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        SEREMU_TX_ENDPOINT | 0x80,              // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        SEREMU_TX_SIZE, 0,                      // wMaxPacketSize
        SEREMU_TX_INTERVAL,                     // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        SEREMU_RX_ENDPOINT,                     // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        SEREMU_RX_SIZE, 0,                      // wMaxPacketSize
        SEREMU_RX_INTERVAL,            // bInterval
#endif // SEREMU_INTERFACE

#ifdef JOYSTICK_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        JOYSTICK_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(joystick_report_desc)),      // wDescriptorLength
        MSB(sizeof(joystick_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        JOYSTICK_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        JOYSTICK_SIZE, 0,                       // wMaxPacketSize
        JOYSTICK_INTERVAL,                      // bInterval
#endif // JOYSTICK_INTERFACE

#ifdef MTP_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        MTP_INTERFACE,                          // bInterfaceNumber
        0,                                      // bAlternateSetting
        3,                                      // bNumEndpoints
        0x06,                                   // bInterfaceClass (0x06 = still image)
        0x01,                                   // bInterfaceSubClass
        0x01,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MTP_TX_ENDPOINT | 0x80,                 // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MTP_TX_SIZE_12),MSB(MTP_TX_SIZE_12),// wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MTP_RX_ENDPOINT,                        // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(MTP_RX_SIZE_12),MSB(MTP_RX_SIZE_12),// wMaxPacketSize
        0,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MTP_EVENT_ENDPOINT | 0x80,              // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        MTP_EVENT_SIZE, 0,                      // wMaxPacketSize
        MTP_EVENT_INTERVAL_12,                  // bInterval
#endif // MTP_INTERFACE

#ifdef KEYMEDIA_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        KEYMEDIA_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(keymedia_report_desc)),      // wDescriptorLength
        MSB(sizeof(keymedia_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        KEYMEDIA_ENDPOINT | 0x80,               // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        KEYMEDIA_SIZE, 0,                       // wMaxPacketSize
        KEYMEDIA_INTERVAL,                      // bInterval
#endif // KEYMEDIA_INTERFACE

#ifdef AUDIO_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface association descriptor, USB ECN, Table 9-Z
        8,                                      // bLength
        11,                                     // bDescriptorType
        AUDIO_INTERFACE,                        // bFirstInterface
        3,                                      // bInterfaceCount
        0x01,                                   // bFunctionClass
        0x01,                                   // bFunctionSubClass
        0x00,                                   // bFunctionProtocol
        0,                                      // iFunction
    // Standard AudioControl (AC) Interface Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-1, page 36
    9,                    // bLength
    4,                    // bDescriptorType, 4 = INTERFACE
    AUDIO_INTERFACE,            // bInterfaceNumber
    0,                    // bAlternateSetting
    0,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    1,                    // bInterfaceSubclass, 1 = AUDIO_CONTROL
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Class-specific AC Interface Header Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-2, page 37-38
    10,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    0x01,                    // bDescriptorSubtype, 1 = HEADER
    0x00, 0x01,                // bcdADC (version 1.0)
    LSB(62), MSB(62),            // wTotalLength
    2,                    // bInCollection
    AUDIO_INTERFACE+1,            // baInterfaceNr(1) - Transmit to PC
    AUDIO_INTERFACE+2,            // baInterfaceNr(2) - Receive from PC
    // Input Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-3, page 39
    12,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    0x02,                    // bDescriptorSubType, 2 = INPUT_TERMINAL
    1,                    // bTerminalID
    //0x01, 0x02,                // wTerminalType, 0x0201 = MICROPHONE
    //0x03, 0x06,                // wTerminalType, 0x0603 = Line Connector
    0x02, 0x06,                // wTerminalType, 0x0602 = Digital Audio
    0,                    // bAssocTerminal, 0 = unidirectional
    2,                    // bNrChannels
    0x03, 0x00,                // wChannelConfig, 0x0003 = Left & Right Front
    0,                    // iChannelNames
    0,                     // iTerminal
    // Output Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-4, page 40
    9,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    3,                    // bDescriptorSubtype, 3 = OUTPUT_TERMINAL
    2,                    // bTerminalID
    0x01, 0x01,                // wTerminalType, 0x0101 = USB_STREAMING
    0,                    // bAssocTerminal, 0 = unidirectional
    1,                    // bCSourceID, connected to input terminal, ID=1
    0,                    // iTerminal
    // Input Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-3, page 39
    12,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    2,                    // bDescriptorSubType, 2 = INPUT_TERMINAL
    3,                    // bTerminalID
    0x01, 0x01,                // wTerminalType, 0x0101 = USB_STREAMING
    0,                    // bAssocTerminal, 0 = unidirectional
    2,                    // bNrChannels
    0x03, 0x00,                // wChannelConfig, 0x0003 = Left & Right Front
    0,                    // iChannelNames
    0,                     // iTerminal
    // Volume feature descriptor
    10,                    // bLength
    0x24,                 // bDescriptorType = CS_INTERFACE
    0x06,                 // bDescriptorSubType = FEATURE_UNIT
    0x31,                 // bUnitID
    0x03,                 // bSourceID (Input Terminal)
    0x01,                 // bControlSize (each channel is 1 byte, 3 channels)
    0x01,                 // bmaControls(0) Master: Mute
    0x02,                 // bmaControls(1) Left: Volume
    0x02,                 // bmaControls(2) Right: Volume
    0x00,                // iFeature
    // Output Terminal Descriptor
    // USB DCD for Audio Devices 1.0, Table 4-4, page 40
    9,                    // bLength
    0x24,                    // bDescriptorType, 0x24 = CS_INTERFACE
    3,                    // bDescriptorSubtype, 3 = OUTPUT_TERMINAL
    4,                    // bTerminalID
    //0x02, 0x03,                // wTerminalType, 0x0302 = Headphones
    0x02, 0x06,                // wTerminalType, 0x0602 = Digital Audio
    0,                    // bAssocTerminal, 0 = unidirectional
    0x31,                // bCSourceID, connected to feature, ID=31
    0,                    // iTerminal
    // Standard AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.1, Table 4-18, page 59
    // Alternate 0: default setting, disabled zero bandwidth
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+1,            // bInterfaceNumber
    0,                    // bAlternateSetting
    0,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Alternate 1: streaming data
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+1,            // bInterfaceNumber
    1,                    // bAlternateSetting
    1,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Class-Specific AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.2, Table 4-19, page 60
    7,                     // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    1,                    // bDescriptorSubtype, 1 = AS_GENERAL
    2,                    // bTerminalLink: Terminal ID = 2
    3,                    // bDelay (approx 3ms delay, audio lib updates)
    0x01, 0x00,                // wFormatTag, 0x0001 = PCM
    // Type I Format Descriptor
    // USB DCD for Audio Data Formats 1.0, Section 2.2.5, Table 2-1, page 10
    11,                    // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    2,                    // bDescriptorSubtype = FORMAT_TYPE
    1,                    // bFormatType = FORMAT_TYPE_I
    2,                    // bNrChannels = 2
    2,                    // bSubFrameSize = 2 byte
    16,                    // bBitResolution = 16 bits
    1,                    // bSamFreqType = 1 frequency
    LSB(44100), MSB(44100), 0,        // tSamFreq
    // Standard AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.1, Table 4-20, page 61-62
    9,                     // bLength
    5,                     // bDescriptorType, 5 = ENDPOINT_DESCRIPTOR
    AUDIO_TX_ENDPOINT | 0x80,        // bEndpointAddress
    0x09,                     // bmAttributes = isochronous, adaptive
    LSB(AUDIO_TX_SIZE), MSB(AUDIO_TX_SIZE),    // wMaxPacketSize
    1,                     // bInterval, 1 = every frame
    0,                    // bRefresh
    0,                    // bSynchAddress
    // Class-Specific AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.2, Table 4-21, page 62-63
    7,                      // bLength
    0x25,                      // bDescriptorType, 0x25 = CS_ENDPOINT
    1,                      // bDescriptorSubtype, 1 = EP_GENERAL
    0x00,                      // bmAttributes
    0,                      // bLockDelayUnits, 1 = ms
    0x00, 0x00,                  // wLockDelay
    // Standard AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.1, Table 4-18, page 59
    // Alternate 0: default setting, disabled zero bandwidth
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+2,            // bInterfaceNumber
    0,                    // bAlternateSetting
    0,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Alternate 1: streaming data
    9,                    // bLenght
    4,                    // bDescriptorType = INTERFACE
    AUDIO_INTERFACE+2,            // bInterfaceNumber
    1,                    // bAlternateSetting
    2,                    // bNumEndpoints
    1,                    // bInterfaceClass, 1 = AUDIO
    2,                    // bInterfaceSubclass, 2 = AUDIO_STREAMING
    0,                    // bInterfaceProtocol
    0,                    // iInterface
    // Class-Specific AS Interface Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.5.2, Table 4-19, page 60
    7,                     // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    1,                    // bDescriptorSubtype, 1 = AS_GENERAL
    3,                    // bTerminalLink: Terminal ID = 3
    3,                    // bDelay (approx 3ms delay, audio lib updates)
    0x01, 0x00,                // wFormatTag, 0x0001 = PCM
    // Type I Format Descriptor
    // USB DCD for Audio Data Formats 1.0, Section 2.2.5, Table 2-1, page 10
    11,                    // bLength
    0x24,                    // bDescriptorType = CS_INTERFACE
    2,                    // bDescriptorSubtype = FORMAT_TYPE
    1,                    // bFormatType = FORMAT_TYPE_I
    2,                    // bNrChannels = 2
    2,                    // bSubFrameSize = 2 byte
    16,                    // bBitResolution = 16 bits
    1,                    // bSamFreqType = 1 frequency
    LSB(44100), MSB(44100), 0,        // tSamFreq
    // Standard AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.1, Table 4-20, page 61-62
    9,                     // bLength
    5,                     // bDescriptorType, 5 = ENDPOINT_DESCRIPTOR
    AUDIO_RX_ENDPOINT,            // bEndpointAddress
    0x05,                     // bmAttributes = isochronous, asynchronous
    LSB(AUDIO_RX_SIZE), MSB(AUDIO_RX_SIZE),    // wMaxPacketSize
    1,                     // bInterval, 1 = every frame
    0,                    // bRefresh
    AUDIO_SYNC_ENDPOINT | 0x80,        // bSynchAddress
    // Class-Specific AS Isochronous Audio Data Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.1.2, Table 4-21, page 62-63
    7,                      // bLength
    0x25,                      // bDescriptorType, 0x25 = CS_ENDPOINT
    1,                      // bDescriptorSubtype, 1 = EP_GENERAL
    0x00,                      // bmAttributes
    0,                      // bLockDelayUnits, 1 = ms
    0x00, 0x00,                  // wLockDelay
    // Standard AS Isochronous Audio Synch Endpoint Descriptor
    // USB DCD for Audio Devices 1.0, Section 4.6.2.1, Table 4-22, page 63-64
    9,                     // bLength
    5,                     // bDescriptorType, 5 = ENDPOINT_DESCRIPTOR
    AUDIO_SYNC_ENDPOINT | 0x80,        // bEndpointAddress
    0x11,                     // bmAttributes = isochronous, feedback
    3, 0,                    // wMaxPacketSize, 3 bytes
    1,                     // bInterval, 1 = every frame
    5,                    // bRefresh, 5 = 32ms
    0,                    // bSynchAddress
#endif

#ifdef MULTITOUCH_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        MULTITOUCH_INTERFACE,                   // bInterfaceNumber
        0,                                      // bAlternateSetting
        1,                                      // bNumEndpoints
        0x03,                                   // bInterfaceClass (0x03 = HID)
        0x00,                                   // bInterfaceSubClass
        0x00,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // HID interface descriptor, HID 1.11 spec, section 6.2.1
        9,                                      // bLength
        0x21,                                   // bDescriptorType
        0x11, 0x01,                             // bcdHID
        0,                                      // bCountryCode
        1,                                      // bNumDescriptors
        0x22,                                   // bDescriptorType
        LSB(sizeof(multitouch_report_desc)),    // wDescriptorLength
        MSB(sizeof(multitouch_report_desc)),
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        MULTITOUCH_ENDPOINT | 0x80,             // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
        MULTITOUCH_SIZE, 0,                     // wMaxPacketSize
        1,                                      // bInterval
#endif // MULTITOUCH_INTERFACE

#ifdef EXPERIMENTAL_INTERFACE
    // configuration for 12 Mbit/sec speed
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        EXPERIMENTAL_INTERFACE,                 // bInterfaceNumber
        0,                                      // bAlternateSetting
        2,                                      // bNumEndpoints
        0xFF,                                   // bInterfaceClass (0xFF = Vendor)
        0x6A,                                   // bInterfaceSubClass
        0xFF,                                   // bInterfaceProtocol
        0,                                      // iInterface
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        1 | 0x80,                               // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(64), MSB(64),                       // wMaxPacketSize
        1,                                      // bInterval
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        1,                                      // bEndpointAddress
        0x02,                                   // bmAttributes (0x02=bulk)
        LSB(64), MSB(64),                       // wMaxPacketSize
        1,                                      // bInterval
#endif // EXPERIMENTAL_INTERFACE
};


__attribute__ ((section(".dmabuffers"), aligned(32)))
uint8_t usb_descriptor_buffer[CONFIG_DESC_SIZE];





// **************************************************************
//   String Descriptors
// **************************************************************

// The descriptors above can provide human readable strings,
// referenced by index numbers.  These descriptors are the
// actual string data

/* defined in usb_names.h
struct usb_string_descriptor_struct {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t wString[];
};
*/

extern struct usb_string_descriptor_struct usb_string_manufacturer_name
        __attribute__ ((weak, alias("usb_string_manufacturer_name_default")));
extern struct usb_string_descriptor_struct usb_string_product_name
        __attribute__ ((weak, alias("usb_string_product_name_default")));
extern struct usb_string_descriptor_struct usb_string_serial_number
        __attribute__ ((weak, alias("usb_string_serial_number_default")));

PROGMEM const struct usb_string_descriptor_struct string0 = {
        4,
        3,
        {0x0409}
};

PROGMEM const struct usb_string_descriptor_struct usb_string_manufacturer_name_default = {
        2 + MANUFACTURER_NAME_LEN * 2,
        3,
        MANUFACTURER_NAME
};
PROGMEM const struct usb_string_descriptor_struct usb_string_product_name_default = {
    2 + PRODUCT_NAME_LEN * 2,
        3,
        PRODUCT_NAME
};
struct usb_string_descriptor_struct usb_string_serial_number_default = {
        12,
        3,
        {0,0,0,0,0,0,0,0,0,0}
};
#ifdef MTP_INTERFACE
PROGMEM const struct usb_string_descriptor_struct usb_string_mtp = {
    2 + 3 * 2,
    3,
    {'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    char buf[11];
    uint32_t i, num;

    num = HW_OCOTP_MAC0 & 0xFFFFFF;
    // add extra zero to work around OS-X CDC-ACM driver bug
    if (num < 10000000) num = num * 10;
    ultoa(num, buf, 10);
    for (i=0; i<10; i++) {
        char c = buf[i];
        if (!c) break;
        usb_string_serial_number_default.wString[i] = c;
    }
    usb_string_serial_number_default.bLength = i * 2 + 2;
}


// **************************************************************
//   Descriptors List
// **************************************************************

// This table provides access to all the descriptor data above.

const usb_descriptor_list_t usb_descriptor_list[] = {
    //wValue, wIndex, address,          length
    {0x0100, 0x0000, device_descriptor, sizeof(device_descriptor)},
    {0x0600, 0x0000, qualifier_descriptor, sizeof(qualifier_descriptor)},
    {0x0200, 0x0000, usb_config_descriptor_480, CONFIG_DESC_SIZE},
    {0x0700, 0x0000, usb_config_descriptor_12, CONFIG_DESC_SIZE},
#ifdef SEREMU_INTERFACE
    {0x2200, SEREMU_INTERFACE, seremu_report_desc, sizeof(seremu_report_desc)},
    {0x2100, SEREMU_INTERFACE, usb_config_descriptor_480+SEREMU_HID_DESC_OFFSET, 9},
#endif
#ifdef KEYBOARD_INTERFACE
        {0x2200, KEYBOARD_INTERFACE, keyboard_report_desc, sizeof(keyboard_report_desc)},
        {0x2100, KEYBOARD_INTERFACE, usb_config_descriptor_480+KEYBOARD_HID_DESC_OFFSET, 9},
#endif
#ifdef MOUSE_INTERFACE
        {0x2200, MOUSE_INTERFACE, mouse_report_desc, sizeof(mouse_report_desc)},
        {0x2100, MOUSE_INTERFACE, usb_config_descriptor_480+MOUSE_HID_DESC_OFFSET, 9},
#endif
#ifdef JOYSTICK_INTERFACE
        {0x2200, JOYSTICK_INTERFACE, joystick_report_desc, sizeof(joystick_report_desc)},
        {0x2100, JOYSTICK_INTERFACE, usb_config_descriptor_480+JOYSTICK_HID_DESC_OFFSET, 9},
#endif
#ifdef RAWHID_INTERFACE
    {0x2200, RAWHID_INTERFACE, rawhid_report_desc, sizeof(rawhid_report_desc)},
    {0x2100, RAWHID_INTERFACE, usb_config_descriptor_480+RAWHID_HID_DESC_OFFSET, 9},
#endif
#ifdef FLIGHTSIM_INTERFACE
    {0x2200, FLIGHTSIM_INTERFACE, flightsim_report_desc, sizeof(flightsim_report_desc)},
    {0x2100, FLIGHTSIM_INTERFACE, usb_config_descriptor_480+FLIGHTSIM_HID_DESC_OFFSET, 9},
#endif
#ifdef KEYMEDIA_INTERFACE
        {0x2200, KEYMEDIA_INTERFACE, keymedia_report_desc, sizeof(keymedia_report_desc)},
        {0x2100, KEYMEDIA_INTERFACE, usb_config_descriptor_480+KEYMEDIA_HID_DESC_OFFSET, 9},
#endif
#ifdef MULTITOUCH_INTERFACE
        {0x2200, MULTITOUCH_INTERFACE, multitouch_report_desc, sizeof(multitouch_report_desc)},
        {0x2100, MULTITOUCH_INTERFACE, usb_config_descriptor_480+MULTITOUCH_HID_DESC_OFFSET, 9},
#endif
#ifdef MTP_INTERFACE
    {0x0304, 0x0409, (const uint8_t *)&usb_string_mtp, 0},
#endif
        {0x0300, 0x0000, (const uint8_t *)&string0, 0},
        {0x0301, 0x0409, (const uint8_t *)&usb_string_manufacturer_name, 0},
        {0x0302, 0x0409, (const uint8_t *)&usb_string_product_name, 0},
        {0x0303, 0x0409, (const uint8_t *)&usb_string_serial_number, 0},
    {0, 0, NULL, 0}
};





#endif // NUM_ENDPOINTS
//#endif // F_CPU >= 20 MHz

[@file: to_replace/usb_desc.h]
/* Teensyduino Core Library
 * http://www.pjrc.com/teensy/
 * Copyright (c) 2017 PJRC.COM, LLC.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * 2. If the Software is incorporated into a build system that allows
 * selection among a list of target devices, then similar target
 * devices manufactured by PJRC.COM must be included in the list of
 * target devices and selectable in the same manner.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

// This header is NOT meant to be included when compiling
// user sketches in Arduino.  The low-level functions
// provided by usb_dev.c are meant to be called only by
// code which provides higher-level interfaces to the user.

#include <stdint.h>
#include <stddef.h>

#define ENDPOINT_TRANSMIT_UNUSED        0x00020000
#define ENDPOINT_TRANSMIT_ISOCHRONOUS   0x00C40000
#define ENDPOINT_TRANSMIT_BULK          0x00C80000
#define ENDPOINT_TRANSMIT_INTERRUPT     0x00CC0000
#define ENDPOINT_RECEIVE_UNUSED         0x00000002
#define ENDPOINT_RECEIVE_ISOCHRONOUS    0x000000C4
#define ENDPOINT_RECEIVE_BULK           0x000000C8
#define ENDPOINT_RECEIVE_INTERRUPT      0x000000CC

/*
Each group of #define lines below corresponds to one of the
settings in the Tools > USB Type menu.  This file defines what
type of USB device is actually created for each of those menu
options.

Each "interface" is a set of functionality your PC or Mac will
use and treat as if it is a unique device.  Within each interface,
the "endpoints" are the actual communication channels.  Most
interfaces use 1, 2 or 3 endpoints.  By editing only this file,
you can customize the USB Types to be any collection of interfaces.

To modify a USB Type, delete the XYZ_INTERFACE lines for any
interfaces you wish to remove, and copy them from another USB Type
for any you want to add.

Give each interface a unique number, and edit NUM_INTERFACE to
reflect the total number of interfaces.

Next, assign unique endpoint numbers to all the endpoints across
all the interfaces your device has.  You can reuse an endpoint
number for transmit and receive, but the same endpoint number must
not be used twice to transmit, or twice to receive.

Most endpoints also require their maximum size, and some also
need an interval specification (the number of milliseconds the
PC will check for data from that endpoint).  For existing
interfaces, usually these other settings should not be changed.

Edit NUM_ENDPOINTS to be at least the largest endpoint number used.

Edit the ENDPOINT*_CONFIG lines so each endpoint is configured
the proper way (transmit, receive, or both).

If you are using existing interfaces (making your own device with
a different set of interfaces) the code in all other files should
automatically adapt to the new endpoints you specify here.

If you need to create a new type of interface, you'll need to write
the code which sends and receives packets, and presents an API to
the user.  Usually, a pair of files are added for the actual code,
and code is also added in usb_dev.c for any control transfers,
interrupt-level code, or other very low-level stuff not possible
from the packet send/receive functons.  Code also is added in
usb_inst.c to create an instance of your C++ object.  This message
gives a quick summary of things you will need to know:
https://forum.pjrc.com/threads/49045?p=164512&viewfull=1#post164512

You may edit the Vendor and Product ID numbers, and strings.  If
the numbers are changed, Teensyduino may not be able to automatically
find and reboot your board when you click the Upload button in
the Arduino IDE.  You will need to press the Program button on
Teensy to initiate programming.

Some operating systems, especially Windows, may cache USB device
info.  Changes to the device name may not update on the same
computer unless the vendor or product ID numbers change, or the
"bcdDevice" revision code is increased.

If these instructions are missing steps or could be improved, please
let me know?  http://forum.pjrc.com/forums/4-Suggestions-amp-Bug-Reports
*/


#if defined(USB_SERIAL)
  #define VENDOR_ID                 0x16C0
  #define PRODUCT_ID                0x0483
  #define MANUFACTURER_NAME         {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN     11
  #define PRODUCT_NAME              {'U','S','B',' ','S','e','r','i','a','l'}
  #define PRODUCT_NAME_LEN          10
  #define EP0_SIZE                  64
  #define NUM_ENDPOINTS             4
  #define NUM_USB_BUFFERS           12
  #define NUM_INTERFACE             2
  #define CDC_IAD_DESCRIPTOR        1       // Serial
  #define CDC_STATUS_INTERFACE      0
  #define CDC_DATA_INTERFACE        1
  #define CDC_ACM_ENDPOINT          2
  #define CDC_RX_ENDPOINT           3
  #define CDC_TX_ENDPOINT           4
  #define CDC_ACM_SIZE              16
  #define CDC_RX_SIZE_480           512
  #define CDC_TX_SIZE_480           512
  #define CDC_RX_SIZE_12            64
  #define CDC_TX_SIZE_12            64
  //#define EXPERIMENTAL_INTERFACE 2
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_UNUSED
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_DUAL_SERIAL)
  #define VENDOR_ID             0x16C0
  #define PRODUCT_ID            0x048B
  #define MANUFACTURER_NAME     {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN 11
  #define PRODUCT_NAME          {'D','u','a','l',' ','S','e','r','i','a','l'}
  #define PRODUCT_NAME_LEN      11
  #define EP0_SIZE              64
  #define NUM_ENDPOINTS         5
  #define NUM_INTERFACE         4
  #define CDC_IAD_DESCRIPTOR    1       // Serial
  #define CDC_STATUS_INTERFACE  0
  #define CDC_DATA_INTERFACE    1
  #define CDC_ACM_ENDPOINT      2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE_480       512
  #define CDC_TX_SIZE_480       512
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define CDC2_STATUS_INTERFACE 2       // SerialUSB1
  #define CDC2_DATA_INTERFACE   3
  #define CDC2_ACM_ENDPOINT     4
  #define CDC2_RX_ENDPOINT      5
  #define CDC2_TX_ENDPOINT      5
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT5_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_TRIPLE_SERIAL)
  #define VENDOR_ID             0x16C0
  #define PRODUCT_ID            0x048C
  #define MANUFACTURER_NAME     {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN 11
  #define PRODUCT_NAME          {'T','r','i','p','l','e',' ','S','e','r','i','a','l'}
  #define PRODUCT_NAME_LEN      13
  #define EP0_SIZE              64
  #define NUM_ENDPOINTS         7
  #define NUM_INTERFACE         6
  #define CDC_IAD_DESCRIPTOR    1       // Serial
  #define CDC_STATUS_INTERFACE  0
  #define CDC_DATA_INTERFACE    1
  #define CDC_ACM_ENDPOINT      2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE_480       512
  #define CDC_TX_SIZE_480       512
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define CDC2_STATUS_INTERFACE 2       // SerialUSB1
  #define CDC2_DATA_INTERFACE   3
  #define CDC2_ACM_ENDPOINT     4
  #define CDC2_RX_ENDPOINT      5
  #define CDC2_TX_ENDPOINT      5
  #define CDC3_STATUS_INTERFACE 4       // SerialUSB2
  #define CDC3_DATA_INTERFACE   5
  #define CDC3_ACM_ENDPOINT     6
  #define CDC3_RX_ENDPOINT      7
  #define CDC3_TX_ENDPOINT      7
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT5_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT6_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT7_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_KEYBOARDONLY)
  #define VENDOR_ID             0x16C0
  #define PRODUCT_ID            0x04D0
  #define MANUFACTURER_NAME     {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN 11
  #define PRODUCT_NAME          {'K','e','y','b','o','a','r','d'}
  #define PRODUCT_NAME_LEN      8
  #define EP0_SIZE              64
  #define NUM_ENDPOINTS         4
  #define NUM_USB_BUFFERS       4
  #define NUM_INTERFACE         3
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1    // TODO: is this ok for 480 Mbit speed
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2    // TODO: is this ok for 480 Mbit speed
  #define KEYBOARD_INTERFACE    0    // Keyboard
  #define KEYBOARD_ENDPOINT     3
  #define KEYBOARD_SIZE         64
  #define KEYBOARD_INTERVAL     1    // TODO: is this ok for 480 Mbit speed
  #define KEYMEDIA_INTERFACE    2    // Keyboard Media Keys
  #define KEYMEDIA_ENDPOINT     4
  #define KEYMEDIA_SIZE         8
  #define KEYMEDIA_INTERVAL     4    // TODO: is this ok for 480 Mbit speed
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT

#elif defined(USB_HID)
  #define VENDOR_ID             0x16C0
  #define PRODUCT_ID            0x0482
  #define MANUFACTURER_NAME     {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN 11
  #define PRODUCT_NAME          {'K','e','y','b','o','a','r','d','/','M','o','u','s','e','/','J','o','y','s','t','i','c','k'}
  #define PRODUCT_NAME_LEN      23
  #define EP0_SIZE              64
  #define NUM_ENDPOINTS         6
  #define NUM_USB_BUFFERS       24
  #define NUM_INTERFACE         5
  #define SEREMU_INTERFACE      2    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define KEYBOARD_INTERFACE    0    // Keyboard
  #define KEYBOARD_ENDPOINT     3
  #define KEYBOARD_SIZE         8
  #define KEYBOARD_INTERVAL     1
  #define KEYMEDIA_INTERFACE    4    // Keyboard Media Keys
  #define KEYMEDIA_ENDPOINT     4
  #define KEYMEDIA_SIZE         8
  #define KEYMEDIA_INTERVAL     4
  #define MOUSE_INTERFACE       1    // Mouse
  #define MOUSE_ENDPOINT        5
  #define MOUSE_SIZE            8
  #define MOUSE_INTERVAL        1
  #define JOYSTICK_INTERFACE    3    // Joystick
  #define JOYSTICK_ENDPOINT     6
  #define JOYSTICK_SIZE         12    //  12 = normal, 64 = extreme joystick
  #define JOYSTICK_INTERVAL     2
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT5_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT6_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT

#elif defined(USB_SERIAL_HID)
  #define VENDOR_ID             0x16C0
  #define PRODUCT_ID            0x0487
  #define DEVICE_CLASS          0xEF
  #define DEVICE_SUBCLASS       0x02
  #define DEVICE_PROTOCOL       0x01
  #define MANUFACTURER_NAME     {'D','e','w','e','\'','s',' ','N','u','t','s'}
  #define MANUFACTURER_NAME_LEN 11
  #define PRODUCT_NAME          {'D', 'e', 'w', 'e', ' ', 'U', 'S', 'B', '-', 'H', 'S', ' ', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', }
  #define PRODUCT_NAME_LEN      20
  #define EP0_SIZE              64
  #define NUM_ENDPOINTS         7
  #define NUM_INTERFACE         6
  #define CDC_IAD_DESCRIPTOR    1
  #define CDC_STATUS_INTERFACE  0
  #define CDC_DATA_INTERFACE    1    // Serial
  #define CDC_ACM_ENDPOINT      2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          0xFFU
  #define CDC_RX_SIZE_480       1024U
  #define CDC_TX_SIZE_480       1024U
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define KEYBOARD_INTERFACE    2    // Keyboard
  #define KEYBOARD_ENDPOINT     4
  #define KEYBOARD_SIZE         64
  #define KEYBOARD_INTERVAL     1
  #define KEYMEDIA_INTERFACE    5    // Keyboard Media Keys
  #define KEYMEDIA_ENDPOINT     5
  #define KEYMEDIA_SIZE         8
  #define KEYMEDIA_INTERVAL     4
  #define MOUSE_INTERFACE       3    // Mouse
  #define MOUSE_ENDPOINT        6
  #define MOUSE_SIZE            8
  #define MOUSE_INTERVAL        2
  #define JOYSTICK_INTERFACE    4    // Joystick
  #define JOYSTICK_ENDPOINT     7
  #define JOYSTICK_SIZE         12    //  12 = normal, 64 = extreme joystick
  #define JOYSTICK_INTERVAL     1
  #define ENDPOINT2_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG      ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT5_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT6_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT7_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT

#elif defined(USB_TOUCHSCREEN)
  #define VENDOR_ID             0x16C0
  #define PRODUCT_ID            0x04D3
  #define MANUFACTURER_NAME     {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN 11
  #define PRODUCT_NAME          {'K','e','y','b','o','a','r','d','/','T','o','u','c','h','s','c','r','e','e','n'}
  #define PRODUCT_NAME_LEN      20
  #define EP0_SIZE              64
  #define NUM_ENDPOINTS         5
  #define NUM_INTERFACE         4
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define KEYBOARD_INTERFACE    0    // Keyboard
  #define KEYBOARD_ENDPOINT     3
  #define KEYBOARD_SIZE         8
  #define KEYBOARD_INTERVAL     1
  #define KEYMEDIA_INTERFACE    2    // Keyboard Media Keys
  #define KEYMEDIA_ENDPOINT     4
  #define KEYMEDIA_SIZE         8
  #define KEYMEDIA_INTERVAL     4
  #define MULTITOUCH_INTERFACE  3    // Touchscreen
  #define MULTITOUCH_ENDPOINT   5
  #define MULTITOUCH_SIZE       9
  #define MULTITOUCH_FINGERS    10
  #define ENDPOINT2_CONFIG      ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT4_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT5_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT

#elif defined(USB_HID_TOUCHSCREEN)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x04D4
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'K','e','y','b','o','a','r','d','/','M','o','u','s','e','/','T','o','u','c','h','s','c','r','e','e','n'}
  #define PRODUCT_NAME_LEN    26
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         6
  #define NUM_INTERFACE        5
  #define SEREMU_INTERFACE      2    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define KEYBOARD_INTERFACE    0    // Keyboard
  #define KEYBOARD_ENDPOINT     3
  #define KEYBOARD_SIZE         8
  #define KEYBOARD_INTERVAL     1
  #define KEYMEDIA_INTERFACE    3    // Keyboard Media Keys
  #define KEYMEDIA_ENDPOINT     4
  #define KEYMEDIA_SIZE         8
  #define KEYMEDIA_INTERVAL     4
  #define MOUSE_INTERFACE       1    // Mouse
  #define MOUSE_ENDPOINT        6
  #define MOUSE_SIZE            8
  #define MOUSE_INTERVAL        2
  #define MULTITOUCH_INTERFACE  4    // Touchscreen
  #define MULTITOUCH_ENDPOINT   5
  #define MULTITOUCH_SIZE       9
  #define MULTITOUCH_FINGERS    10
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT5_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT6_CONFIG      ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT

#elif defined(USB_MIDI)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0485
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I'}
  #define PRODUCT_NAME_LEN    11
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        2
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define MIDI_INTERFACE        0    // MIDI
  #define MIDI_NUM_CABLES       1
  #define MIDI_TX_ENDPOINT      3
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      3
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_MIDI4)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0485
  #define BCD_DEVICE        0x0211
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I','x','4'}
  #define PRODUCT_NAME_LEN    13
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         3
  #define NUM_INTERFACE        2
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define MIDI_INTERFACE        0    // MIDI
  #define MIDI_NUM_CABLES       4
  #define MIDI_TX_ENDPOINT      3
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      3
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_MIDI16)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0485
  #define BCD_DEVICE        0x0212
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I','x','1','6'}
  #define PRODUCT_NAME_LEN    14
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         3
  #define NUM_INTERFACE        2
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define MIDI_INTERFACE        0    // MIDI
  #define MIDI_NUM_CABLES       16
  #define MIDI_TX_ENDPOINT      3
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      3
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_MIDI_SERIAL)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0489
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I'}
  #define PRODUCT_NAME_LEN    11
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        3
  #define CDC_IAD_DESCRIPTOR    1
  #define CDC_STATUS_INTERFACE    0
  #define CDC_DATA_INTERFACE    1    // Serial
  #define CDC_ACM_ENDPOINT    2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE_480       512
  #define CDC_TX_SIZE_480       512
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define MIDI_INTERFACE        2    // MIDI
  #define MIDI_NUM_CABLES       1
  #define MIDI_TX_ENDPOINT      4
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      4
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_MIDI4_SERIAL)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0489
  #define BCD_DEVICE        0x0211
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I','x','4'}
  #define PRODUCT_NAME_LEN    13
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        3
  #define CDC_IAD_DESCRIPTOR    1
  #define CDC_STATUS_INTERFACE    0
  #define CDC_DATA_INTERFACE    1    // Serial
  #define CDC_ACM_ENDPOINT    2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE_480       512
  #define CDC_TX_SIZE_480       512
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define MIDI_INTERFACE        2    // MIDI
  #define MIDI_NUM_CABLES       4
  #define MIDI_TX_ENDPOINT      4
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      4
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_MIDI16_SERIAL)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0489
  #define BCD_DEVICE        0x0212
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I','x','1','6'}
  #define PRODUCT_NAME_LEN    14
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        3
  #define CDC_IAD_DESCRIPTOR    1
  #define CDC_STATUS_INTERFACE    0
  #define CDC_DATA_INTERFACE    1    // Serial
  #define CDC_ACM_ENDPOINT    2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE_480       512
  #define CDC_TX_SIZE_480       512
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define MIDI_INTERFACE        2    // MIDI
  #define MIDI_NUM_CABLES       16
  #define MIDI_TX_ENDPOINT      4
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      4
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_RAWHID)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0486
  #define RAWHID_USAGE_PAGE    0xFFAB  // recommended: 0xFF00 to 0xFFFF
  #define RAWHID_USAGE        0x0200  // recommended: 0x0100 to 0xFFFF
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y','d','u','i','n','o',' ','R','a','w','H','I','D'}
  #define PRODUCT_NAME_LEN    18
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        2
  #define RAWHID_INTERFACE      0    // RawHID
  #define RAWHID_TX_ENDPOINT    3
  #define RAWHID_TX_SIZE        64
  #define RAWHID_TX_INTERVAL    1     // TODO: is this ok for 480 Mbit speed
  #define RAWHID_RX_ENDPOINT    4
  #define RAWHID_RX_SIZE        64
  #define RAWHID_RX_INTERVAL    1     // TODO: is this ok for 480 Mbit speed
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1     // TODO: is this ok for 480 Mbit speed
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2     // TODO: is this ok for 480 Mbit speed
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_UNUSED

#elif defined(USB_FLIGHTSIM)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0488
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','F','l','i','g','h','t',' ','S','i','m',' ','C','o','n','t','r','o','l','s'}
  #define PRODUCT_NAME_LEN    26
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         3
  #define NUM_INTERFACE        2
  #define FLIGHTSIM_INTERFACE    0    // Flight Sim Control
  #define FLIGHTSIM_TX_ENDPOINT    3
  #define FLIGHTSIM_TX_SIZE    64
  #define FLIGHTSIM_TX_INTERVAL    1
  #define FLIGHTSIM_RX_ENDPOINT    3
  #define FLIGHTSIM_RX_SIZE    64
  #define FLIGHTSIM_RX_INTERVAL    1
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK

#elif defined(USB_FLIGHTSIM_JOYSTICK)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0488
  #define BCD_DEVICE        0x0211
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','F','l','i','g','h','t',' ','S','i','m',' ','C','o','n','t','r','o','l','s'}
  #define PRODUCT_NAME_LEN    26
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        3
  #define FLIGHTSIM_INTERFACE    0    // Flight Sim Control
  #define FLIGHTSIM_TX_ENDPOINT    3
  #define FLIGHTSIM_TX_SIZE    64
  #define FLIGHTSIM_TX_INTERVAL    1
  #define FLIGHTSIM_RX_ENDPOINT    3
  #define FLIGHTSIM_RX_SIZE    64
  #define FLIGHTSIM_RX_INTERVAL    1
  #define SEREMU_INTERFACE      1    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define JOYSTICK_INTERFACE    2    // Joystick
  #define JOYSTICK_ENDPOINT     4
  #define JOYSTICK_SIZE         12    //  12 = normal, 64 = extreme joystick
  #define JOYSTICK_INTERVAL     1
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT

#elif defined(USB_MTPDISK)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x04D1
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','T','P',' ','D','i','s','k'}
  #define PRODUCT_NAME_LEN    15
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        2
  #define MTP_INTERFACE        1    // MTP Disk
  #define MTP_TX_ENDPOINT    3
  #define MTP_TX_SIZE_12    64
  #define MTP_TX_SIZE_480    512
  #define MTP_RX_ENDPOINT    3
  #define MTP_RX_SIZE_12    64
  #define MTP_RX_SIZE_480    512
  #define MTP_EVENT_ENDPOINT    4
  #define MTP_EVENT_SIZE    32
  #define MTP_EVENT_INTERVAL_12    10    // 10 = 10 ms
  #define MTP_EVENT_INTERVAL_480 7    // 7 = 8 ms
  #define SEREMU_INTERFACE      0    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG  ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT

#elif defined(USB_AUDIO)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x04D2
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','A','u','d','i','o'}
  #define PRODUCT_NAME_LEN    12
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         4
  #define NUM_INTERFACE        4
  #define SEREMU_INTERFACE      0    // Serial emulation
  #define SEREMU_TX_ENDPOINT    2
  #define SEREMU_TX_SIZE        64
  #define SEREMU_TX_INTERVAL    1
  #define SEREMU_RX_ENDPOINT    2
  #define SEREMU_RX_SIZE        32
  #define SEREMU_RX_INTERVAL    2
  #define AUDIO_INTERFACE    1    // Audio (uses 3 consecutive interfaces)
  #define AUDIO_TX_ENDPOINT     3
  #define AUDIO_TX_SIZE         180
  #define AUDIO_RX_ENDPOINT     3
  #define AUDIO_RX_SIZE         180
  #define AUDIO_SYNC_ENDPOINT    4
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_INTERRUPT + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_ISOCHRONOUS + ENDPOINT_TRANSMIT_ISOCHRONOUS
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_ISOCHRONOUS

#elif defined(USB_MIDI_AUDIO_SERIAL)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x048A
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I','/','A','u','d','i','o'}
  #define PRODUCT_NAME_LEN    17
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         6
  #define NUM_INTERFACE        6
  #define CDC_IAD_DESCRIPTOR    1
  #define CDC_STATUS_INTERFACE    0
  #define CDC_DATA_INTERFACE    1    // Serial
  #define CDC_ACM_ENDPOINT    2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE_480       512
  #define CDC_TX_SIZE_480       512
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define MIDI_INTERFACE        2    // MIDI
  #define MIDI_NUM_CABLES       1
  #define MIDI_TX_ENDPOINT      4
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      4
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define AUDIO_INTERFACE    3    // Audio (uses 3 consecutive interfaces)
  #define AUDIO_TX_ENDPOINT     5
  #define AUDIO_TX_SIZE         180
  #define AUDIO_RX_ENDPOINT     5
  #define AUDIO_RX_SIZE         180
  #define AUDIO_SYNC_ENDPOINT    6
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT5_CONFIG    ENDPOINT_RECEIVE_ISOCHRONOUS + ENDPOINT_TRANSMIT_ISOCHRONOUS
  #define ENDPOINT6_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_ISOCHRONOUS

#elif defined(USB_MIDI16_AUDIO_SERIAL)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x048A
  #define BCD_DEVICE        0x0212
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'T','e','e','n','s','y',' ','M','I','D','I','x','1','6','/','A','u','d','i','o'}
  #define PRODUCT_NAME_LEN    20
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         8
  #define NUM_INTERFACE        6
  #define CDC_IAD_DESCRIPTOR    1
  #define CDC_STATUS_INTERFACE    0
  #define CDC_DATA_INTERFACE    1    // Serial
  #define CDC_ACM_ENDPOINT    2
  #define CDC_RX_ENDPOINT       3
  #define CDC_TX_ENDPOINT       3
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE_480       512
  #define CDC_TX_SIZE_480       512
  #define CDC_RX_SIZE_12        64
  #define CDC_TX_SIZE_12        64
  #define MIDI_INTERFACE        2    // MIDI
  #define MIDI_NUM_CABLES       16
  #define MIDI_TX_ENDPOINT      4
  #define MIDI_TX_SIZE_12       64
  #define MIDI_TX_SIZE_480      512
  #define MIDI_RX_ENDPOINT      4
  #define MIDI_RX_SIZE_12       64
  #define MIDI_RX_SIZE_480      512
  #define AUDIO_INTERFACE    3    // Audio (uses 3 consecutive interfaces)
  #define AUDIO_TX_ENDPOINT     5
  #define AUDIO_TX_SIZE         180
  #define AUDIO_RX_ENDPOINT     5
  #define AUDIO_RX_SIZE         180
  #define AUDIO_SYNC_ENDPOINT    6
  #define ENDPOINT2_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_INTERRUPT
  #define ENDPOINT3_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT4_CONFIG    ENDPOINT_RECEIVE_BULK + ENDPOINT_TRANSMIT_BULK
  #define ENDPOINT5_CONFIG    ENDPOINT_RECEIVE_ISOCHRONOUS + ENDPOINT_TRANSMIT_ISOCHRONOUS
  #define ENDPOINT6_CONFIG    ENDPOINT_RECEIVE_UNUSED + ENDPOINT_TRANSMIT_ISOCHRONOUS

#elif defined(USB_EVERYTHING)
  #define VENDOR_ID        0x16C0
  #define PRODUCT_ID        0x0476
  #define RAWHID_USAGE_PAGE    0xFFAB  // recommended: 0xFF00 to 0xFFFF
  #define RAWHID_USAGE        0x0200  // recommended: 0x0100 to 0xFFFF
  #define DEVICE_CLASS        0xEF
  #define DEVICE_SUBCLASS    0x02
  #define DEVICE_PROTOCOL    0x01
  #define MANUFACTURER_NAME    {'T','e','e','n','s','y','d','u','i','n','o'}
  #define MANUFACTURER_NAME_LEN    11
  #define PRODUCT_NAME        {'A','l','l',' ','T','h','e',' ','T','h','i','n','g','s'}
  #define PRODUCT_NAME_LEN    14
  #define EP0_SIZE        64
  #define NUM_ENDPOINTS         15
  #define NUM_INTERFACE        13
  #define CDC_IAD_DESCRIPTOR    1
  #define CDC_STATUS_INTERFACE    0
  #define CDC_DATA_INTERFACE    1    // Serial
  #define CDC_ACM_ENDPOINT    1
  #define CDC_RX_ENDPOINT       2
  #define CDC_TX_ENDPOINT       2
  #define CDC_ACM_SIZE          16
  #define CDC_RX_SIZE           64
  #define CDC_TX_SIZE           64
  #define MIDI_INTERFACE        2    // MIDI
  #define MIDI_NUM_CABLES       16
  #define MIDI_TX_ENDPOINT      3
  #define MIDI_TX_SIZE          64
  #define MIDI_RX_ENDPOINT      3
  #define MIDI_RX_SIZE          64
  #define KEYBOARD_INTERFACE    3    // Keyboard
  #define KEYBOARD_ENDPOINT     4
  #define KEYBOARD_SIZE         8
  #define KEYBOARD_INTERVAL     1
  #define MOUSE_INTERFACE       4    // Mouse
  #define MOUSE_ENDPOINT        5
  #define MOUSE_SIZE            8
  #define MOUSE_INTERVAL        2
  #define RAWHID_INTERFACE      5    // RawHID
  #define RAWHID_TX_ENDPOINT    6
  #define RAWHID_TX_SIZE        64
  #define RAWHID_TX_INTERVAL    1
  #define RAWHID_RX_ENDPOINT    6
  #define RAWHID_RX_SIZE        64
  #define RAWHID_RX_INTERVAL    1
  #define FLIGHTSIM_INTERFACE    6    // Flight Sim Control
  #define FLIGHTSIM_TX_ENDPOINT    9
  #define FLIGHTSIM_TX_SIZE    64
  #define FLIGHTSIM_TX_INTERVAL    1
  #define FLIGHTSIM_RX_ENDPOINT    9
  #define FLIGHTSIM_RX_SIZE    64
  #define FLIGHTSIM_RX_INTERVAL    1
  #define JOYSTICK_INTERFACE    7    // Joystick
  #define JOYSTICK_ENDPOINT     10
  #define JOYSTICK_SIZE         12    //  12 = normal, 64 = extreme joystick
  #define JOYSTICK_INTERVAL     1
/*
  #define MTP_INTERFACE        8    // MTP Disk
  #define MTP_TX_ENDPOINT    11
  #define MTP_TX_SIZE        64
  #define MTP_RX_ENDPOINT    3
  #define MTP_RX_SIZE        64
  #define MTP_EVENT_ENDPOINT    11
  #define MTP_EVENT_SIZE    16
  #define MTP_EVENT_INTERVAL    10
*/
  #define KEYMEDIA_INTERFACE    8    // Keyboard Media Keys
  #define KEYMEDIA_ENDPOINT     12
  #define KEYMEDIA_SIZE         8
  #define KEYMEDIA_INTERVAL     4
  #define AUDIO_INTERFACE    9    // Audio (uses 3 consecutive interfaces)
  #define AUDIO_TX_ENDPOINT     13
  #define AUDIO_TX_SIZE         180
  #define AUDIO_RX_ENDPOINT     13
  #define AUDIO_RX_SIZE         180
  #define AUDIO_SYNC_ENDPOINT    14
  #define MULTITOUCH_INTERFACE  12    // Touchscreen
  #define MULTITOUCH_ENDPOINT   15
  #define MULTITOUCH_SIZE       9
  #define MULTITOUCH_FINGERS    10
  #define ENDPOINT1_CONFIG    ENDPOINT_TRANSMIT_ONLY
  #define ENDPOINT2_CONFIG    ENDPOINT_TRANSMIT_AND_RECEIVE
  #define ENDPOINT3_CONFIG    ENDPOINT_TRANSMIT_AND_RECEIVE
  #define ENDPOINT4_CONFIG    ENDPOINT_TRANSMIT_ONLY
  #define ENDPOINT5_CONFIG    ENDPOINT_TRANSMIT_ONLY
  #define ENDPOINT6_CONFIG    ENDPOINT_TRANSMIT_AND_RECEIVE
  #define ENDPOINT7_CONFIG    ENDPOINT_TRANSMIT_AND_RECEIVE
  #define ENDPOINT8_CONFIG    ENDPOINT_TRANSMIT_ONLY
  #define ENDPOINT9_CONFIG    ENDPOINT_TRANSMIT_AND_RECEIVE
  #define ENDPOINT10_CONFIG    ENDPOINT_TRANSMIT_ONLY
  #define ENDPOINT11_CONFIG    ENDPOINT_TRANSMIT_AND_RECEIVE
  #define ENDPOINT12_CONFIG    ENDPOINT_TRANSMIT_ONLY
  #define ENDPOINT13_CONFIG    (ENDPOINT_RECEIVE_ISOCHRONOUS|ENDPOINT_TRANSMIT_ISOCHRONOUS)
  #define ENDPOINT14_CONFIG    ENDPOINT_TRANSMIT_ISOCHRONOUS
  #define ENDPOINT15_CONFIG    ENDPOINT_TRANSMIT_ONLY

#endif

#ifdef USB_DESC_LIST_DEFINE
#if defined(NUM_ENDPOINTS) && NUM_ENDPOINTS > 0
// NUM_ENDPOINTS = number of non-zero endpoints (0 to 7)
extern const uint32_t usb_endpoint_config_table[NUM_ENDPOINTS];

typedef struct {
    uint16_t    wValue;
    uint16_t    wIndex;
    const uint8_t    *addr;
    uint16_t    length;
} usb_descriptor_list_t;

extern const usb_descriptor_list_t usb_descriptor_list[];
#endif // NUM_ENDPOINTS
#endif // USB_DESC_LIST_DEFINE


[@file: to_replace/usb_keyboard.c]
/* Teensyduino Core Library
 * http://www.pjrc.com/teensy/
 * Copyright (c) 2017 PJRC.COM, LLC.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * 2. If the Software is incorporated into a build system that allows
 * selection among a list of target devices, then similar target
 * devices manufactured by PJRC.COM must be included in the list of
 * target devices and selectable in the same manner.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "usb_dev.h"
#include "usb_keyboard.h"
#include "core_pins.h" // for yield()
#include "keylayouts.h"
#include <string.h> // for memcpy()
#include "avr/pgmspace.h" // for PROGMEM, DMAMEM, FASTRUN
#include "debug/printf.h"
#include "core_pins.h"

#ifdef KEYBOARD_INTERFACE // defined by usb_dev.h -> usb_desc.h

// which modifier keys are currently pressed
// 1=left ctrl,       2=left shift,   4=left alt,      8=left gui
// 16=right ctrl, 32=right shift, 64=right alt, 128=right gui
uint8_t keyboard_modifier_keys=0;

// which keys are currently pressed, up to 6 keys may be down at once
uint8_t keyboard_keys[KEYBOARD_SIZE-2] = {0};

#ifdef KEYMEDIA_INTERFACE
uint16_t keymedia_consumer_keys[4];
uint8_t keymedia_system_keys[3];
#endif

// protocol setting from the host.  We use exactly the same report
// either way, so this variable only stores the setting since we
// are required to be able to report which setting is in use.
uint8_t keyboard_protocol=1;

// the idle configuration, how often we send the report to the
// host (ms * 4) even when it hasn't changed
uint8_t keyboard_idle_config=125;

// count until idle timeout
uint8_t keyboard_idle_count=0;

// 1=num lock, 2=caps lock, 4=scroll lock, 8=compose, 16=kana
volatile uint8_t keyboard_leds=0;



static KEYCODE_TYPE unicode_to_keycode(uint16_t cpoint);
static void write_key(KEYCODE_TYPE keycode);
static uint8_t keycode_to_modifier(KEYCODE_TYPE keycode);
static uint8_t keycode_to_key(KEYCODE_TYPE keycode);
static void usb_keyboard_press_key(uint8_t key, uint8_t modifier);
static void usb_keyboard_release_key(uint8_t key, uint8_t modifier);
#ifdef DEADKEYS_MASK
static KEYCODE_TYPE deadkey_to_keycode(KEYCODE_TYPE keycode);
#endif
#ifdef KEYMEDIA_INTERFACE
static void usb_keymedia_press_consumer_key(uint16_t key);
static void usb_keymedia_release_consumer_key(uint16_t key);
static void usb_keymedia_press_system_key(uint8_t key);
static void usb_keymedia_release_system_key(uint8_t key);
static int usb_keymedia_send(void);
#endif


#define TX_NUM     12
#define TX_BUFSIZE 64
static transfer_t tx_transfer[TX_NUM] __attribute__ ((used, aligned(32)));
DMAMEM static uint8_t txbuffer[TX_NUM * TX_BUFSIZE] __attribute__ ((aligned(32)));
static uint8_t tx_head=0;
#if KEYBOARD_SIZE > TX_BUFSIZE
#error "Internal error, transmit buffer size is too small for keyboard endpoint"
#endif
#if defined(KEYMEDIA_INTERFACE) && KEYMEDIA_SIZE > TX_BUFSIZE
#error "Internal error, transmit buffer size is too small for media keys endpoint"
#endif


void usb_keyboard_configure(void)
{
    memset(tx_transfer, 0, sizeof(tx_transfer));
    tx_head = 0;
    usb_config_tx(KEYBOARD_ENDPOINT, KEYBOARD_SIZE, 0, NULL);  // normal keys use 8 byte packet
#ifdef KEYMEDIA_INTERFACE
    usb_config_tx(KEYMEDIA_ENDPOINT, KEYMEDIA_SIZE, 0, NULL);  // media keys use 8 byte packet
#endif
}


// Step #1, decode UTF8 to Unicode code points
//
void usb_keyboard_write(uint8_t c)
{
    static int utf8_state=0;
    static uint16_t unicode_wchar=0;

    if (c < 0x80) {
        // single byte encoded, 0x00 to 0x7F
        utf8_state = 0;
        usb_keyboard_write_unicode(c);
    } else if (c < 0xC0) {
        // 2nd, 3rd or 4th byte, 0x80 to 0xBF
        c &= 0x3F;
        if (utf8_state == 1) {
            utf8_state = 0;
            usb_keyboard_write_unicode(unicode_wchar | c);
        } else if (utf8_state == 2) {
            unicode_wchar |= ((uint16_t)c << 6);
            utf8_state = 1;
        }
    } else if (c < 0xE0) {
        // begin 2 byte sequence, 0xC2 to 0xDF
        // or illegal 2 byte sequence, 0xC0 to 0xC1
        unicode_wchar = (uint16_t)(c & 0x1F) << 6;
        utf8_state = 1;
    } else if (c < 0xF0) {
        // begin 3 byte sequence, 0xE0 to 0xEF
        unicode_wchar = (uint16_t)(c & 0x0F) << 12;
        utf8_state = 2;
    } else {
        // begin 4 byte sequence (not supported), 0xF0 to 0xF4
        // or illegal, 0xF5 to 0xFF
        utf8_state = 255;
    }
}


// Step #2: translate Unicode code point to keystroke sequence
//
static KEYCODE_TYPE unicode_to_keycode(uint16_t cpoint)
{
    // Unicode code points beyond U+FFFF are not supported
    // technically this input should probably be called UCS-2
    if (cpoint < 32) {
        if (cpoint == 10) return KEY_ENTER & KEYCODE_MASK;
        if (cpoint == 11) return KEY_TAB & KEYCODE_MASK;
        return 0;
    }
    if (cpoint < 128) {
        return keycodes_ascii[cpoint - 0x20];
    }
    #ifdef ISO_8859_1_A0
    if (cpoint >= 0xA0 && cpoint < 0x100) {
        return keycodes_iso_8859_1[cpoint - 0xA0];
    }
    #endif
    //#ifdef UNICODE_20AC
    //if (cpoint == 0x20AC) return UNICODE_20AC & 0x3FFF;
    //#endif
    #ifdef KEYCODE_EXTRA00
    if (cpoint == UNICODE_EXTRA00) return (KEYCODE_EXTRA00) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA01
    if (cpoint == UNICODE_EXTRA01) return (KEYCODE_EXTRA01) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA02
    if (cpoint == UNICODE_EXTRA02) return (KEYCODE_EXTRA02) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA03
    if (cpoint == UNICODE_EXTRA03) return (KEYCODE_EXTRA03) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA04
    if (cpoint == UNICODE_EXTRA04) return (KEYCODE_EXTRA04) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA05
    if (cpoint == UNICODE_EXTRA05) return (KEYCODE_EXTRA05) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA06
    if (cpoint == UNICODE_EXTRA06) return (KEYCODE_EXTRA06) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA07
    if (cpoint == UNICODE_EXTRA07) return (KEYCODE_EXTRA07) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA08
    if (cpoint == UNICODE_EXTRA08) return (KEYCODE_EXTRA08) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA09
    if (cpoint == UNICODE_EXTRA09) return (KEYCODE_EXTRA09) & 0x3FFF;
    #endif
    #ifdef KEYCODE_EXTRA0A
    if (cpoint == UNICODE_EXTRA0A) return (KEYCODE_EXTRA0A) & 0x3FFF;
    #endif
    return 0;
}

// Step #3: execute keystroke sequence
//
#ifdef DEADKEYS_MASK
static KEYCODE_TYPE deadkey_to_keycode(KEYCODE_TYPE keycode)
{
    keycode &= DEADKEYS_MASK;
    if (keycode == 0) return 0;
    #ifdef ACUTE_ACCENT_BITS
    if (keycode == ACUTE_ACCENT_BITS) return DEADKEY_ACUTE_ACCENT;
    #endif
    #ifdef CEDILLA_BITS
    if (keycode == CEDILLA_BITS) return DEADKEY_CEDILLA;
    #endif
    #ifdef CIRCUMFLEX_BITS
    if (keycode == CIRCUMFLEX_BITS) return DEADKEY_CIRCUMFLEX;
    #endif
    #ifdef DIAERESIS_BITS
    if (keycode == DIAERESIS_BITS) return DEADKEY_DIAERESIS;
    #endif
    #ifdef GRAVE_ACCENT_BITS
    if (keycode == GRAVE_ACCENT_BITS) return DEADKEY_GRAVE_ACCENT;
    #endif
    #ifdef TILDE_BITS
    if (keycode == TILDE_BITS) return DEADKEY_TILDE;
    #endif
    #ifdef RING_ABOVE_BITS
    if (keycode == RING_ABOVE_BITS) return DEADKEY_RING_ABOVE;
    #endif
    #ifdef DEGREE_SIGN_BITS
    if (keycode == DEGREE_SIGN_BITS) return DEADKEY_DEGREE_SIGN;
    #endif
    #ifdef CARON_BITS
    if (keycode == CARON_BITS) return DEADKEY_CARON;
    #endif
    #ifdef BREVE_BITS
    if (keycode == BREVE_BITS) return DEADKEY_BREVE;
    #endif
    #ifdef OGONEK_BITS
    if (keycode == OGONEK_BITS) return DEADKEY_OGONEK;
    #endif
    #ifdef DOT_ABOVE_BITS
    if (keycode == DOT_ABOVE_BITS) return DEADKEY_DOT_ABOVE;
    #endif
    #ifdef DOUBLE_ACUTE_BITS
    if (keycode == DOUBLE_ACUTE_BITS) return DEADKEY_DOUBLE_ACUTE;
    #endif
    return 0;
}
#endif

void usb_keyboard_write_unicode(uint16_t cpoint)
{
    KEYCODE_TYPE keycode;

    keycode = unicode_to_keycode(cpoint);
    if (keycode) {
        #ifdef DEADKEYS_MASK
        KEYCODE_TYPE deadkeycode = deadkey_to_keycode(keycode);
        if (deadkeycode) write_key(deadkeycode);
        #endif
        write_key(keycode);
    }
}


// Step #4: do each keystroke
//
static void write_key(KEYCODE_TYPE keycode)
{
/*
    uint8_t key, modifier=0;

    #ifdef SHIFT_MASK
    if (keycode & SHIFT_MASK) modifier |= MODIFIERKEY_SHIFT;
    #endif
    #ifdef ALTGR_MASK
    if (keycode & ALTGR_MASK) modifier |= MODIFIERKEY_RIGHT_ALT;
    #endif
    #ifdef RCTRL_MASK
    if (keycode & RCTRL_MASK) modifier |= MODIFIERKEY_RIGHT_CTRL;
    #endif
    key = keycode & 0x3F;
    #ifdef KEY_NON_US_100
    if (key == KEY_NON_US_100) key = 100;
    #endif
    usb_keyboard_press(key, modifier);
*/
    usb_keyboard_press(keycode_to_key(keycode), keycode_to_modifier(keycode));
}

static uint8_t keycode_to_modifier(KEYCODE_TYPE keycode)
{
    uint8_t modifier=0;

    #ifdef SHIFT_MASK
    if (keycode & SHIFT_MASK) modifier |= MODIFIERKEY_SHIFT;
    #endif
    #ifdef ALTGR_MASK
    if (keycode & ALTGR_MASK) modifier |= MODIFIERKEY_RIGHT_ALT;
    #endif
    #ifdef RCTRL_MASK
    if (keycode & RCTRL_MASK) modifier |= MODIFIERKEY_RIGHT_CTRL;
    #endif
    return modifier;
}

static uint8_t keycode_to_key(KEYCODE_TYPE keycode)
{
    uint8_t key = keycode & 0x3F;
    #ifdef KEY_NON_US_100
    if (key == KEY_NON_US_100) key = 100;
    #endif
    return key;
}


// Input can be:
//     32 - 127     ASCII direct (U+0020 to U+007F) <-- uses layout
//    128 - 0xC1FF  Unicode direct (U+0080 to U+C1FF) <-- uses layout
// 0xC200 - 0xDFFF  Unicode UTF8 packed (U+0080 to U+07FF) <-- uses layout
// 0xE000 - 0xE0FF  Modifier key (bitmap, 8 keys, shift/ctrl/alt/gui)
// 0xE200 - 0xE2FF  System key (HID usage code, within usage page 1)
// 0xE400 - 0xE7FF  Media/Consumer key (HID usage code, within usage page 12)
// 0xF000 - 0xFFFF  Normal key (HID usage code, within usage page 7)

void usb_keyboard_press_keycode(uint16_t n)
{
    uint8_t key, mod, msb, modrestore=0;
    KEYCODE_TYPE keycode;
    #ifdef DEADKEYS_MASK
    KEYCODE_TYPE deadkeycode;
    #endif

    msb = n >> 8;

    if (msb >= 0xC2) {
        if (msb <= 0xDF) {
            n = (n & 0x3F) | ((uint16_t)(msb & 0x1F) << 6);
        } else if (msb == 0xF0) {
            usb_keyboard_press_key(n, 0);
            return;
        } else if (msb == 0xE0) {
            usb_keyboard_press_key(0, n);
            return;
#ifdef KEYMEDIA_INTERFACE
        } else if (msb == 0xE2) {
            usb_keymedia_press_system_key(n);
            return;
        } else if (msb >= 0xE4 && msb <= 0xE7) {
            usb_keymedia_press_consumer_key(n & 0x3FF);
            return;
#endif
        } else {
            return;
        }
    }
    keycode = unicode_to_keycode(n);
    if (!keycode) return;
#ifdef DEADKEYS_MASK
    deadkeycode = deadkey_to_keycode(keycode);
    if (deadkeycode) {
        modrestore = keyboard_modifier_keys;
        if (modrestore) {
            keyboard_modifier_keys = 0;
            usb_keyboard_send();
        }
        // TODO: test if operating systems recognize
        // deadkey sequences when other keys are held
        mod = keycode_to_modifier(deadkeycode);
        key = keycode_to_key(deadkeycode);
        usb_keyboard_press_key(key, mod);
        usb_keyboard_release_key(key, mod);
    }
#endif
    mod = keycode_to_modifier(keycode);
    key = keycode_to_key(keycode);
    usb_keyboard_press_key(key, mod | modrestore);
}


void usb_keyboard_release_keycode(uint16_t n)
{
    uint8_t key, mod, msb;

    msb = n >> 8;
    if (msb >= 0xC2) {
        if (msb <= 0xDF) {
            n = (n & 0x3F) | ((uint16_t)(msb & 0x1F) << 6);
        } else if (msb == 0xF0) {
            usb_keyboard_release_key(n, 0);
            return;
        } else if (msb == 0xE0) {
            usb_keyboard_release_key(0, n);
            return;
#ifdef KEYMEDIA_INTERFACE
        } else if (msb == 0xE2) {
            usb_keymedia_release_system_key(n);
            return;
        } else if (msb >= 0xE4 && msb <= 0xE7) {
            usb_keymedia_release_consumer_key(n & 0x3FF);
            return;
#endif
        } else {
            return;
        }
    }
    KEYCODE_TYPE keycode = unicode_to_keycode(n);
    if (!keycode) return;
    mod = keycode_to_modifier(keycode);
    key = keycode_to_key(keycode);
    usb_keyboard_release_key(key, mod);
}


static void usb_keyboard_press_key(uint8_t key, uint8_t modifier)
{
    int i, send_required = 0;

    if (modifier) {
        if ((keyboard_modifier_keys & modifier) != modifier) {
            keyboard_modifier_keys |= modifier;
            send_required = 1;
        }
    }
    if (key) {
        for (i=0; i < sizeof(keyboard_keys); i++) {
            if (keyboard_keys[i] == key) goto end;
        }
        for (i=0; i < sizeof(keyboard_keys); i++) {
            if (keyboard_keys[i] == 0) {
                keyboard_keys[i] = key;
                send_required = 1;
                goto end;
            }
        }
    }
    end:
    if (send_required) usb_keyboard_send();
}


static void usb_keyboard_release_key(uint8_t key, uint8_t modifier)
{
    int i, send_required = 0;

    if (modifier) {
        if ((keyboard_modifier_keys & modifier) != 0) {
            keyboard_modifier_keys &= ~modifier;
            send_required = 1;
        }
    }
    if (key) {
        for (i=0; i < sizeof(keyboard_keys); i++) {
            if (keyboard_keys[i] == key) {
                keyboard_keys[i] = 0;
                send_required = 1;
            }
        }
    }
    if (send_required) usb_keyboard_send();
}

void usb_keyboard_release_all(void)
{
    uint8_t i, anybits;

    anybits = keyboard_modifier_keys;
    keyboard_modifier_keys = 0;
    for (i=0; i < sizeof(keyboard_keys); i++) {
        anybits |= keyboard_keys[i];
        keyboard_keys[i] = 0;
    }
    if (anybits) usb_keyboard_send();
#ifdef KEYMEDIA_INTERFACE
    anybits = 0;
    for (i=0; i < 4; i++) {
        if (keymedia_consumer_keys[i] != 0) anybits = 1;
        keymedia_consumer_keys[i] = 0;
    }
    for (i=0; i < 3; i++) {
        if (keymedia_system_keys[i] != 0) anybits = 1;
        keymedia_system_keys[i] = 0;
    }
    if (anybits) usb_keymedia_send();
#endif
}


int usb_keyboard_press(uint8_t key, uint8_t modifier)
{
    int r;
    keyboard_modifier_keys = modifier;
    memset(keyboard_keys, 0, sizeof(keyboard_keys));
    keyboard_keys[0] = key;
    r = usb_keyboard_send();
    if (r) return r;
    keyboard_modifier_keys = 0;
    keyboard_keys[0] = 0;
    return usb_keyboard_send();
}


static uint8_t transmit_previous_timeout=0;

// When the PC isn't listening, how long do we wait before discarding data?
#define TX_TIMEOUT_MSEC 50

int usb_keyboard_transmit(int endpoint, const uint8_t *data, uint32_t len)
{
    if (!usb_configuration) return -1;
    uint32_t head = tx_head;
    transfer_t *xfer = tx_transfer + head;
    uint32_t wait_begin_at = systick_millis_count;
    while (1) {
        uint32_t status = usb_transfer_status(xfer);
        if (!(status & 0x80)) {
            if (status & 0x68) {
                // TODO: what if status has errors???
                printf("ERROR status = %x, i=%d, ms=%u\n",
                    status, tx_head, systick_millis_count);
            }
            transmit_previous_timeout = 0;
            break;
        }
        if (transmit_previous_timeout) return -1;
        if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
            // waited too long, assume the USB host isn't listening
            transmit_previous_timeout = 1;
            return -1;
        }
        if (!usb_configuration) return -1;
        yield();
    }
    delayNanoseconds(30); // min req'd 11 ns, TODO: why is status ready too soon?
    uint8_t *buffer = txbuffer + head * TX_BUFSIZE;
    memcpy(buffer, data, len);
    usb_prepare_transfer(xfer, buffer, len, 0);
    arm_dcache_flush_delete(buffer, TX_BUFSIZE);
    usb_transmit(endpoint, xfer);
    if (++head >= TX_NUM) head = 0;
    tx_head = head;
    return 0;
}


// send the contents of keyboard_keys and keyboard_modifier_keys
int usb_keyboard_send(void)
{
    uint8_t buffer[KEYBOARD_SIZE];
    memcpy(buffer + 2, keyboard_keys, KEYBOARD_SIZE-2);
    buffer[0] = keyboard_modifier_keys;
    buffer[1] = 0;
    // buffer[2] = keyboard_keys[0];
    // buffer[3] = keyboard_keys[1];
    // buffer[4] = keyboard_keys[2];
    // buffer[5] = keyboard_keys[3];
    // buffer[6] = keyboard_keys[4];
    // buffer[7] = keyboard_keys[5];
    return usb_keyboard_transmit(KEYBOARD_ENDPOINT, buffer, KEYBOARD_SIZE);
}


#ifdef KEYMEDIA_INTERFACE

static void usb_keymedia_press_consumer_key(uint16_t key)
{
    int i;

    if (key == 0) return;
    for (i=0; i < 4; i++) {
        if (keymedia_consumer_keys[i] == key) return;
    }
    for (i=0; i < 4; i++) {
        if (keymedia_consumer_keys[i] == 0) {
            keymedia_consumer_keys[i] = key;
            usb_keymedia_send();
            return;
        }
    }
}

static void usb_keymedia_release_consumer_key(uint16_t key)
{
    int i;

    if (key == 0) return;
    for (i=0; i < 4; i++) {
        if (keymedia_consumer_keys[i] == key) {
            keymedia_consumer_keys[i] = 0;
            usb_keymedia_send();
            return;
        }
    }
}

static void usb_keymedia_press_system_key(uint8_t key)
{
    int i;

    if (key == 0) return;
    for (i=0; i < 3; i++) {
        if (keymedia_system_keys[i] == key) return;
    }
    for (i=0; i < 3; i++) {
        if (keymedia_system_keys[i] == 0) {
            keymedia_system_keys[i] = key;
            usb_keymedia_send();
            return;
        }
    }
}

static void usb_keymedia_release_system_key(uint8_t key)
{
    int i;

    if (key == 0) return;
    for (i=0; i < 3; i++) {
        if (keymedia_system_keys[i] == key) {
            keymedia_system_keys[i] = 0;
            usb_keymedia_send();
            return;
        }
    }
}

void usb_keymedia_release_all(void)
{
    uint8_t i, anybits;

    anybits = 0;
    for (i=0; i < 4; i++) {
        if (keymedia_consumer_keys[i] != 0) anybits = 1;
        keymedia_consumer_keys[i] = 0;
    }
    for (i=0; i < 3; i++) {
        if (keymedia_system_keys[i] != 0) anybits = 1;
        keymedia_system_keys[i] = 0;
    }
    if (anybits) usb_keymedia_send();
}

// send the contents of keyboard_keys and keyboard_modifier_keys
static int usb_keymedia_send(void)
{
    uint8_t buffer[8];
    const uint16_t *consumer = keymedia_consumer_keys;
    // 44444444 44333333 33332222 22222211 11111111
    // 98765432 10987654 32109876 54321098 76543210
    buffer[0] = consumer[0];
    buffer[1] = (consumer[1] << 2) | ((consumer[0] >> 8) & 0x03);
    buffer[2] = (consumer[2] << 4) | ((consumer[1] >> 6) & 0x0F);
    buffer[3] = (consumer[3] << 6) | ((consumer[2] >> 4) & 0x3F);
    buffer[4] = consumer[3] >> 2;
    buffer[5] = keymedia_system_keys[0];
    buffer[6] = keymedia_system_keys[1];
    buffer[7] = keymedia_system_keys[2];
    return usb_keyboard_transmit(KEYMEDIA_ENDPOINT, buffer, KEYMEDIA_SIZE);
}

#endif // KEYMEDIA_INTERFACE

#endif // KEYBOARD_INTERFACE

[@file: to_replace/usb_keyboard.h]
/* Teensyduino Core Library
 * http://www.pjrc.com/teensy/
 * Copyright (c) 2017 PJRC.COM, LLC.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * 2. If the Software is incorporated into a build system that allows
 * selection among a list of target devices, then similar target
 * devices manufactured by PJRC.COM must be included in the list of
 * target devices and selectable in the same manner.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

#include "usb_desc.h"

#include "keylayouts.h"

#if defined(KEYBOARD_INTERFACE)

#include <inttypes.h>

// C language implementation
#ifdef __cplusplus
extern "C" {
#endif
void usb_keyboard_configure(void);
void usb_keyboard_write(uint8_t c);
void usb_keyboard_write_unicode(uint16_t cpoint);
void usb_keyboard_press_keycode(uint16_t n);
void usb_keyboard_release_keycode(uint16_t n);
void usb_keyboard_release_all(void);
int usb_keyboard_press(uint8_t key, uint8_t modifier);
int usb_keyboard_send(void);
int usb_keyboard_transmit(int endpoint, const uint8_t *data, uint32_t len);
#ifdef KEYMEDIA_INTERFACE
void usb_keymedia_release_all(void);
#endif
extern uint8_t keyboard_modifier_keys;
extern uint8_t keyboard_keys[KEYBOARD_SIZE - 2];
extern uint8_t keyboard_protocol;
extern uint8_t keyboard_idle_config;
extern uint8_t keyboard_idle_count;
extern volatile uint8_t keyboard_leds;
extern volatile uint8_t usb_configuration;
#ifdef __cplusplus
}
#endif

// C++ interface
#ifdef __cplusplus
#include "Stream.h"
class usb_keyboard_class : public Print {
public:
    void begin(void) {}
    void end(void) {}
    virtual size_t write(uint8_t c) {
        usb_keyboard_write(c);
        return 1;
    }
    size_t write(unsigned long n) { return write((uint8_t)n); }
    size_t write(long n) { return write((uint8_t)n); }
    size_t write(unsigned int n) { return write((uint8_t)n); }
    size_t write(int n) { return write((uint8_t)n); }
    using Print::write;
    void write_unicode(uint16_t n) { usb_keyboard_write_unicode(n); }
    void set_modifier(uint16_t c) { keyboard_modifier_keys = (uint8_t)c; }
    void set_key1(uint8_t c) { keyboard_keys[0] = c; }
    void set_key2(uint8_t c) { keyboard_keys[1] = c; }
    void set_key3(uint8_t c) { keyboard_keys[2] = c; }
    void set_key4(uint8_t c) { keyboard_keys[3] = c; }
    void set_key5(uint8_t c) { keyboard_keys[4] = c; }
    void set_key6(uint8_t c) { keyboard_keys[5] = c; }
    void set_keyx(uint8_t c, int n) { keyboard_keys[n] = c; }
#ifdef KEYMEDIA_INTERFACE
    void set_media(uint16_t c) {
        if (c == 0) {
            usb_keymedia_release_all();
        } else if (c >= 0xE400 && c <= 0xE7FF) {
            press(c);
        }
    }
#endif
    void send_now(void) { usb_keyboard_send(); }
    void press(uint16_t n) { usb_keyboard_press_keycode(n); }
    void release(uint16_t n) { usb_keyboard_release_keycode(n); }
    void releaseAll(void) { usb_keyboard_release_all(); }
};

extern usb_keyboard_class Keyboard;

#endif // __cplusplus

#endif // KEYBOARD_INTERFACE

